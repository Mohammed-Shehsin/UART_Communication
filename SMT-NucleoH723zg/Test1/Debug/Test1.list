
Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd48  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800d018  0800d018  0001d018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d5a0  0800d5a0  0001d5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d5a8  0800d5a8  0001d5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d5ac  0800d5ac  0001d5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  24000000  0800d5b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001f8  0800d7a8  000201f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000258  0800d808  00020258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  240002b8  0800d868  000202b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240005ec  0800d868  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6b7  00000000  00000000  000202e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b1  00000000  00000000  0003b99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  0003e350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003f6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003493e  00000000  00000000  00040928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190ea  00000000  00000000  00075266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00153e79  00000000  00000000  0008e350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e21c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006764  00000000  00000000  001e221c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002b8 	.word	0x240002b8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d000 	.word	0x0800d000

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002bc 	.word	0x240002bc
 800030c:	0800d000 	.word	0x0800d000

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <sendStruct>:
  "cherry",
  "orange",
  "pears"
};
//send function
void sendStruct(const myStruct* data) {
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b0a1      	sub	sp, #132	; 0x84
 8000ab0:	af02      	add	r7, sp, #8
 8000ab2:	6078      	str	r0, [r7, #4]
  char newString[100];
  char floatString[10];
  sprintf(floatString,"%.2f",data->floats);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	edd3 7a04 	vldr	s15, [r3, #16]
 8000aba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000abe:	f107 0008 	add.w	r0, r7, #8
 8000ac2:	ec53 2b17 	vmov	r2, r3, d7
 8000ac6:	4915      	ldr	r1, [pc, #84]	; (8000b1c <sendStruct+0x70>)
 8000ac8:	f008 fd72 	bl	80095b0 <siprintf>
  sprintf(newString, "%s %s %ld %s;", data->str, (data->booleans ? "true" : "false"), data->integer, floatString);
 8000acc:	6879      	ldr	r1, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	7a9b      	ldrb	r3, [r3, #10]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <sendStruct+0x2e>
 8000ad6:	4c12      	ldr	r4, [pc, #72]	; (8000b20 <sendStruct+0x74>)
 8000ad8:	e000      	b.n	8000adc <sendStruct+0x30>
 8000ada:	4c12      	ldr	r4, [pc, #72]	; (8000b24 <sendStruct+0x78>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	f107 0014 	add.w	r0, r7, #20
 8000ae4:	f107 0208 	add.w	r2, r7, #8
 8000ae8:	9201      	str	r2, [sp, #4]
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	4623      	mov	r3, r4
 8000aee:	460a      	mov	r2, r1
 8000af0:	490d      	ldr	r1, [pc, #52]	; (8000b28 <sendStruct+0x7c>)
 8000af2:	f008 fd5d 	bl	80095b0 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)newString, strlen(newString), HAL_MAX_DELAY);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fc08 	bl	8000310 <strlen>
 8000b00:	4603      	mov	r3, r0
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	f107 0114 	add.w	r1, r7, #20
 8000b08:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0c:	4807      	ldr	r0, [pc, #28]	; (8000b2c <sendStruct+0x80>)
 8000b0e:	f006 f841 	bl	8006b94 <HAL_UART_Transmit>
}
 8000b12:	bf00      	nop
 8000b14:	377c      	adds	r7, #124	; 0x7c
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	0800d040 	.word	0x0800d040
 8000b20:	0800d048 	.word	0x0800d048
 8000b24:	0800d050 	.word	0x0800d050
 8000b28:	0800d058 	.word	0x0800d058
 8000b2c:	240004a0 	.word	0x240004a0

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b36:	f001 f821 	bl	8001b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3a:	f000 f893 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3e:	f000 fae1 	bl	8001104 <MX_GPIO_Init>
  MX_ETH_Init();
 8000b42:	f000 f8ff 	bl	8000d44 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b46:	f000 fa89 	bl	800105c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b4a:	f000 fad3 	bl	80010f4 <MX_USB_OTG_HS_USB_Init>
  MX_TIM3_Init();
 8000b4e:	f000 f999 	bl	8000e84 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000b52:	f000 f943 	bl	8000ddc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000b56:	f000 fa35 	bl	8000fc4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000b5a:	f000 f9e3 	bl	8000f24 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000b5e:	4839      	ldr	r0, [pc, #228]	; (8000c44 <main+0x114>)
 8000b60:	f005 fb04 	bl	800616c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000b64:	4838      	ldr	r0, [pc, #224]	; (8000c48 <main+0x118>)
 8000b66:	f005 fb01 	bl	800616c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	     myStruct data;
	     uint8_t randomIndex = rand() % 5;
 8000b6a:	f008 fcdd 	bl	8009528 <rand>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	4b36      	ldr	r3, [pc, #216]	; (8000c4c <main+0x11c>)
 8000b72:	fb83 1302 	smull	r1, r3, r3, r2
 8000b76:	1059      	asrs	r1, r3, #1
 8000b78:	17d3      	asrs	r3, r2, #31
 8000b7a:	1ac9      	subs	r1, r1, r3
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	440b      	add	r3, r1
 8000b82:	1ad1      	subs	r1, r2, r3
 8000b84:	460b      	mov	r3, r1
 8000b86:	75fb      	strb	r3, [r7, #23]
	    // data.timestamp = HAL_GetTick();
	     strcpy(data.str, stringList[randomIndex]);
 8000b88:	7dfb      	ldrb	r3, [r7, #23]
 8000b8a:	4a31      	ldr	r2, [pc, #196]	; (8000c50 <main+0x120>)
 8000b8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b90:	463b      	mov	r3, r7
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f008 fd2b 	bl	80095f0 <strcpy>
	     data.booleans = rand() % 2;
 8000b9a:	f008 fcc5 	bl	8009528 <rand>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	bfb8      	it	lt
 8000ba8:	425b      	neglt	r3, r3
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	72bb      	strb	r3, [r7, #10]
	     data.integer = rand() % 201 - 100;
 8000bae:	f008 fcbb 	bl	8009528 <rand>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <main+0x124>)
 8000bb6:	fb83 1302 	smull	r1, r3, r3, r2
 8000bba:	1059      	asrs	r1, r3, #1
 8000bbc:	17d3      	asrs	r3, r2, #31
 8000bbe:	1acb      	subs	r3, r1, r3
 8000bc0:	21c9      	movs	r1, #201	; 0xc9
 8000bc2:	fb01 f303 	mul.w	r3, r1, r3
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	3b64      	subs	r3, #100	; 0x64
 8000bca:	60fb      	str	r3, [r7, #12]
	     data.floats = (float)(rand() % 2001 - 1000) / 10.0f;
 8000bcc:	f008 fcac 	bl	8009528 <rand>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <main+0x128>)
 8000bd4:	fb83 1302 	smull	r1, r3, r3, r2
 8000bd8:	1259      	asrs	r1, r3, #9
 8000bda:	17d3      	asrs	r3, r2, #31
 8000bdc:	1acb      	subs	r3, r1, r3
 8000bde:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8000be2:	fb01 f303 	mul.w	r3, r1, r3
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000bec:	ee07 3a90 	vmov	s15, r3
 8000bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bf4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000bf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bfc:	edc7 7a04 	vstr	s15, [r7, #16]
	     sendStruct(&data);
 8000c00:	463b      	mov	r3, r7
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff52 	bl	8000aac <sendStruct>
	     HAL_Delay(1000);
 8000c08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0c:	f001 f848 	bl	8001ca0 <HAL_Delay>
	 //------------Blinking LED------------
    if(flag == true){
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <main+0x12c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0a8      	beq.n	8000b6a <main+0x3a>
    	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_SET); // LED ON
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	4810      	ldr	r0, [pc, #64]	; (8000c60 <main+0x130>)
 8000c1e:	f002 fcb7 	bl	8003590 <HAL_GPIO_WritePin>
    	HAL_Delay(1000);
 8000c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c26:	f001 f83b 	bl	8001ca0 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	480c      	ldr	r0, [pc, #48]	; (8000c60 <main+0x130>)
 8000c30:	f002 fcae 	bl	8003590 <HAL_GPIO_WritePin>
    	HAL_Delay(1000);
 8000c34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c38:	f001 f832 	bl	8001ca0 <HAL_Delay>
    	// HAL_UART_Transmit(&huart1, (uint8_t *)newString.c_str(), strlen(message), HAL_MAX_DELAY);

    	flag=false;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <main+0x12c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
  {
 8000c42:	e792      	b.n	8000b6a <main+0x3a>
 8000c44:	24000408 	.word	0x24000408
 8000c48:	24000454 	.word	0x24000454
 8000c4c:	66666667 	.word	0x66666667
 8000c50:	24000000 	.word	0x24000000
 8000c54:	028c1979 	.word	0x028c1979
 8000c58:	4180d4e3 	.word	0x4180d4e3
 8000c5c:	240005c8 	.word	0x240005c8
 8000c60:	58021000 	.word	0x58021000

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b09c      	sub	sp, #112	; 0x70
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	224c      	movs	r2, #76	; 0x4c
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f007 fe08 	bl	8008888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f007 fe02 	bl	8008888 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c84:	2002      	movs	r0, #2
 8000c86:	f002 fcb7 	bl	80035f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <SystemClock_Config+0xdc>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	4a2b      	ldr	r2, [pc, #172]	; (8000d40 <SystemClock_Config+0xdc>)
 8000c94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c98:	6193      	str	r3, [r2, #24]
 8000c9a:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <SystemClock_Config+0xdc>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ca6:	bf00      	nop
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <SystemClock_Config+0xdc>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cb4:	d1f8      	bne.n	8000ca8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000cb6:	2321      	movs	r3, #33	; 0x21
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cba:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8000cd0:	233e      	movs	r3, #62	; 0x3e
 8000cd2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 fcba 	bl	800366c <HAL_RCC_OscConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cfe:	f000 fb21 	bl	8001344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d02:	233f      	movs	r3, #63	; 0x3f
 8000d04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d06:	2303      	movs	r3, #3
 8000d08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d0e:	2308      	movs	r3, #8
 8000d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d12:	2340      	movs	r3, #64	; 0x40
 8000d14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d16:	2340      	movs	r3, #64	; 0x40
 8000d18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d20:	2340      	movs	r3, #64	; 0x40
 8000d22:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2103      	movs	r1, #3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f003 f879 	bl	8003e20 <HAL_RCC_ClockConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000d34:	f000 fb06 	bl	8001344 <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3770      	adds	r7, #112	; 0x70
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	58024800 	.word	0x58024800

08000d44 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_ETH_Init+0x80>)
 8000d4a:	4a1f      	ldr	r2, [pc, #124]	; (8000dc8 <MX_ETH_Init+0x84>)
 8000d4c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_ETH_Init+0x88>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_ETH_Init+0x88>)
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_ETH_Init+0x88>)
 8000d5c:	22e1      	movs	r2, #225	; 0xe1
 8000d5e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_ETH_Init+0x88>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_ETH_Init+0x88>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_ETH_Init+0x88>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_ETH_Init+0x80>)
 8000d74:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <MX_ETH_Init+0x88>)
 8000d76:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_ETH_Init+0x80>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_ETH_Init+0x80>)
 8000d80:	4a13      	ldr	r2, [pc, #76]	; (8000dd0 <MX_ETH_Init+0x8c>)
 8000d82:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_ETH_Init+0x80>)
 8000d86:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <MX_ETH_Init+0x90>)
 8000d88:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_ETH_Init+0x80>)
 8000d8c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d90:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d92:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_ETH_Init+0x80>)
 8000d94:	f001 fe30 	bl	80029f8 <HAL_ETH_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d9e:	f000 fad1 	bl	8001344 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000da2:	2238      	movs	r2, #56	; 0x38
 8000da4:	2100      	movs	r1, #0
 8000da6:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <MX_ETH_Init+0x94>)
 8000da8:	f007 fd6e 	bl	8008888 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MX_ETH_Init+0x94>)
 8000dae:	2221      	movs	r2, #33	; 0x21
 8000db0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_ETH_Init+0x94>)
 8000db4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000db8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MX_ETH_Init+0x94>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2400030c 	.word	0x2400030c
 8000dc8:	40028000 	.word	0x40028000
 8000dcc:	240005cc 	.word	0x240005cc
 8000dd0:	24000258 	.word	0x24000258
 8000dd4:	240001f8 	.word	0x240001f8
 8000dd8:	240002d4 	.word	0x240002d4

08000ddc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <MX_TIM1_Init+0xa0>)
 8000dfc:	4a20      	ldr	r2, [pc, #128]	; (8000e80 <MX_TIM1_Init+0xa4>)
 8000dfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_TIM1_Init+0xa0>)
 8000e02:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_TIM1_Init+0xa0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_TIM1_Init+0xa0>)
 8000e10:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_TIM1_Init+0xa0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_TIM1_Init+0xa0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_TIM1_Init+0xa0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e28:	4814      	ldr	r0, [pc, #80]	; (8000e7c <MX_TIM1_Init+0xa0>)
 8000e2a:	f005 f947 	bl	80060bc <HAL_TIM_Base_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000e34:	f000 fa86 	bl	8001344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	4619      	mov	r1, r3
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <MX_TIM1_Init+0xa0>)
 8000e46:	f005 fb37 	bl	80064b8 <HAL_TIM_ConfigClockSource>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e50:	f000 fa78 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_TIM1_Init+0xa0>)
 8000e66:	f005 fd8b 	bl	8006980 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e70:	f000 fa68 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	240003bc 	.word	0x240003bc
 8000e80:	40010000 	.word	0x40010000

08000e84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_TIM3_Init+0x98>)
 8000ea4:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <MX_TIM3_Init+0x9c>)
 8000ea6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2500;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_TIM3_Init+0x98>)
 8000eaa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000eae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_TIM3_Init+0x98>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <MX_TIM3_Init+0x98>)
 8000eb8:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000ebc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <MX_TIM3_Init+0x98>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_TIM3_Init+0x98>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eca:	4814      	ldr	r0, [pc, #80]	; (8000f1c <MX_TIM3_Init+0x98>)
 8000ecc:	f005 f8f6 	bl	80060bc <HAL_TIM_Base_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000ed6:	f000 fa35 	bl	8001344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ede:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <MX_TIM3_Init+0x98>)
 8000ee8:	f005 fae6 	bl	80064b8 <HAL_TIM_ConfigClockSource>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000ef2:	f000 fa27 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <MX_TIM3_Init+0x98>)
 8000f04:	f005 fd3c 	bl	8006980 <HAL_TIMEx_MasterConfigSynchronization>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000f0e:	f000 fa19 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	24000408 	.word	0x24000408
 8000f20:	40000400 	.word	0x40000400

08000f24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f42:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <MX_TIM4_Init+0x98>)
 8000f44:	4a1e      	ldr	r2, [pc, #120]	; (8000fc0 <MX_TIM4_Init+0x9c>)
 8000f46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5000;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <MX_TIM4_Init+0x98>)
 8000f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_TIM4_Init+0x98>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <MX_TIM4_Init+0x98>)
 8000f58:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000f5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_TIM4_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_TIM4_Init+0x98>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f6a:	4814      	ldr	r0, [pc, #80]	; (8000fbc <MX_TIM4_Init+0x98>)
 8000f6c:	f005 f8a6 	bl	80060bc <HAL_TIM_Base_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000f76:	f000 f9e5 	bl	8001344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4619      	mov	r1, r3
 8000f86:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_TIM4_Init+0x98>)
 8000f88:	f005 fa96 	bl	80064b8 <HAL_TIM_ConfigClockSource>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000f92:	f000 f9d7 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <MX_TIM4_Init+0x98>)
 8000fa4:	f005 fcec 	bl	8006980 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000fae:	f000 f9c9 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	24000454 	.word	0x24000454
 8000fc0:	40000800 	.word	0x40000800

08000fc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000fca:	4a23      	ldr	r2, [pc, #140]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8000fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000fea:	220c      	movs	r2, #12
 8000fec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800100c:	4811      	ldr	r0, [pc, #68]	; (8001054 <MX_USART1_UART_Init+0x90>)
 800100e:	f005 fd71 	bl	8006af4 <HAL_UART_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001018:	f000 f994 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800101c:	2100      	movs	r1, #0
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8001020:	f007 fb3e 	bl	80086a0 <HAL_UARTEx_SetTxFifoThreshold>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800102a:	f000 f98b 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102e:	2100      	movs	r1, #0
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8001032:	f007 fb73 	bl	800871c <HAL_UARTEx_SetRxFifoThreshold>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800103c:	f000 f982 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8001042:	f007 faf4 	bl	800862e <HAL_UARTEx_DisableFifoMode>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800104c:	f000 f97a 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	240004a0 	.word	0x240004a0
 8001058:	40011000 	.word	0x40011000

0800105c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <MX_USART3_UART_Init+0x90>)
 8001062:	4a23      	ldr	r2, [pc, #140]	; (80010f0 <MX_USART3_UART_Init+0x94>)
 8001064:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <MX_USART3_UART_Init+0x90>)
 8001068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800106c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <MX_USART3_UART_Init+0x90>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <MX_USART3_UART_Init+0x90>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <MX_USART3_UART_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_USART3_UART_Init+0x90>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_USART3_UART_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_USART3_UART_Init+0x90>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_USART3_UART_Init+0x90>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_USART3_UART_Init+0x90>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <MX_USART3_UART_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010a4:	4811      	ldr	r0, [pc, #68]	; (80010ec <MX_USART3_UART_Init+0x90>)
 80010a6:	f005 fd25 	bl	8006af4 <HAL_UART_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010b0:	f000 f948 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b4:	2100      	movs	r1, #0
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_USART3_UART_Init+0x90>)
 80010b8:	f007 faf2 	bl	80086a0 <HAL_UARTEx_SetTxFifoThreshold>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010c2:	f000 f93f 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4808      	ldr	r0, [pc, #32]	; (80010ec <MX_USART3_UART_Init+0x90>)
 80010ca:	f007 fb27 	bl	800871c <HAL_UARTEx_SetRxFifoThreshold>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010d4:	f000 f936 	bl	8001344 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_USART3_UART_Init+0x90>)
 80010da:	f007 faa8 	bl	800862e <HAL_UARTEx_DisableFifoMode>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010e4:	f000 f92e 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	24000534 	.word	0x24000534
 80010f0:	40004800 	.word	0x40004800

080010f4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	; 0x30
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	4b71      	ldr	r3, [pc, #452]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 800111c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001120:	4a6f      	ldr	r2, [pc, #444]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112a:	4b6d      	ldr	r3, [pc, #436]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001138:	4b69      	ldr	r3, [pc, #420]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113e:	4a68      	ldr	r2, [pc, #416]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001148:	4b65      	ldr	r3, [pc, #404]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b62      	ldr	r3, [pc, #392]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	4a60      	ldr	r2, [pc, #384]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001166:	4b5e      	ldr	r3, [pc, #376]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b5a      	ldr	r3, [pc, #360]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	4a59      	ldr	r2, [pc, #356]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001184:	4b56      	ldr	r3, [pc, #344]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001198:	4a51      	ldr	r2, [pc, #324]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a2:	4b4f      	ldr	r3, [pc, #316]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b0:	4b4b      	ldr	r3, [pc, #300]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	4a4a      	ldr	r2, [pc, #296]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 80011b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c0:	4b47      	ldr	r3, [pc, #284]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ce:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	4a42      	ldr	r2, [pc, #264]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011de:	4b40      	ldr	r3, [pc, #256]	; (80012e0 <MX_GPIO_Init+0x1dc>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f244 0101 	movw	r1, #16385	; 0x4001
 80011f2:	483c      	ldr	r0, [pc, #240]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 80011f4:	f002 f9cc 	bl	8003590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fe:	483a      	ldr	r0, [pc, #232]	; (80012e8 <MX_GPIO_Init+0x1e4>)
 8001200:	f002 f9c6 	bl	8003590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2102      	movs	r1, #2
 8001208:	4838      	ldr	r0, [pc, #224]	; (80012ec <MX_GPIO_Init+0x1e8>)
 800120a:	f002 f9c1 	bl	8003590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800120e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4833      	ldr	r0, [pc, #204]	; (80012f0 <MX_GPIO_Init+0x1ec>)
 8001224:	f002 f80c 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001228:	f244 0301 	movw	r3, #16385	; 0x4001
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	4828      	ldr	r0, [pc, #160]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 8001242:	f001 fffd 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4619      	mov	r1, r3
 800125e:	4822      	ldr	r0, [pc, #136]	; (80012e8 <MX_GPIO_Init+0x1e4>)
 8001260:	f001 ffee 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001268:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800126c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	481e      	ldr	r0, [pc, #120]	; (80012f4 <MX_GPIO_Init+0x1f0>)
 800127a:	f001 ffe1 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800127e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	4819      	ldr	r0, [pc, #100]	; (80012f8 <MX_GPIO_Init+0x1f4>)
 8001294:	f001 ffd4 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80012aa:	230a      	movs	r3, #10
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	4810      	ldr	r0, [pc, #64]	; (80012f8 <MX_GPIO_Init+0x1f4>)
 80012b6:	f001 ffc3 	bl	8003240 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4619      	mov	r1, r3
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <MX_GPIO_Init+0x1e8>)
 80012d2:	f001 ffb5 	bl	8003240 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d6:	bf00      	nop
 80012d8:	3730      	adds	r7, #48	; 0x30
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	58024400 	.word	0x58024400
 80012e4:	58020400 	.word	0x58020400
 80012e8:	58020c00 	.word	0x58020c00
 80012ec:	58021000 	.word	0x58021000
 80012f0:	58020800 	.word	0x58020800
 80012f4:	58021800 	.word	0x58021800
 80012f8:	58020000 	.word	0x58020000

080012fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if(htim==&htim3){
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d107      	bne.n	800131c <HAL_TIM_PeriodElapsedCallback+0x20>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800130c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001312:	f002 f956 	bl	80035c2 <HAL_GPIO_TogglePin>
		flag = true;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
	}
	if(htim==&htim4){
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d103      	bne.n	800132c <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8001324:	2101      	movs	r1, #1
 8001326:	4804      	ldr	r0, [pc, #16]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001328:	f002 f94b 	bl	80035c2 <HAL_GPIO_TogglePin>
	}

}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	24000408 	.word	0x24000408
 8001338:	58020400 	.word	0x58020400
 800133c:	240005c8 	.word	0x240005c8
 8001340:	24000454 	.word	0x24000454

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134c:	e7fe      	b.n	800134c <Error_Handler+0x8>
	...

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_MspInit+0x30>)
 8001358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800135c:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_MspInit+0x30>)
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_MspInit+0x30>)
 8001368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	58024400 	.word	0x58024400

08001384 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08e      	sub	sp, #56	; 0x38
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a59      	ldr	r2, [pc, #356]	; (8001508 <HAL_ETH_MspInit+0x184>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	f040 80ab 	bne.w	80014fe <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80013a8:	4b58      	ldr	r3, [pc, #352]	; (800150c <HAL_ETH_MspInit+0x188>)
 80013aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ae:	4a57      	ldr	r2, [pc, #348]	; (800150c <HAL_ETH_MspInit+0x188>)
 80013b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013b8:	4b54      	ldr	r3, [pc, #336]	; (800150c <HAL_ETH_MspInit+0x188>)
 80013ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013c2:	623b      	str	r3, [r7, #32]
 80013c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80013c6:	4b51      	ldr	r3, [pc, #324]	; (800150c <HAL_ETH_MspInit+0x188>)
 80013c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013cc:	4a4f      	ldr	r2, [pc, #316]	; (800150c <HAL_ETH_MspInit+0x188>)
 80013ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013d6:	4b4d      	ldr	r3, [pc, #308]	; (800150c <HAL_ETH_MspInit+0x188>)
 80013d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80013e4:	4b49      	ldr	r3, [pc, #292]	; (800150c <HAL_ETH_MspInit+0x188>)
 80013e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ea:	4a48      	ldr	r2, [pc, #288]	; (800150c <HAL_ETH_MspInit+0x188>)
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013f4:	4b45      	ldr	r3, [pc, #276]	; (800150c <HAL_ETH_MspInit+0x188>)
 80013f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	4b42      	ldr	r3, [pc, #264]	; (800150c <HAL_ETH_MspInit+0x188>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001408:	4a40      	ldr	r2, [pc, #256]	; (800150c <HAL_ETH_MspInit+0x188>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001412:	4b3e      	ldr	r3, [pc, #248]	; (800150c <HAL_ETH_MspInit+0x188>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	4b3a      	ldr	r3, [pc, #232]	; (800150c <HAL_ETH_MspInit+0x188>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001426:	4a39      	ldr	r2, [pc, #228]	; (800150c <HAL_ETH_MspInit+0x188>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001430:	4b36      	ldr	r3, [pc, #216]	; (800150c <HAL_ETH_MspInit+0x188>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b33      	ldr	r3, [pc, #204]	; (800150c <HAL_ETH_MspInit+0x188>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001444:	4a31      	ldr	r2, [pc, #196]	; (800150c <HAL_ETH_MspInit+0x188>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144e:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_ETH_MspInit+0x188>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <HAL_ETH_MspInit+0x188>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001462:	4a2a      	ldr	r2, [pc, #168]	; (800150c <HAL_ETH_MspInit+0x188>)
 8001464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_ETH_MspInit+0x188>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800147a:	2332      	movs	r3, #50	; 0x32
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800148a:	230b      	movs	r3, #11
 800148c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001492:	4619      	mov	r1, r3
 8001494:	481e      	ldr	r0, [pc, #120]	; (8001510 <HAL_ETH_MspInit+0x18c>)
 8001496:	f001 fed3 	bl	8003240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800149a:	2386      	movs	r3, #134	; 0x86
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014aa:	230b      	movs	r3, #11
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	4817      	ldr	r0, [pc, #92]	; (8001514 <HAL_ETH_MspInit+0x190>)
 80014b6:	f001 fec3 	bl	8003240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014cc:	230b      	movs	r3, #11
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	4810      	ldr	r0, [pc, #64]	; (8001518 <HAL_ETH_MspInit+0x194>)
 80014d8:	f001 feb2 	bl	8003240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ee:	230b      	movs	r3, #11
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	4808      	ldr	r0, [pc, #32]	; (800151c <HAL_ETH_MspInit+0x198>)
 80014fa:	f001 fea1 	bl	8003240 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	3738      	adds	r7, #56	; 0x38
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40028000 	.word	0x40028000
 800150c:	58024400 	.word	0x58024400
 8001510:	58020800 	.word	0x58020800
 8001514:	58020000 	.word	0x58020000
 8001518:	58020400 	.word	0x58020400
 800151c:	58021800 	.word	0x58021800

08001520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a37      	ldr	r2, [pc, #220]	; (800160c <HAL_TIM_Base_MspInit+0xec>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d12f      	bne.n	8001592 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <HAL_TIM_Base_MspInit+0xf0>)
 8001534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001538:	4a35      	ldr	r2, [pc, #212]	; (8001610 <HAL_TIM_Base_MspInit+0xf0>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001542:	4b33      	ldr	r3, [pc, #204]	; (8001610 <HAL_TIM_Base_MspInit+0xf0>)
 8001544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2100      	movs	r1, #0
 8001554:	2018      	movs	r0, #24
 8001556:	f000 fcb6 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800155a:	2018      	movs	r0, #24
 800155c:	f000 fccd 	bl	8001efa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2100      	movs	r1, #0
 8001564:	2019      	movs	r0, #25
 8001566:	f000 fcae 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800156a:	2019      	movs	r0, #25
 800156c:	f000 fcc5 	bl	8001efa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	201a      	movs	r0, #26
 8001576:	f000 fca6 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800157a:	201a      	movs	r0, #26
 800157c:	f000 fcbd 	bl	8001efa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	201b      	movs	r0, #27
 8001586:	f000 fc9e 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800158a:	201b      	movs	r0, #27
 800158c:	f000 fcb5 	bl	8001efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001590:	e038      	b.n	8001604 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <HAL_TIM_Base_MspInit+0xf4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d117      	bne.n	80015cc <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <HAL_TIM_Base_MspInit+0xf0>)
 800159e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a2:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <HAL_TIM_Base_MspInit+0xf0>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <HAL_TIM_Base_MspInit+0xf0>)
 80015ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	201d      	movs	r0, #29
 80015c0:	f000 fc81 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015c4:	201d      	movs	r0, #29
 80015c6:	f000 fc98 	bl	8001efa <HAL_NVIC_EnableIRQ>
}
 80015ca:	e01b      	b.n	8001604 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM4)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a11      	ldr	r2, [pc, #68]	; (8001618 <HAL_TIM_Base_MspInit+0xf8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d116      	bne.n	8001604 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_TIM_Base_MspInit+0xf0>)
 80015d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_TIM_Base_MspInit+0xf0>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_TIM_Base_MspInit+0xf0>)
 80015e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2100      	movs	r1, #0
 80015f8:	201e      	movs	r0, #30
 80015fa:	f000 fc64 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015fe:	201e      	movs	r0, #30
 8001600:	f000 fc7b 	bl	8001efa <HAL_NVIC_EnableIRQ>
}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40010000 	.word	0x40010000
 8001610:	58024400 	.word	0x58024400
 8001614:	40000400 	.word	0x40000400
 8001618:	40000800 	.word	0x40000800

0800161c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b0ba      	sub	sp, #232	; 0xe8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	22b8      	movs	r2, #184	; 0xb8
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f007 f923 	bl	8008888 <memset>
  if(huart->Instance==USART1)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a5c      	ldr	r2, [pc, #368]	; (80017b8 <HAL_UART_MspInit+0x19c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d164      	bne.n	8001716 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800164c:	f04f 0201 	mov.w	r2, #1
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800165e:	f107 0318 	add.w	r3, r7, #24
 8001662:	4618      	mov	r0, r3
 8001664:	f002 ff68 	bl	8004538 <HAL_RCCEx_PeriphCLKConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800166e:	f7ff fe69 	bl	8001344 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001672:	4b52      	ldr	r3, [pc, #328]	; (80017bc <HAL_UART_MspInit+0x1a0>)
 8001674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001678:	4a50      	ldr	r2, [pc, #320]	; (80017bc <HAL_UART_MspInit+0x1a0>)
 800167a:	f043 0310 	orr.w	r3, r3, #16
 800167e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001682:	4b4e      	ldr	r3, [pc, #312]	; (80017bc <HAL_UART_MspInit+0x1a0>)
 8001684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001690:	4b4a      	ldr	r3, [pc, #296]	; (80017bc <HAL_UART_MspInit+0x1a0>)
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001696:	4a49      	ldr	r2, [pc, #292]	; (80017bc <HAL_UART_MspInit+0x1a0>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a0:	4b46      	ldr	r3, [pc, #280]	; (80017bc <HAL_UART_MspInit+0x1a0>)
 80016a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80016c8:	2304      	movs	r3, #4
 80016ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016d2:	4619      	mov	r1, r3
 80016d4:	483a      	ldr	r0, [pc, #232]	; (80017c0 <HAL_UART_MspInit+0x1a4>)
 80016d6:	f001 fdb3 	bl	8003240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016da:	2340      	movs	r3, #64	; 0x40
 80016dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016f2:	2307      	movs	r3, #7
 80016f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016fc:	4619      	mov	r1, r3
 80016fe:	4830      	ldr	r0, [pc, #192]	; (80017c0 <HAL_UART_MspInit+0x1a4>)
 8001700:	f001 fd9e 	bl	8003240 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2025      	movs	r0, #37	; 0x25
 800170a:	f000 fbdc 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800170e:	2025      	movs	r0, #37	; 0x25
 8001710:	f000 fbf3 	bl	8001efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001714:	e04b      	b.n	80017ae <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART3)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a2a      	ldr	r2, [pc, #168]	; (80017c4 <HAL_UART_MspInit+0x1a8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d146      	bne.n	80017ae <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001720:	f04f 0202 	mov.w	r2, #2
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001732:	f107 0318 	add.w	r3, r7, #24
 8001736:	4618      	mov	r0, r3
 8001738:	f002 fefe 	bl	8004538 <HAL_RCCEx_PeriphCLKConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8001742:	f7ff fdff 	bl	8001344 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_UART_MspInit+0x1a0>)
 8001748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800174c:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <HAL_UART_MspInit+0x1a0>)
 800174e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001752:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_UART_MspInit+0x1a0>)
 8001758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800175c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_UART_MspInit+0x1a0>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176a:	4a14      	ldr	r2, [pc, #80]	; (80017bc <HAL_UART_MspInit+0x1a0>)
 800176c:	f043 0308 	orr.w	r3, r3, #8
 8001770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_UART_MspInit+0x1a0>)
 8001776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001782:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800179c:	2307      	movs	r3, #7
 800179e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017a6:	4619      	mov	r1, r3
 80017a8:	4807      	ldr	r0, [pc, #28]	; (80017c8 <HAL_UART_MspInit+0x1ac>)
 80017aa:	f001 fd49 	bl	8003240 <HAL_GPIO_Init>
}
 80017ae:	bf00      	nop
 80017b0:	37e8      	adds	r7, #232	; 0xe8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40011000 	.word	0x40011000
 80017bc:	58024400 	.word	0x58024400
 80017c0:	58020400 	.word	0x58020400
 80017c4:	40004800 	.word	0x40004800
 80017c8:	58020c00 	.word	0x58020c00

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <NMI_Handler+0x4>

080017d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler+0x4>

080017d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <MemManage_Handler+0x4>

080017de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <BusFault_Handler+0x4>

080017e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <UsageFault_Handler+0x4>

080017ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001818:	f000 fa22 	bl	8001c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}

08001820 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <TIM1_BRK_IRQHandler+0x10>)
 8001826:	f004 fd27 	bl	8006278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	240003bc 	.word	0x240003bc

08001834 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <TIM1_UP_IRQHandler+0x10>)
 800183a:	f004 fd1d 	bl	8006278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	240003bc 	.word	0x240003bc

08001848 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <TIM1_TRG_COM_IRQHandler+0x10>)
 800184e:	f004 fd13 	bl	8006278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	240003bc 	.word	0x240003bc

0800185c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <TIM1_CC_IRQHandler+0x10>)
 8001862:	f004 fd09 	bl	8006278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	240003bc 	.word	0x240003bc

08001870 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <TIM3_IRQHandler+0x10>)
 8001876:	f004 fcff 	bl	8006278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	24000408 	.word	0x24000408

08001884 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <TIM4_IRQHandler+0x10>)
 800188a:	f004 fcf5 	bl	8006278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	24000454 	.word	0x24000454

08001898 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <USART1_IRQHandler+0x10>)
 800189e:	f005 fa07 	bl	8006cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	240004a0 	.word	0x240004a0

080018ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return 1;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_kill>:

int _kill(int pid, int sig)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018c6:	f006 ffb5 	bl	8008834 <__errno>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2216      	movs	r2, #22
 80018ce:	601a      	str	r2, [r3, #0]
  return -1;
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_exit>:

void _exit (int status)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ffe7 	bl	80018bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ee:	e7fe      	b.n	80018ee <_exit+0x12>

080018f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	e00a      	b.n	8001918 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001902:	f3af 8000 	nop.w
 8001906:	4601      	mov	r1, r0
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60ba      	str	r2, [r7, #8]
 800190e:	b2ca      	uxtb	r2, r1
 8001910:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbf0      	blt.n	8001902 <_read+0x12>
  }

  return len;
 8001920:	687b      	ldr	r3, [r7, #4]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e009      	b.n	8001950 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	dbf1      	blt.n	800193c <_write+0x12>
  }
  return len;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_close>:

int _close(int file)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198a:	605a      	str	r2, [r3, #4]
  return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <_isatty>:

int _isatty(int file)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <_sbrk+0x5c>)
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <_sbrk+0x60>)
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <_sbrk+0x64>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <_sbrk+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d207      	bcs.n	8001a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019fc:	f006 ff1a 	bl	8008834 <__errno>
 8001a00:	4603      	mov	r3, r0
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	e009      	b.n	8001a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <_sbrk+0x64>)
 8001a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	24050000 	.word	0x24050000
 8001a2c:	00000400 	.word	0x00000400
 8001a30:	240005d4 	.word	0x240005d4
 8001a34:	240005f0 	.word	0x240005f0

08001a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b32      	ldr	r3, [pc, #200]	; (8001b08 <SystemInit+0xd0>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a42:	4a31      	ldr	r2, [pc, #196]	; (8001b08 <SystemInit+0xd0>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <SystemInit+0xd4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	2b06      	cmp	r3, #6
 8001a56:	d807      	bhi.n	8001a68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <SystemInit+0xd4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 030f 	bic.w	r3, r3, #15
 8001a60:	4a2a      	ldr	r2, [pc, #168]	; (8001b0c <SystemInit+0xd4>)
 8001a62:	f043 0307 	orr.w	r3, r3, #7
 8001a66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a68:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <SystemInit+0xd8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a28      	ldr	r2, [pc, #160]	; (8001b10 <SystemInit+0xd8>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a74:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <SystemInit+0xd8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a7a:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <SystemInit+0xd8>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4924      	ldr	r1, [pc, #144]	; (8001b10 <SystemInit+0xd8>)
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <SystemInit+0xdc>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <SystemInit+0xd4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a92:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <SystemInit+0xd4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 030f 	bic.w	r3, r3, #15
 8001a9a:	4a1c      	ldr	r2, [pc, #112]	; (8001b0c <SystemInit+0xd4>)
 8001a9c:	f043 0307 	orr.w	r3, r3, #7
 8001aa0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <SystemInit+0xd8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <SystemInit+0xd8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <SystemInit+0xd8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <SystemInit+0xd8>)
 8001ab6:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <SystemInit+0xe0>)
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <SystemInit+0xd8>)
 8001abc:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <SystemInit+0xe4>)
 8001abe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <SystemInit+0xd8>)
 8001ac2:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <SystemInit+0xe8>)
 8001ac4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <SystemInit+0xd8>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <SystemInit+0xd8>)
 8001ace:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <SystemInit+0xe8>)
 8001ad0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <SystemInit+0xd8>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <SystemInit+0xd8>)
 8001ada:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <SystemInit+0xe8>)
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <SystemInit+0xd8>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <SystemInit+0xd8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <SystemInit+0xd8>)
 8001aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <SystemInit+0xd8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <SystemInit+0xec>)
 8001af8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001afc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00
 8001b0c:	52002000 	.word	0x52002000
 8001b10:	58024400 	.word	0x58024400
 8001b14:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b18:	02020200 	.word	0x02020200
 8001b1c:	01ff0000 	.word	0x01ff0000
 8001b20:	01010280 	.word	0x01010280
 8001b24:	52004000 	.word	0x52004000

08001b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b2c:	f7ff ff84 	bl	8001a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b32:	490d      	ldr	r1, [pc, #52]	; (8001b68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b34:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b48:	4c0a      	ldr	r4, [pc, #40]	; (8001b74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b56:	f006 fe73 	bl	8008840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b5a:	f7fe ffe9 	bl	8000b30 <main>
  bx  lr
 8001b5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b60:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001b64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b68:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8001b6c:	0800d5b0 	.word	0x0800d5b0
  ldr r2, =_sbss
 8001b70:	240002b8 	.word	0x240002b8
  ldr r4, =_ebss
 8001b74:	240005ec 	.word	0x240005ec

08001b78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC3_IRQHandler>
	...

08001b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b82:	2003      	movs	r0, #3
 8001b84:	f000 f994 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b88:	f002 fb00 	bl	800418c <HAL_RCC_GetSysClockFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_Init+0x68>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	4913      	ldr	r1, [pc, #76]	; (8001be8 <HAL_Init+0x6c>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_Init+0x68>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <HAL_Init+0x6c>)
 8001bb0:	5cd3      	ldrb	r3, [r2, r3]
 8001bb2:	f003 031f 	and.w	r3, r3, #31
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <HAL_Init+0x70>)
 8001bbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <HAL_Init+0x74>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f000 f814 	bl	8001bf4 <HAL_InitTick>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e002      	b.n	8001bdc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd6:	f7ff fbbb 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	58024400 	.word	0x58024400
 8001be8:	0800d068 	.word	0x0800d068
 8001bec:	24000018 	.word	0x24000018
 8001bf0:	24000014 	.word	0x24000014

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_InitTick+0x60>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e021      	b.n	8001c4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_InitTick+0x64>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_InitTick+0x60>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f979 	bl	8001f16 <HAL_SYSTICK_Config>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00e      	b.n	8001c4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b0f      	cmp	r3, #15
 8001c32:	d80a      	bhi.n	8001c4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c34:	2200      	movs	r2, #0
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f000 f943 	bl	8001ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c40:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <HAL_InitTick+0x68>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	24000020 	.word	0x24000020
 8001c58:	24000014 	.word	0x24000014
 8001c5c:	2400001c 	.word	0x2400001c

08001c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x20>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_IncTick+0x24>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_IncTick+0x24>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	24000020 	.word	0x24000020
 8001c84:	240005d8 	.word	0x240005d8

08001c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_GetTick+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	240005d8 	.word	0x240005d8

08001ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff ffee 	bl	8001c88 <HAL_GetTick>
 8001cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d005      	beq.n	8001cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_Delay+0x44>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc6:	bf00      	nop
 8001cc8:	f7ff ffde 	bl	8001c88 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8f7      	bhi.n	8001cc8 <HAL_Delay+0x28>
  {
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	24000020 	.word	0x24000020

08001ce8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001cf8:	4904      	ldr	r1, [pc, #16]	; (8001d0c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	58000400 	.word	0x58000400

08001d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <__NVIC_SetPriorityGrouping+0x40>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <__NVIC_SetPriorityGrouping+0x40>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00
 8001d54:	05fa0000 	.word	0x05fa0000

08001d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <__NVIC_GetPriorityGrouping+0x18>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	f003 0307 	and.w	r3, r3, #7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0b      	blt.n	8001d9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	4907      	ldr	r1, [pc, #28]	; (8001dac <__NVIC_EnableIRQ+0x38>)
 8001d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2001      	movs	r0, #1
 8001d96:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000e100 	.word	0xe000e100

08001db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db0a      	blt.n	8001dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	490c      	ldr	r1, [pc, #48]	; (8001dfc <__NVIC_SetPriority+0x4c>)
 8001dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd8:	e00a      	b.n	8001df0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4908      	ldr	r1, [pc, #32]	; (8001e00 <__NVIC_SetPriority+0x50>)
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	3b04      	subs	r3, #4
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	440b      	add	r3, r1
 8001dee:	761a      	strb	r2, [r3, #24]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f1c3 0307 	rsb	r3, r3, #7
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	bf28      	it	cs
 8001e22:	2304      	movcs	r3, #4
 8001e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d902      	bls.n	8001e34 <NVIC_EncodePriority+0x30>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3b03      	subs	r3, #3
 8001e32:	e000      	b.n	8001e36 <NVIC_EncodePriority+0x32>
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	401a      	ands	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	4313      	orrs	r3, r2
         );
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e7c:	d301      	bcc.n	8001e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00f      	b.n	8001ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <SysTick_Config+0x40>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f7ff ff8e 	bl	8001db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SysTick_Config+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SysTick_Config+0x40>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff29 	bl	8001d10 <__NVIC_SetPriorityGrouping>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed4:	f7ff ff40 	bl	8001d58 <__NVIC_GetPriorityGrouping>
 8001ed8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f7ff ff90 	bl	8001e04 <NVIC_EncodePriority>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff5f 	bl	8001db0 <__NVIC_SetPriority>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff33 	bl	8001d74 <__NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ffa4 	bl	8001e6c <SysTick_Config>
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff fea6 	bl	8001c88 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e2dc      	b.n	8002502 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d008      	beq.n	8001f66 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2280      	movs	r2, #128	; 0x80
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e2cd      	b.n	8002502 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a76      	ldr	r2, [pc, #472]	; (8002144 <HAL_DMA_Abort+0x214>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d04a      	beq.n	8002006 <HAL_DMA_Abort+0xd6>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a74      	ldr	r2, [pc, #464]	; (8002148 <HAL_DMA_Abort+0x218>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d045      	beq.n	8002006 <HAL_DMA_Abort+0xd6>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a73      	ldr	r2, [pc, #460]	; (800214c <HAL_DMA_Abort+0x21c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d040      	beq.n	8002006 <HAL_DMA_Abort+0xd6>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a71      	ldr	r2, [pc, #452]	; (8002150 <HAL_DMA_Abort+0x220>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d03b      	beq.n	8002006 <HAL_DMA_Abort+0xd6>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a70      	ldr	r2, [pc, #448]	; (8002154 <HAL_DMA_Abort+0x224>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d036      	beq.n	8002006 <HAL_DMA_Abort+0xd6>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a6e      	ldr	r2, [pc, #440]	; (8002158 <HAL_DMA_Abort+0x228>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d031      	beq.n	8002006 <HAL_DMA_Abort+0xd6>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a6d      	ldr	r2, [pc, #436]	; (800215c <HAL_DMA_Abort+0x22c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d02c      	beq.n	8002006 <HAL_DMA_Abort+0xd6>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a6b      	ldr	r2, [pc, #428]	; (8002160 <HAL_DMA_Abort+0x230>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d027      	beq.n	8002006 <HAL_DMA_Abort+0xd6>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a6a      	ldr	r2, [pc, #424]	; (8002164 <HAL_DMA_Abort+0x234>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d022      	beq.n	8002006 <HAL_DMA_Abort+0xd6>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a68      	ldr	r2, [pc, #416]	; (8002168 <HAL_DMA_Abort+0x238>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01d      	beq.n	8002006 <HAL_DMA_Abort+0xd6>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a67      	ldr	r2, [pc, #412]	; (800216c <HAL_DMA_Abort+0x23c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d018      	beq.n	8002006 <HAL_DMA_Abort+0xd6>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a65      	ldr	r2, [pc, #404]	; (8002170 <HAL_DMA_Abort+0x240>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_DMA_Abort+0xd6>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a64      	ldr	r2, [pc, #400]	; (8002174 <HAL_DMA_Abort+0x244>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00e      	beq.n	8002006 <HAL_DMA_Abort+0xd6>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a62      	ldr	r2, [pc, #392]	; (8002178 <HAL_DMA_Abort+0x248>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d009      	beq.n	8002006 <HAL_DMA_Abort+0xd6>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a61      	ldr	r2, [pc, #388]	; (800217c <HAL_DMA_Abort+0x24c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d004      	beq.n	8002006 <HAL_DMA_Abort+0xd6>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a5f      	ldr	r2, [pc, #380]	; (8002180 <HAL_DMA_Abort+0x250>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d101      	bne.n	800200a <HAL_DMA_Abort+0xda>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_DMA_Abort+0xdc>
 800200a:	2300      	movs	r3, #0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d013      	beq.n	8002038 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 021e 	bic.w	r2, r2, #30
 800201e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800202e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e00a      	b.n	800204e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 020e 	bic.w	r2, r2, #14
 8002046:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a3c      	ldr	r2, [pc, #240]	; (8002144 <HAL_DMA_Abort+0x214>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d072      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a3a      	ldr	r2, [pc, #232]	; (8002148 <HAL_DMA_Abort+0x218>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d06d      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a39      	ldr	r2, [pc, #228]	; (800214c <HAL_DMA_Abort+0x21c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d068      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a37      	ldr	r2, [pc, #220]	; (8002150 <HAL_DMA_Abort+0x220>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d063      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a36      	ldr	r2, [pc, #216]	; (8002154 <HAL_DMA_Abort+0x224>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d05e      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a34      	ldr	r2, [pc, #208]	; (8002158 <HAL_DMA_Abort+0x228>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d059      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a33      	ldr	r2, [pc, #204]	; (800215c <HAL_DMA_Abort+0x22c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d054      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a31      	ldr	r2, [pc, #196]	; (8002160 <HAL_DMA_Abort+0x230>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d04f      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a30      	ldr	r2, [pc, #192]	; (8002164 <HAL_DMA_Abort+0x234>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d04a      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a2e      	ldr	r2, [pc, #184]	; (8002168 <HAL_DMA_Abort+0x238>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d045      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2d      	ldr	r2, [pc, #180]	; (800216c <HAL_DMA_Abort+0x23c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d040      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a2b      	ldr	r2, [pc, #172]	; (8002170 <HAL_DMA_Abort+0x240>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d03b      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2a      	ldr	r2, [pc, #168]	; (8002174 <HAL_DMA_Abort+0x244>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d036      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a28      	ldr	r2, [pc, #160]	; (8002178 <HAL_DMA_Abort+0x248>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d031      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a27      	ldr	r2, [pc, #156]	; (800217c <HAL_DMA_Abort+0x24c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d02c      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a25      	ldr	r2, [pc, #148]	; (8002180 <HAL_DMA_Abort+0x250>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d027      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a24      	ldr	r2, [pc, #144]	; (8002184 <HAL_DMA_Abort+0x254>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d022      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a22      	ldr	r2, [pc, #136]	; (8002188 <HAL_DMA_Abort+0x258>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01d      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a21      	ldr	r2, [pc, #132]	; (800218c <HAL_DMA_Abort+0x25c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d018      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1f      	ldr	r2, [pc, #124]	; (8002190 <HAL_DMA_Abort+0x260>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1e      	ldr	r2, [pc, #120]	; (8002194 <HAL_DMA_Abort+0x264>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d00e      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <HAL_DMA_Abort+0x268>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d009      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a1b      	ldr	r2, [pc, #108]	; (800219c <HAL_DMA_Abort+0x26c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d004      	beq.n	800213e <HAL_DMA_Abort+0x20e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_DMA_Abort+0x270>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d132      	bne.n	80021a4 <HAL_DMA_Abort+0x274>
 800213e:	2301      	movs	r3, #1
 8002140:	e031      	b.n	80021a6 <HAL_DMA_Abort+0x276>
 8002142:	bf00      	nop
 8002144:	40020010 	.word	0x40020010
 8002148:	40020028 	.word	0x40020028
 800214c:	40020040 	.word	0x40020040
 8002150:	40020058 	.word	0x40020058
 8002154:	40020070 	.word	0x40020070
 8002158:	40020088 	.word	0x40020088
 800215c:	400200a0 	.word	0x400200a0
 8002160:	400200b8 	.word	0x400200b8
 8002164:	40020410 	.word	0x40020410
 8002168:	40020428 	.word	0x40020428
 800216c:	40020440 	.word	0x40020440
 8002170:	40020458 	.word	0x40020458
 8002174:	40020470 	.word	0x40020470
 8002178:	40020488 	.word	0x40020488
 800217c:	400204a0 	.word	0x400204a0
 8002180:	400204b8 	.word	0x400204b8
 8002184:	58025408 	.word	0x58025408
 8002188:	5802541c 	.word	0x5802541c
 800218c:	58025430 	.word	0x58025430
 8002190:	58025444 	.word	0x58025444
 8002194:	58025458 	.word	0x58025458
 8002198:	5802546c 	.word	0x5802546c
 800219c:	58025480 	.word	0x58025480
 80021a0:	58025494 	.word	0x58025494
 80021a4:	2300      	movs	r3, #0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d007      	beq.n	80021ba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a6d      	ldr	r2, [pc, #436]	; (8002374 <HAL_DMA_Abort+0x444>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d04a      	beq.n	800225a <HAL_DMA_Abort+0x32a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a6b      	ldr	r2, [pc, #428]	; (8002378 <HAL_DMA_Abort+0x448>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d045      	beq.n	800225a <HAL_DMA_Abort+0x32a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a6a      	ldr	r2, [pc, #424]	; (800237c <HAL_DMA_Abort+0x44c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d040      	beq.n	800225a <HAL_DMA_Abort+0x32a>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a68      	ldr	r2, [pc, #416]	; (8002380 <HAL_DMA_Abort+0x450>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d03b      	beq.n	800225a <HAL_DMA_Abort+0x32a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a67      	ldr	r2, [pc, #412]	; (8002384 <HAL_DMA_Abort+0x454>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d036      	beq.n	800225a <HAL_DMA_Abort+0x32a>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a65      	ldr	r2, [pc, #404]	; (8002388 <HAL_DMA_Abort+0x458>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d031      	beq.n	800225a <HAL_DMA_Abort+0x32a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a64      	ldr	r2, [pc, #400]	; (800238c <HAL_DMA_Abort+0x45c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d02c      	beq.n	800225a <HAL_DMA_Abort+0x32a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a62      	ldr	r2, [pc, #392]	; (8002390 <HAL_DMA_Abort+0x460>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d027      	beq.n	800225a <HAL_DMA_Abort+0x32a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a61      	ldr	r2, [pc, #388]	; (8002394 <HAL_DMA_Abort+0x464>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d022      	beq.n	800225a <HAL_DMA_Abort+0x32a>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a5f      	ldr	r2, [pc, #380]	; (8002398 <HAL_DMA_Abort+0x468>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01d      	beq.n	800225a <HAL_DMA_Abort+0x32a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a5e      	ldr	r2, [pc, #376]	; (800239c <HAL_DMA_Abort+0x46c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d018      	beq.n	800225a <HAL_DMA_Abort+0x32a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a5c      	ldr	r2, [pc, #368]	; (80023a0 <HAL_DMA_Abort+0x470>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <HAL_DMA_Abort+0x32a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a5b      	ldr	r2, [pc, #364]	; (80023a4 <HAL_DMA_Abort+0x474>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d00e      	beq.n	800225a <HAL_DMA_Abort+0x32a>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a59      	ldr	r2, [pc, #356]	; (80023a8 <HAL_DMA_Abort+0x478>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d009      	beq.n	800225a <HAL_DMA_Abort+0x32a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a58      	ldr	r2, [pc, #352]	; (80023ac <HAL_DMA_Abort+0x47c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d004      	beq.n	800225a <HAL_DMA_Abort+0x32a>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a56      	ldr	r2, [pc, #344]	; (80023b0 <HAL_DMA_Abort+0x480>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d108      	bne.n	800226c <HAL_DMA_Abort+0x33c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	e007      	b.n	800227c <HAL_DMA_Abort+0x34c>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0201 	bic.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800227c:	e013      	b.n	80022a6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800227e:	f7ff fd03 	bl	8001c88 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b05      	cmp	r3, #5
 800228a:	d90c      	bls.n	80022a6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2203      	movs	r2, #3
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e12d      	b.n	8002502 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1e5      	bne.n	800227e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a2f      	ldr	r2, [pc, #188]	; (8002374 <HAL_DMA_Abort+0x444>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d04a      	beq.n	8002352 <HAL_DMA_Abort+0x422>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a2d      	ldr	r2, [pc, #180]	; (8002378 <HAL_DMA_Abort+0x448>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d045      	beq.n	8002352 <HAL_DMA_Abort+0x422>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a2c      	ldr	r2, [pc, #176]	; (800237c <HAL_DMA_Abort+0x44c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d040      	beq.n	8002352 <HAL_DMA_Abort+0x422>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a2a      	ldr	r2, [pc, #168]	; (8002380 <HAL_DMA_Abort+0x450>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d03b      	beq.n	8002352 <HAL_DMA_Abort+0x422>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a29      	ldr	r2, [pc, #164]	; (8002384 <HAL_DMA_Abort+0x454>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d036      	beq.n	8002352 <HAL_DMA_Abort+0x422>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a27      	ldr	r2, [pc, #156]	; (8002388 <HAL_DMA_Abort+0x458>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d031      	beq.n	8002352 <HAL_DMA_Abort+0x422>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a26      	ldr	r2, [pc, #152]	; (800238c <HAL_DMA_Abort+0x45c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d02c      	beq.n	8002352 <HAL_DMA_Abort+0x422>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a24      	ldr	r2, [pc, #144]	; (8002390 <HAL_DMA_Abort+0x460>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d027      	beq.n	8002352 <HAL_DMA_Abort+0x422>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a23      	ldr	r2, [pc, #140]	; (8002394 <HAL_DMA_Abort+0x464>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d022      	beq.n	8002352 <HAL_DMA_Abort+0x422>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a21      	ldr	r2, [pc, #132]	; (8002398 <HAL_DMA_Abort+0x468>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d01d      	beq.n	8002352 <HAL_DMA_Abort+0x422>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a20      	ldr	r2, [pc, #128]	; (800239c <HAL_DMA_Abort+0x46c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d018      	beq.n	8002352 <HAL_DMA_Abort+0x422>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1e      	ldr	r2, [pc, #120]	; (80023a0 <HAL_DMA_Abort+0x470>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d013      	beq.n	8002352 <HAL_DMA_Abort+0x422>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1d      	ldr	r2, [pc, #116]	; (80023a4 <HAL_DMA_Abort+0x474>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00e      	beq.n	8002352 <HAL_DMA_Abort+0x422>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1b      	ldr	r2, [pc, #108]	; (80023a8 <HAL_DMA_Abort+0x478>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_DMA_Abort+0x422>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1a      	ldr	r2, [pc, #104]	; (80023ac <HAL_DMA_Abort+0x47c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d004      	beq.n	8002352 <HAL_DMA_Abort+0x422>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <HAL_DMA_Abort+0x480>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d101      	bne.n	8002356 <HAL_DMA_Abort+0x426>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_DMA_Abort+0x428>
 8002356:	2300      	movs	r3, #0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d02b      	beq.n	80023b4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	223f      	movs	r2, #63	; 0x3f
 800236c:	409a      	lsls	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	e02a      	b.n	80023ca <HAL_DMA_Abort+0x49a>
 8002374:	40020010 	.word	0x40020010
 8002378:	40020028 	.word	0x40020028
 800237c:	40020040 	.word	0x40020040
 8002380:	40020058 	.word	0x40020058
 8002384:	40020070 	.word	0x40020070
 8002388:	40020088 	.word	0x40020088
 800238c:	400200a0 	.word	0x400200a0
 8002390:	400200b8 	.word	0x400200b8
 8002394:	40020410 	.word	0x40020410
 8002398:	40020428 	.word	0x40020428
 800239c:	40020440 	.word	0x40020440
 80023a0:	40020458 	.word	0x40020458
 80023a4:	40020470 	.word	0x40020470
 80023a8:	40020488 	.word	0x40020488
 80023ac:	400204a0 	.word	0x400204a0
 80023b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2201      	movs	r2, #1
 80023c4:	409a      	lsls	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a4f      	ldr	r2, [pc, #316]	; (800250c <HAL_DMA_Abort+0x5dc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d072      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a4d      	ldr	r2, [pc, #308]	; (8002510 <HAL_DMA_Abort+0x5e0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d06d      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a4c      	ldr	r2, [pc, #304]	; (8002514 <HAL_DMA_Abort+0x5e4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d068      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a4a      	ldr	r2, [pc, #296]	; (8002518 <HAL_DMA_Abort+0x5e8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d063      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a49      	ldr	r2, [pc, #292]	; (800251c <HAL_DMA_Abort+0x5ec>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d05e      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a47      	ldr	r2, [pc, #284]	; (8002520 <HAL_DMA_Abort+0x5f0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d059      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a46      	ldr	r2, [pc, #280]	; (8002524 <HAL_DMA_Abort+0x5f4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d054      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a44      	ldr	r2, [pc, #272]	; (8002528 <HAL_DMA_Abort+0x5f8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d04f      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a43      	ldr	r2, [pc, #268]	; (800252c <HAL_DMA_Abort+0x5fc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d04a      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a41      	ldr	r2, [pc, #260]	; (8002530 <HAL_DMA_Abort+0x600>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d045      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a40      	ldr	r2, [pc, #256]	; (8002534 <HAL_DMA_Abort+0x604>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d040      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a3e      	ldr	r2, [pc, #248]	; (8002538 <HAL_DMA_Abort+0x608>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d03b      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a3d      	ldr	r2, [pc, #244]	; (800253c <HAL_DMA_Abort+0x60c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d036      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a3b      	ldr	r2, [pc, #236]	; (8002540 <HAL_DMA_Abort+0x610>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d031      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a3a      	ldr	r2, [pc, #232]	; (8002544 <HAL_DMA_Abort+0x614>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d02c      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a38      	ldr	r2, [pc, #224]	; (8002548 <HAL_DMA_Abort+0x618>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d027      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a37      	ldr	r2, [pc, #220]	; (800254c <HAL_DMA_Abort+0x61c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d022      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a35      	ldr	r2, [pc, #212]	; (8002550 <HAL_DMA_Abort+0x620>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d01d      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a34      	ldr	r2, [pc, #208]	; (8002554 <HAL_DMA_Abort+0x624>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d018      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a32      	ldr	r2, [pc, #200]	; (8002558 <HAL_DMA_Abort+0x628>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a31      	ldr	r2, [pc, #196]	; (800255c <HAL_DMA_Abort+0x62c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00e      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a2f      	ldr	r2, [pc, #188]	; (8002560 <HAL_DMA_Abort+0x630>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d009      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a2e      	ldr	r2, [pc, #184]	; (8002564 <HAL_DMA_Abort+0x634>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d004      	beq.n	80024ba <HAL_DMA_Abort+0x58a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a2c      	ldr	r2, [pc, #176]	; (8002568 <HAL_DMA_Abort+0x638>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d101      	bne.n	80024be <HAL_DMA_Abort+0x58e>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_DMA_Abort+0x590>
 80024be:	2300      	movs	r3, #0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d015      	beq.n	80024f0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024cc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00c      	beq.n	80024f0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024e4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024ee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40020010 	.word	0x40020010
 8002510:	40020028 	.word	0x40020028
 8002514:	40020040 	.word	0x40020040
 8002518:	40020058 	.word	0x40020058
 800251c:	40020070 	.word	0x40020070
 8002520:	40020088 	.word	0x40020088
 8002524:	400200a0 	.word	0x400200a0
 8002528:	400200b8 	.word	0x400200b8
 800252c:	40020410 	.word	0x40020410
 8002530:	40020428 	.word	0x40020428
 8002534:	40020440 	.word	0x40020440
 8002538:	40020458 	.word	0x40020458
 800253c:	40020470 	.word	0x40020470
 8002540:	40020488 	.word	0x40020488
 8002544:	400204a0 	.word	0x400204a0
 8002548:	400204b8 	.word	0x400204b8
 800254c:	58025408 	.word	0x58025408
 8002550:	5802541c 	.word	0x5802541c
 8002554:	58025430 	.word	0x58025430
 8002558:	58025444 	.word	0x58025444
 800255c:	58025458 	.word	0x58025458
 8002560:	5802546c 	.word	0x5802546c
 8002564:	58025480 	.word	0x58025480
 8002568:	58025494 	.word	0x58025494

0800256c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e237      	b.n	80029ee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d004      	beq.n	8002594 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2280      	movs	r2, #128	; 0x80
 800258e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e22c      	b.n	80029ee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a5c      	ldr	r2, [pc, #368]	; (800270c <HAL_DMA_Abort_IT+0x1a0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d04a      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a5b      	ldr	r2, [pc, #364]	; (8002710 <HAL_DMA_Abort_IT+0x1a4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d045      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a59      	ldr	r2, [pc, #356]	; (8002714 <HAL_DMA_Abort_IT+0x1a8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d040      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a58      	ldr	r2, [pc, #352]	; (8002718 <HAL_DMA_Abort_IT+0x1ac>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d03b      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a56      	ldr	r2, [pc, #344]	; (800271c <HAL_DMA_Abort_IT+0x1b0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d036      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a55      	ldr	r2, [pc, #340]	; (8002720 <HAL_DMA_Abort_IT+0x1b4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d031      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a53      	ldr	r2, [pc, #332]	; (8002724 <HAL_DMA_Abort_IT+0x1b8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d02c      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a52      	ldr	r2, [pc, #328]	; (8002728 <HAL_DMA_Abort_IT+0x1bc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d027      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a50      	ldr	r2, [pc, #320]	; (800272c <HAL_DMA_Abort_IT+0x1c0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d022      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a4f      	ldr	r2, [pc, #316]	; (8002730 <HAL_DMA_Abort_IT+0x1c4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d01d      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a4d      	ldr	r2, [pc, #308]	; (8002734 <HAL_DMA_Abort_IT+0x1c8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d018      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a4c      	ldr	r2, [pc, #304]	; (8002738 <HAL_DMA_Abort_IT+0x1cc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d013      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a4a      	ldr	r2, [pc, #296]	; (800273c <HAL_DMA_Abort_IT+0x1d0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00e      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a49      	ldr	r2, [pc, #292]	; (8002740 <HAL_DMA_Abort_IT+0x1d4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d009      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a47      	ldr	r2, [pc, #284]	; (8002744 <HAL_DMA_Abort_IT+0x1d8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d004      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a46      	ldr	r2, [pc, #280]	; (8002748 <HAL_DMA_Abort_IT+0x1dc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d101      	bne.n	8002638 <HAL_DMA_Abort_IT+0xcc>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <HAL_DMA_Abort_IT+0xce>
 8002638:	2300      	movs	r3, #0
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8086 	beq.w	800274c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2204      	movs	r2, #4
 8002644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a2f      	ldr	r2, [pc, #188]	; (800270c <HAL_DMA_Abort_IT+0x1a0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d04a      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x17c>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a2e      	ldr	r2, [pc, #184]	; (8002710 <HAL_DMA_Abort_IT+0x1a4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d045      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x17c>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a2c      	ldr	r2, [pc, #176]	; (8002714 <HAL_DMA_Abort_IT+0x1a8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d040      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x17c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a2b      	ldr	r2, [pc, #172]	; (8002718 <HAL_DMA_Abort_IT+0x1ac>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d03b      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x17c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a29      	ldr	r2, [pc, #164]	; (800271c <HAL_DMA_Abort_IT+0x1b0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d036      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x17c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a28      	ldr	r2, [pc, #160]	; (8002720 <HAL_DMA_Abort_IT+0x1b4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d031      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x17c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a26      	ldr	r2, [pc, #152]	; (8002724 <HAL_DMA_Abort_IT+0x1b8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d02c      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x17c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a25      	ldr	r2, [pc, #148]	; (8002728 <HAL_DMA_Abort_IT+0x1bc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d027      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x17c>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a23      	ldr	r2, [pc, #140]	; (800272c <HAL_DMA_Abort_IT+0x1c0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d022      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x17c>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a22      	ldr	r2, [pc, #136]	; (8002730 <HAL_DMA_Abort_IT+0x1c4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d01d      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x17c>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a20      	ldr	r2, [pc, #128]	; (8002734 <HAL_DMA_Abort_IT+0x1c8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d018      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x17c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1f      	ldr	r2, [pc, #124]	; (8002738 <HAL_DMA_Abort_IT+0x1cc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d013      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x17c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1d      	ldr	r2, [pc, #116]	; (800273c <HAL_DMA_Abort_IT+0x1d0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00e      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x17c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <HAL_DMA_Abort_IT+0x1d4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d009      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x17c>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <HAL_DMA_Abort_IT+0x1d8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d004      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x17c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a19      	ldr	r2, [pc, #100]	; (8002748 <HAL_DMA_Abort_IT+0x1dc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d108      	bne.n	80026fa <HAL_DMA_Abort_IT+0x18e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e178      	b.n	80029ec <HAL_DMA_Abort_IT+0x480>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0201 	bic.w	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e16f      	b.n	80029ec <HAL_DMA_Abort_IT+0x480>
 800270c:	40020010 	.word	0x40020010
 8002710:	40020028 	.word	0x40020028
 8002714:	40020040 	.word	0x40020040
 8002718:	40020058 	.word	0x40020058
 800271c:	40020070 	.word	0x40020070
 8002720:	40020088 	.word	0x40020088
 8002724:	400200a0 	.word	0x400200a0
 8002728:	400200b8 	.word	0x400200b8
 800272c:	40020410 	.word	0x40020410
 8002730:	40020428 	.word	0x40020428
 8002734:	40020440 	.word	0x40020440
 8002738:	40020458 	.word	0x40020458
 800273c:	40020470 	.word	0x40020470
 8002740:	40020488 	.word	0x40020488
 8002744:	400204a0 	.word	0x400204a0
 8002748:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 020e 	bic.w	r2, r2, #14
 800275a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a6c      	ldr	r2, [pc, #432]	; (8002914 <HAL_DMA_Abort_IT+0x3a8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d04a      	beq.n	80027fc <HAL_DMA_Abort_IT+0x290>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6b      	ldr	r2, [pc, #428]	; (8002918 <HAL_DMA_Abort_IT+0x3ac>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d045      	beq.n	80027fc <HAL_DMA_Abort_IT+0x290>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a69      	ldr	r2, [pc, #420]	; (800291c <HAL_DMA_Abort_IT+0x3b0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d040      	beq.n	80027fc <HAL_DMA_Abort_IT+0x290>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a68      	ldr	r2, [pc, #416]	; (8002920 <HAL_DMA_Abort_IT+0x3b4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d03b      	beq.n	80027fc <HAL_DMA_Abort_IT+0x290>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a66      	ldr	r2, [pc, #408]	; (8002924 <HAL_DMA_Abort_IT+0x3b8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d036      	beq.n	80027fc <HAL_DMA_Abort_IT+0x290>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a65      	ldr	r2, [pc, #404]	; (8002928 <HAL_DMA_Abort_IT+0x3bc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d031      	beq.n	80027fc <HAL_DMA_Abort_IT+0x290>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a63      	ldr	r2, [pc, #396]	; (800292c <HAL_DMA_Abort_IT+0x3c0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d02c      	beq.n	80027fc <HAL_DMA_Abort_IT+0x290>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a62      	ldr	r2, [pc, #392]	; (8002930 <HAL_DMA_Abort_IT+0x3c4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d027      	beq.n	80027fc <HAL_DMA_Abort_IT+0x290>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a60      	ldr	r2, [pc, #384]	; (8002934 <HAL_DMA_Abort_IT+0x3c8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d022      	beq.n	80027fc <HAL_DMA_Abort_IT+0x290>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a5f      	ldr	r2, [pc, #380]	; (8002938 <HAL_DMA_Abort_IT+0x3cc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d01d      	beq.n	80027fc <HAL_DMA_Abort_IT+0x290>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a5d      	ldr	r2, [pc, #372]	; (800293c <HAL_DMA_Abort_IT+0x3d0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d018      	beq.n	80027fc <HAL_DMA_Abort_IT+0x290>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a5c      	ldr	r2, [pc, #368]	; (8002940 <HAL_DMA_Abort_IT+0x3d4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d013      	beq.n	80027fc <HAL_DMA_Abort_IT+0x290>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a5a      	ldr	r2, [pc, #360]	; (8002944 <HAL_DMA_Abort_IT+0x3d8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00e      	beq.n	80027fc <HAL_DMA_Abort_IT+0x290>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a59      	ldr	r2, [pc, #356]	; (8002948 <HAL_DMA_Abort_IT+0x3dc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d009      	beq.n	80027fc <HAL_DMA_Abort_IT+0x290>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a57      	ldr	r2, [pc, #348]	; (800294c <HAL_DMA_Abort_IT+0x3e0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d004      	beq.n	80027fc <HAL_DMA_Abort_IT+0x290>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a56      	ldr	r2, [pc, #344]	; (8002950 <HAL_DMA_Abort_IT+0x3e4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d108      	bne.n	800280e <HAL_DMA_Abort_IT+0x2a2>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e007      	b.n	800281e <HAL_DMA_Abort_IT+0x2b2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a3c      	ldr	r2, [pc, #240]	; (8002914 <HAL_DMA_Abort_IT+0x3a8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d072      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a3a      	ldr	r2, [pc, #232]	; (8002918 <HAL_DMA_Abort_IT+0x3ac>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d06d      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a39      	ldr	r2, [pc, #228]	; (800291c <HAL_DMA_Abort_IT+0x3b0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d068      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a37      	ldr	r2, [pc, #220]	; (8002920 <HAL_DMA_Abort_IT+0x3b4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d063      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a36      	ldr	r2, [pc, #216]	; (8002924 <HAL_DMA_Abort_IT+0x3b8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d05e      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a34      	ldr	r2, [pc, #208]	; (8002928 <HAL_DMA_Abort_IT+0x3bc>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d059      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a33      	ldr	r2, [pc, #204]	; (800292c <HAL_DMA_Abort_IT+0x3c0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d054      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a31      	ldr	r2, [pc, #196]	; (8002930 <HAL_DMA_Abort_IT+0x3c4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d04f      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a30      	ldr	r2, [pc, #192]	; (8002934 <HAL_DMA_Abort_IT+0x3c8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d04a      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a2e      	ldr	r2, [pc, #184]	; (8002938 <HAL_DMA_Abort_IT+0x3cc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d045      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2d      	ldr	r2, [pc, #180]	; (800293c <HAL_DMA_Abort_IT+0x3d0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d040      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a2b      	ldr	r2, [pc, #172]	; (8002940 <HAL_DMA_Abort_IT+0x3d4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d03b      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2a      	ldr	r2, [pc, #168]	; (8002944 <HAL_DMA_Abort_IT+0x3d8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d036      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a28      	ldr	r2, [pc, #160]	; (8002948 <HAL_DMA_Abort_IT+0x3dc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d031      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a27      	ldr	r2, [pc, #156]	; (800294c <HAL_DMA_Abort_IT+0x3e0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d02c      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a25      	ldr	r2, [pc, #148]	; (8002950 <HAL_DMA_Abort_IT+0x3e4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d027      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a24      	ldr	r2, [pc, #144]	; (8002954 <HAL_DMA_Abort_IT+0x3e8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d022      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a22      	ldr	r2, [pc, #136]	; (8002958 <HAL_DMA_Abort_IT+0x3ec>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d01d      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a21      	ldr	r2, [pc, #132]	; (800295c <HAL_DMA_Abort_IT+0x3f0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d018      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <HAL_DMA_Abort_IT+0x3f4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d013      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1e      	ldr	r2, [pc, #120]	; (8002964 <HAL_DMA_Abort_IT+0x3f8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00e      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1c      	ldr	r2, [pc, #112]	; (8002968 <HAL_DMA_Abort_IT+0x3fc>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d009      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1b      	ldr	r2, [pc, #108]	; (800296c <HAL_DMA_Abort_IT+0x400>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d004      	beq.n	800290e <HAL_DMA_Abort_IT+0x3a2>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a19      	ldr	r2, [pc, #100]	; (8002970 <HAL_DMA_Abort_IT+0x404>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d132      	bne.n	8002974 <HAL_DMA_Abort_IT+0x408>
 800290e:	2301      	movs	r3, #1
 8002910:	e031      	b.n	8002976 <HAL_DMA_Abort_IT+0x40a>
 8002912:	bf00      	nop
 8002914:	40020010 	.word	0x40020010
 8002918:	40020028 	.word	0x40020028
 800291c:	40020040 	.word	0x40020040
 8002920:	40020058 	.word	0x40020058
 8002924:	40020070 	.word	0x40020070
 8002928:	40020088 	.word	0x40020088
 800292c:	400200a0 	.word	0x400200a0
 8002930:	400200b8 	.word	0x400200b8
 8002934:	40020410 	.word	0x40020410
 8002938:	40020428 	.word	0x40020428
 800293c:	40020440 	.word	0x40020440
 8002940:	40020458 	.word	0x40020458
 8002944:	40020470 	.word	0x40020470
 8002948:	40020488 	.word	0x40020488
 800294c:	400204a0 	.word	0x400204a0
 8002950:	400204b8 	.word	0x400204b8
 8002954:	58025408 	.word	0x58025408
 8002958:	5802541c 	.word	0x5802541c
 800295c:	58025430 	.word	0x58025430
 8002960:	58025444 	.word	0x58025444
 8002964:	58025458 	.word	0x58025458
 8002968:	5802546c 	.word	0x5802546c
 800296c:	58025480 	.word	0x58025480
 8002970:	58025494 	.word	0x58025494
 8002974:	2300      	movs	r3, #0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d028      	beq.n	80029cc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002988:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2201      	movs	r2, #1
 800299a:	409a      	lsls	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029a8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00c      	beq.n	80029cc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029c0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80029ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop

080029f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0cf      	b.n	8002baa <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d106      	bne.n	8002a22 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2223      	movs	r2, #35	; 0x23
 8002a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7fe fcb1 	bl	8001384 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	4b64      	ldr	r3, [pc, #400]	; (8002bb4 <HAL_ETH_Init+0x1bc>)
 8002a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a28:	4a62      	ldr	r2, [pc, #392]	; (8002bb4 <HAL_ETH_Init+0x1bc>)
 8002a2a:	f043 0302 	orr.w	r3, r3, #2
 8002a2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a32:	4b60      	ldr	r3, [pc, #384]	; (8002bb4 <HAL_ETH_Init+0x1bc>)
 8002a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7a1b      	ldrb	r3, [r3, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d103      	bne.n	8002a50 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7ff f94d 	bl	8001ce8 <HAL_SYSCFG_ETHInterfaceSelect>
 8002a4e:	e003      	b.n	8002a58 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002a50:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002a54:	f7ff f948 	bl	8001ce8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002a58:	4b57      	ldr	r3, [pc, #348]	; (8002bb8 <HAL_ETH_Init+0x1c0>)
 8002a5a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a74:	f7ff f908 	bl	8001c88 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a7a:	e011      	b.n	8002aa0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002a7c:	f7ff f904 	bl	8001c88 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a8a:	d909      	bls.n	8002aa0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2204      	movs	r2, #4
 8002a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	22e0      	movs	r2, #224	; 0xe0
 8002a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e084      	b.n	8002baa <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1e4      	bne.n	8002a7c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f886 	bl	8002bc4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002ab8:	f001 fce2 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4a3f      	ldr	r2, [pc, #252]	; (8002bbc <HAL_ETH_Init+0x1c4>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	0c9a      	lsrs	r2, r3, #18
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3a01      	subs	r2, #1
 8002acc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fa71 	bl	8002fb8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ade:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002ae2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002aee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002af2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	22e0      	movs	r2, #224	; 0xe0
 8002b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e049      	b.n	8002baa <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b1e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002b22:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <HAL_ETH_Init+0x1c8>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6952      	ldr	r2, [r2, #20]
 8002b2a:	0051      	lsls	r1, r2, #1
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	430b      	orrs	r3, r1
 8002b32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b36:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fad9 	bl	80030f2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fb1f 	bl	8003184 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	3305      	adds	r3, #5
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	021a      	lsls	r2, r3, #8
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	3304      	adds	r3, #4
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	3303      	adds	r3, #3
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	061a      	lsls	r2, r3, #24
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	3302      	adds	r3, #2
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	041b      	lsls	r3, r3, #16
 8002b78:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b84:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b92:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b94:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2210      	movs	r2, #16
 8002ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	58024400 	.word	0x58024400
 8002bb8:	58000400 	.word	0x58000400
 8002bbc:	431bde83 	.word	0x431bde83
 8002bc0:	ffff8001 	.word	0xffff8001

08002bc4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002bde:	f001 fc4f 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 8002be2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d908      	bls.n	8002bfe <HAL_ETH_SetMDIOClockRange+0x3a>
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d804      	bhi.n	8002bfe <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e027      	b.n	8002c4e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d908      	bls.n	8002c18 <HAL_ETH_SetMDIOClockRange+0x54>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d204      	bcs.n	8002c18 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	e01a      	b.n	8002c4e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d303      	bcc.n	8002c28 <HAL_ETH_SetMDIOClockRange+0x64>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d911      	bls.n	8002c4c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4a10      	ldr	r2, [pc, #64]	; (8002c6c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d908      	bls.n	8002c42 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4a0f      	ldr	r2, [pc, #60]	; (8002c70 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d804      	bhi.n	8002c42 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e005      	b.n	8002c4e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	e000      	b.n	8002c4e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002c4c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	01312cff 	.word	0x01312cff
 8002c64:	02160ebf 	.word	0x02160ebf
 8002c68:	03938700 	.word	0x03938700
 8002c6c:	05f5e0ff 	.word	0x05f5e0ff
 8002c70:	08f0d17f 	.word	0x08f0d17f

08002c74 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002c86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	791b      	ldrb	r3, [r3, #4]
 8002c8c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002c8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	7b1b      	ldrb	r3, [r3, #12]
 8002c94:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002c96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	7b5b      	ldrb	r3, [r3, #13]
 8002c9c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	7b9b      	ldrb	r3, [r3, #14]
 8002ca4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ca6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	7bdb      	ldrb	r3, [r3, #15]
 8002cac:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002cae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	7c12      	ldrb	r2, [r2, #16]
 8002cb4:	2a00      	cmp	r2, #0
 8002cb6:	d102      	bne.n	8002cbe <ETH_SetMACConfig+0x4a>
 8002cb8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002cbc:	e000      	b.n	8002cc0 <ETH_SetMACConfig+0x4c>
 8002cbe:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002cc0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	7c52      	ldrb	r2, [r2, #17]
 8002cc6:	2a00      	cmp	r2, #0
 8002cc8:	d102      	bne.n	8002cd0 <ETH_SetMACConfig+0x5c>
 8002cca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cce:	e000      	b.n	8002cd2 <ETH_SetMACConfig+0x5e>
 8002cd0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002cd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	7c9b      	ldrb	r3, [r3, #18]
 8002cd8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002cda:	431a      	orrs	r2, r3
               macconf->Speed |
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002ce0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002ce6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	7f1b      	ldrb	r3, [r3, #28]
 8002cec:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002cee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	7f5b      	ldrb	r3, [r3, #29]
 8002cf4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002cf6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	7f92      	ldrb	r2, [r2, #30]
 8002cfc:	2a00      	cmp	r2, #0
 8002cfe:	d102      	bne.n	8002d06 <ETH_SetMACConfig+0x92>
 8002d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d04:	e000      	b.n	8002d08 <ETH_SetMACConfig+0x94>
 8002d06:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002d08:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	7fdb      	ldrb	r3, [r3, #31]
 8002d0e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002d10:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	d102      	bne.n	8002d22 <ETH_SetMACConfig+0xae>
 8002d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d20:	e000      	b.n	8002d24 <ETH_SetMACConfig+0xb0>
 8002d22:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002d24:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d32:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002d34:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b56      	ldr	r3, [pc, #344]	; (8002ea0 <ETH_SetMACConfig+0x22c>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	68f9      	ldr	r1, [r7, #12]
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d56:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d5e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d60:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d68:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d72:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d74:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002d7c:	2a00      	cmp	r2, #0
 8002d7e:	d102      	bne.n	8002d86 <ETH_SetMACConfig+0x112>
 8002d80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d84:	e000      	b.n	8002d88 <ETH_SetMACConfig+0x114>
 8002d86:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d88:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	4b42      	ldr	r3, [pc, #264]	; (8002ea4 <ETH_SetMACConfig+0x230>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	68f9      	ldr	r1, [r7, #12]
 8002da2:	430b      	orrs	r3, r1
 8002da4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dac:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	4b3a      	ldr	r3, [pc, #232]	; (8002ea8 <ETH_SetMACConfig+0x234>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	68f9      	ldr	r1, [r7, #12]
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002dd0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002dd6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002dde:	2a00      	cmp	r2, #0
 8002de0:	d101      	bne.n	8002de6 <ETH_SetMACConfig+0x172>
 8002de2:	2280      	movs	r2, #128	; 0x80
 8002de4:	e000      	b.n	8002de8 <ETH_SetMACConfig+0x174>
 8002de6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002de8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dee:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dfa:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002dfe:	4013      	ands	r3, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	68f9      	ldr	r1, [r7, #12]
 8002e06:	430b      	orrs	r3, r1
 8002e08:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002e10:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002e18:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e26:	f023 0103 	bic.w	r1, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002e3e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002e5a:	2a00      	cmp	r2, #0
 8002e5c:	d101      	bne.n	8002e62 <ETH_SetMACConfig+0x1ee>
 8002e5e:	2240      	movs	r2, #64	; 0x40
 8002e60:	e000      	b.n	8002e64 <ETH_SetMACConfig+0x1f0>
 8002e62:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002e64:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002e6c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002e76:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002e84:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	00048083 	.word	0x00048083
 8002ea4:	c0f88000 	.word	0xc0f88000
 8002ea8:	fffffef0 	.word	0xfffffef0

08002eac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b38      	ldr	r3, [pc, #224]	; (8002fa4 <ETH_SetDMAConfig+0xf8>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	6811      	ldr	r1, [r2, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ed2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	791b      	ldrb	r3, [r3, #4]
 8002ed8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ede:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	7b1b      	ldrb	r3, [r3, #12]
 8002ee4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <ETH_SetDMAConfig+0xfc>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	68f9      	ldr	r1, [r7, #12]
 8002efe:	430b      	orrs	r3, r1
 8002f00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f04:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	7b5b      	ldrb	r3, [r3, #13]
 8002f0a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f1c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002f20:	4b22      	ldr	r3, [pc, #136]	; (8002fac <ETH_SetDMAConfig+0x100>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	68f9      	ldr	r1, [r7, #12]
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f30:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	7d1b      	ldrb	r3, [r3, #20]
 8002f3c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f3e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	7f5b      	ldrb	r3, [r3, #29]
 8002f44:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f52:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <ETH_SetDMAConfig+0x104>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	68f9      	ldr	r1, [r7, #12]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f66:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	7f1b      	ldrb	r3, [r3, #28]
 8002f6e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f80:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <ETH_SetDMAConfig+0x108>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	68f9      	ldr	r1, [r7, #12]
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f94:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	ffff87fd 	.word	0xffff87fd
 8002fa8:	ffff2ffe 	.word	0xffff2ffe
 8002fac:	fffec000 	.word	0xfffec000
 8002fb0:	ffc0efef 	.word	0xffc0efef
 8002fb4:	7fc0ffff 	.word	0x7fc0ffff

08002fb8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b0a4      	sub	sp, #144	; 0x90
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ff8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003000:	2300      	movs	r3, #0
 8003002:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800300a:	2300      	movs	r3, #0
 800300c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003010:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003014:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003016:	2300      	movs	r3, #0
 8003018:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800301c:	2300      	movs	r3, #0
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003026:	2300      	movs	r3, #0
 8003028:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003032:	2300      	movs	r3, #0
 8003034:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003036:	2300      	movs	r3, #0
 8003038:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800303a:	2300      	movs	r3, #0
 800303c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003044:	2300      	movs	r3, #0
 8003046:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800304a:	2301      	movs	r3, #1
 800304c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003050:	2320      	movs	r3, #32
 8003052:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800305c:	2300      	movs	r3, #0
 800305e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003062:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003068:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800306c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800306e:	2300      	movs	r3, #0
 8003070:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003074:	2302      	movs	r3, #2
 8003076:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800307a:	2300      	movs	r3, #0
 800307c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003080:	2300      	movs	r3, #0
 8003082:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003086:	2300      	movs	r3, #0
 8003088:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003092:	2300      	movs	r3, #0
 8003094:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003096:	2301      	movs	r3, #1
 8003098:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800309c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030a0:	4619      	mov	r1, r3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff fde6 	bl	8002c74 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80030a8:	2301      	movs	r3, #1
 80030aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80030ac:	2301      	movs	r3, #1
 80030ae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80030be:	2300      	movs	r3, #0
 80030c0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80030c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030c6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030d0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80030d8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030de:	f107 0308 	add.w	r3, r7, #8
 80030e2:	4619      	mov	r1, r3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff fee1 	bl	8002eac <ETH_SetDMAConfig>
}
 80030ea:	bf00      	nop
 80030ec:	3790      	adds	r7, #144	; 0x90
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	e01d      	b.n	800313c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68d9      	ldr	r1, [r3, #12]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	440b      	add	r3, r1
 8003110:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2200      	movs	r2, #0
 800311c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	3206      	adds	r2, #6
 8003132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3301      	adds	r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d9de      	bls.n	8003100 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003150:	461a      	mov	r2, r3
 8003152:	2303      	movs	r3, #3
 8003154:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003164:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003174:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e023      	b.n	80031da <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6919      	ldr	r1, [r3, #16]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4613      	mov	r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	4413      	add	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	440b      	add	r3, r1
 80031a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2200      	movs	r2, #0
 80031ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2200      	movs	r2, #0
 80031ba:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2200      	movs	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2200      	movs	r2, #0
 80031c6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	3212      	adds	r2, #18
 80031d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3301      	adds	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d9d8      	bls.n	8003192 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003206:	461a      	mov	r2, r3
 8003208:	2303      	movs	r3, #3
 800320a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691a      	ldr	r2, [r3, #16]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800321a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	; 0x24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800324e:	4b86      	ldr	r3, [pc, #536]	; (8003468 <HAL_GPIO_Init+0x228>)
 8003250:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003252:	e18c      	b.n	800356e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	2101      	movs	r1, #1
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	fa01 f303 	lsl.w	r3, r1, r3
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 817e 	beq.w	8003568 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d005      	beq.n	8003284 <HAL_GPIO_Init+0x44>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d130      	bne.n	80032e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	2203      	movs	r2, #3
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ba:	2201      	movs	r2, #1
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	f003 0201 	and.w	r2, r3, #1
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d017      	beq.n	8003322 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	2203      	movs	r2, #3
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d123      	bne.n	8003376 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	08da      	lsrs	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3208      	adds	r2, #8
 8003336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	220f      	movs	r2, #15
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	08da      	lsrs	r2, r3, #3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3208      	adds	r2, #8
 8003370:	69b9      	ldr	r1, [r7, #24]
 8003372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	2203      	movs	r2, #3
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4013      	ands	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0203 	and.w	r2, r3, #3
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 80d8 	beq.w	8003568 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033b8:	4b2c      	ldr	r3, [pc, #176]	; (800346c <HAL_GPIO_Init+0x22c>)
 80033ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033be:	4a2b      	ldr	r2, [pc, #172]	; (800346c <HAL_GPIO_Init+0x22c>)
 80033c0:	f043 0302 	orr.w	r3, r3, #2
 80033c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033c8:	4b28      	ldr	r3, [pc, #160]	; (800346c <HAL_GPIO_Init+0x22c>)
 80033ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033d6:	4a26      	ldr	r2, [pc, #152]	; (8003470 <HAL_GPIO_Init+0x230>)
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	3302      	adds	r3, #2
 80033de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	220f      	movs	r2, #15
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <HAL_GPIO_Init+0x234>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d04a      	beq.n	8003498 <HAL_GPIO_Init+0x258>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <HAL_GPIO_Init+0x238>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d02b      	beq.n	8003462 <HAL_GPIO_Init+0x222>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a1b      	ldr	r2, [pc, #108]	; (800347c <HAL_GPIO_Init+0x23c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d025      	beq.n	800345e <HAL_GPIO_Init+0x21e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <HAL_GPIO_Init+0x240>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01f      	beq.n	800345a <HAL_GPIO_Init+0x21a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a19      	ldr	r2, [pc, #100]	; (8003484 <HAL_GPIO_Init+0x244>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d019      	beq.n	8003456 <HAL_GPIO_Init+0x216>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a18      	ldr	r2, [pc, #96]	; (8003488 <HAL_GPIO_Init+0x248>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_GPIO_Init+0x212>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a17      	ldr	r2, [pc, #92]	; (800348c <HAL_GPIO_Init+0x24c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00d      	beq.n	800344e <HAL_GPIO_Init+0x20e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a16      	ldr	r2, [pc, #88]	; (8003490 <HAL_GPIO_Init+0x250>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d007      	beq.n	800344a <HAL_GPIO_Init+0x20a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a15      	ldr	r2, [pc, #84]	; (8003494 <HAL_GPIO_Init+0x254>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d101      	bne.n	8003446 <HAL_GPIO_Init+0x206>
 8003442:	2309      	movs	r3, #9
 8003444:	e029      	b.n	800349a <HAL_GPIO_Init+0x25a>
 8003446:	230a      	movs	r3, #10
 8003448:	e027      	b.n	800349a <HAL_GPIO_Init+0x25a>
 800344a:	2307      	movs	r3, #7
 800344c:	e025      	b.n	800349a <HAL_GPIO_Init+0x25a>
 800344e:	2306      	movs	r3, #6
 8003450:	e023      	b.n	800349a <HAL_GPIO_Init+0x25a>
 8003452:	2305      	movs	r3, #5
 8003454:	e021      	b.n	800349a <HAL_GPIO_Init+0x25a>
 8003456:	2304      	movs	r3, #4
 8003458:	e01f      	b.n	800349a <HAL_GPIO_Init+0x25a>
 800345a:	2303      	movs	r3, #3
 800345c:	e01d      	b.n	800349a <HAL_GPIO_Init+0x25a>
 800345e:	2302      	movs	r3, #2
 8003460:	e01b      	b.n	800349a <HAL_GPIO_Init+0x25a>
 8003462:	2301      	movs	r3, #1
 8003464:	e019      	b.n	800349a <HAL_GPIO_Init+0x25a>
 8003466:	bf00      	nop
 8003468:	58000080 	.word	0x58000080
 800346c:	58024400 	.word	0x58024400
 8003470:	58000400 	.word	0x58000400
 8003474:	58020000 	.word	0x58020000
 8003478:	58020400 	.word	0x58020400
 800347c:	58020800 	.word	0x58020800
 8003480:	58020c00 	.word	0x58020c00
 8003484:	58021000 	.word	0x58021000
 8003488:	58021400 	.word	0x58021400
 800348c:	58021800 	.word	0x58021800
 8003490:	58021c00 	.word	0x58021c00
 8003494:	58022400 	.word	0x58022400
 8003498:	2300      	movs	r3, #0
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	f002 0203 	and.w	r2, r2, #3
 80034a0:	0092      	lsls	r2, r2, #2
 80034a2:	4093      	lsls	r3, r2
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034aa:	4938      	ldr	r1, [pc, #224]	; (800358c <HAL_GPIO_Init+0x34c>)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	3302      	adds	r3, #2
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800350c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	3301      	adds	r3, #1
 800356c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	f47f ae6b 	bne.w	8003254 <HAL_GPIO_Init+0x14>
  }
}
 800357e:	bf00      	nop
 8003580:	bf00      	nop
 8003582:	3724      	adds	r7, #36	; 0x24
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	58000400 	.word	0x58000400

08003590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	807b      	strh	r3, [r7, #2]
 800359c:	4613      	mov	r3, r2
 800359e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035a0:	787b      	ldrb	r3, [r7, #1]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035a6:	887a      	ldrh	r2, [r7, #2]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80035ac:	e003      	b.n	80035b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035ae:	887b      	ldrh	r3, [r7, #2]
 80035b0:	041a      	lsls	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	619a      	str	r2, [r3, #24]
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	460b      	mov	r3, r1
 80035cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035d4:	887a      	ldrh	r2, [r7, #2]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4013      	ands	r3, r2
 80035da:	041a      	lsls	r2, r3, #16
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	43d9      	mvns	r1, r3
 80035e0:	887b      	ldrh	r3, [r7, #2]
 80035e2:	400b      	ands	r3, r1
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	619a      	str	r2, [r3, #24]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HAL_PWREx_ConfigSupply+0x70>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b04      	cmp	r3, #4
 800360a:	d00a      	beq.n	8003622 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <HAL_PWREx_ConfigSupply+0x70>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	429a      	cmp	r2, r3
 8003618:	d001      	beq.n	800361e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e01f      	b.n	800365e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e01d      	b.n	800365e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003622:	4b11      	ldr	r3, [pc, #68]	; (8003668 <HAL_PWREx_ConfigSupply+0x70>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f023 0207 	bic.w	r2, r3, #7
 800362a:	490f      	ldr	r1, [pc, #60]	; (8003668 <HAL_PWREx_ConfigSupply+0x70>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4313      	orrs	r3, r2
 8003630:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003632:	f7fe fb29 	bl	8001c88 <HAL_GetTick>
 8003636:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003638:	e009      	b.n	800364e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800363a:	f7fe fb25 	bl	8001c88 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003648:	d901      	bls.n	800364e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e007      	b.n	800365e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800364e:	4b06      	ldr	r3, [pc, #24]	; (8003668 <HAL_PWREx_ConfigSupply+0x70>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800365a:	d1ee      	bne.n	800363a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	58024800 	.word	0x58024800

0800366c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08c      	sub	sp, #48	; 0x30
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e3c8      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8087 	beq.w	800379a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800368c:	4b88      	ldr	r3, [pc, #544]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003696:	4b86      	ldr	r3, [pc, #536]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	2b10      	cmp	r3, #16
 80036a0:	d007      	beq.n	80036b2 <HAL_RCC_OscConfig+0x46>
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	2b18      	cmp	r3, #24
 80036a6:	d110      	bne.n	80036ca <HAL_RCC_OscConfig+0x5e>
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d10b      	bne.n	80036ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b2:	4b7f      	ldr	r3, [pc, #508]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d06c      	beq.n	8003798 <HAL_RCC_OscConfig+0x12c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d168      	bne.n	8003798 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e3a2      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d2:	d106      	bne.n	80036e2 <HAL_RCC_OscConfig+0x76>
 80036d4:	4b76      	ldr	r3, [pc, #472]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a75      	ldr	r2, [pc, #468]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 80036da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	e02e      	b.n	8003740 <HAL_RCC_OscConfig+0xd4>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0x98>
 80036ea:	4b71      	ldr	r3, [pc, #452]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a70      	ldr	r2, [pc, #448]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 80036f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b6e      	ldr	r3, [pc, #440]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a6d      	ldr	r2, [pc, #436]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 80036fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e01d      	b.n	8003740 <HAL_RCC_OscConfig+0xd4>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800370c:	d10c      	bne.n	8003728 <HAL_RCC_OscConfig+0xbc>
 800370e:	4b68      	ldr	r3, [pc, #416]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a67      	ldr	r2, [pc, #412]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 8003714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	4b65      	ldr	r3, [pc, #404]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a64      	ldr	r2, [pc, #400]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 8003720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	e00b      	b.n	8003740 <HAL_RCC_OscConfig+0xd4>
 8003728:	4b61      	ldr	r3, [pc, #388]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a60      	ldr	r2, [pc, #384]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 800372e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	4b5e      	ldr	r3, [pc, #376]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a5d      	ldr	r2, [pc, #372]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 800373a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800373e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d013      	beq.n	8003770 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003748:	f7fe fa9e 	bl	8001c88 <HAL_GetTick>
 800374c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003750:	f7fe fa9a 	bl	8001c88 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	; 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e356      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003762:	4b53      	ldr	r3, [pc, #332]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0xe4>
 800376e:	e014      	b.n	800379a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fe fa8a 	bl	8001c88 <HAL_GetTick>
 8003774:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003778:	f7fe fa86 	bl	8001c88 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	; 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e342      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800378a:	4b49      	ldr	r3, [pc, #292]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x10c>
 8003796:	e000      	b.n	800379a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 808c 	beq.w	80038c0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037a8:	4b41      	ldr	r3, [pc, #260]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037b2:	4b3f      	ldr	r3, [pc, #252]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d007      	beq.n	80037ce <HAL_RCC_OscConfig+0x162>
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	2b18      	cmp	r3, #24
 80037c2:	d137      	bne.n	8003834 <HAL_RCC_OscConfig+0x1c8>
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d132      	bne.n	8003834 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ce:	4b38      	ldr	r3, [pc, #224]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_RCC_OscConfig+0x17a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e314      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037e6:	4b32      	ldr	r3, [pc, #200]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 0219 	bic.w	r2, r3, #25
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	492f      	ldr	r1, [pc, #188]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fe fa46 	bl	8001c88 <HAL_GetTick>
 80037fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003800:	f7fe fa42 	bl	8001c88 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e2fe      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003812:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381e:	4b24      	ldr	r3, [pc, #144]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	061b      	lsls	r3, r3, #24
 800382c:	4920      	ldr	r1, [pc, #128]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003832:	e045      	b.n	80038c0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d026      	beq.n	800388a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800383c:	4b1c      	ldr	r3, [pc, #112]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 0219 	bic.w	r2, r3, #25
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4919      	ldr	r1, [pc, #100]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384e:	f7fe fa1b 	bl	8001c88 <HAL_GetTick>
 8003852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003856:	f7fe fa17 	bl	8001c88 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e2d3      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003874:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	490b      	ldr	r1, [pc, #44]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
 8003888:	e01a      	b.n	80038c0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388a:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a08      	ldr	r2, [pc, #32]	; (80038b0 <HAL_RCC_OscConfig+0x244>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003896:	f7fe f9f7 	bl	8001c88 <HAL_GetTick>
 800389a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389e:	f7fe f9f3 	bl	8001c88 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d903      	bls.n	80038b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e2af      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
 80038b0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038b4:	4b96      	ldr	r3, [pc, #600]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1ee      	bne.n	800389e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d06a      	beq.n	80039a2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038cc:	4b90      	ldr	r3, [pc, #576]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038d4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038d6:	4b8e      	ldr	r3, [pc, #568]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d007      	beq.n	80038f2 <HAL_RCC_OscConfig+0x286>
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b18      	cmp	r3, #24
 80038e6:	d11b      	bne.n	8003920 <HAL_RCC_OscConfig+0x2b4>
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d116      	bne.n	8003920 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038f2:	4b87      	ldr	r3, [pc, #540]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_RCC_OscConfig+0x29e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	2b80      	cmp	r3, #128	; 0x80
 8003904:	d001      	beq.n	800390a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e282      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800390a:	4b81      	ldr	r3, [pc, #516]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	061b      	lsls	r3, r3, #24
 8003918:	497d      	ldr	r1, [pc, #500]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800391e:	e040      	b.n	80039a2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d023      	beq.n	8003970 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003928:	4b79      	ldr	r3, [pc, #484]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a78      	ldr	r2, [pc, #480]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 800392e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fe f9a8 	bl	8001c88 <HAL_GetTick>
 8003938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800393c:	f7fe f9a4 	bl	8001c88 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e260      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800394e:	4b70      	ldr	r3, [pc, #448]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f0      	beq.n	800393c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800395a:	4b6d      	ldr	r3, [pc, #436]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	061b      	lsls	r3, r3, #24
 8003968:	4969      	ldr	r1, [pc, #420]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	60cb      	str	r3, [r1, #12]
 800396e:	e018      	b.n	80039a2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003970:	4b67      	ldr	r3, [pc, #412]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a66      	ldr	r2, [pc, #408]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800397a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fe f984 	bl	8001c88 <HAL_GetTick>
 8003980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003984:	f7fe f980 	bl	8001c88 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e23c      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003996:	4b5e      	ldr	r3, [pc, #376]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d036      	beq.n	8003a1c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d019      	beq.n	80039ea <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b6:	4b56      	ldr	r3, [pc, #344]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 80039b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ba:	4a55      	ldr	r2, [pc, #340]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c2:	f7fe f961 	bl	8001c88 <HAL_GetTick>
 80039c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ca:	f7fe f95d 	bl	8001c88 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e219      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039dc:	4b4c      	ldr	r3, [pc, #304]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 80039de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x35e>
 80039e8:	e018      	b.n	8003a1c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ea:	4b49      	ldr	r3, [pc, #292]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 80039ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ee:	4a48      	ldr	r2, [pc, #288]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f6:	f7fe f947 	bl	8001c88 <HAL_GetTick>
 80039fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039fe:	f7fe f943 	bl	8001c88 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e1ff      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a10:	4b3f      	ldr	r3, [pc, #252]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f0      	bne.n	80039fe <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d036      	beq.n	8003a96 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d019      	beq.n	8003a64 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a30:	4b37      	ldr	r3, [pc, #220]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a36      	ldr	r2, [pc, #216]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003a36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a3c:	f7fe f924 	bl	8001c88 <HAL_GetTick>
 8003a40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a44:	f7fe f920 	bl	8001c88 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e1dc      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a56:	4b2e      	ldr	r3, [pc, #184]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x3d8>
 8003a62:	e018      	b.n	8003a96 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a64:	4b2a      	ldr	r3, [pc, #168]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a29      	ldr	r2, [pc, #164]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a70:	f7fe f90a 	bl	8001c88 <HAL_GetTick>
 8003a74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a78:	f7fe f906 	bl	8001c88 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e1c2      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a8a:	4b21      	ldr	r3, [pc, #132]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8086 	beq.w	8003bb0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <HAL_RCC_OscConfig+0x4a8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1a      	ldr	r2, [pc, #104]	; (8003b14 <HAL_RCC_OscConfig+0x4a8>)
 8003aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ab0:	f7fe f8ea 	bl	8001c88 <HAL_GetTick>
 8003ab4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab8:	f7fe f8e6 	bl	8001c88 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e1a2      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_RCC_OscConfig+0x4a8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d106      	bne.n	8003aec <HAL_RCC_OscConfig+0x480>
 8003ade:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	4a0b      	ldr	r2, [pc, #44]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aea:	e032      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e6>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d111      	bne.n	8003b18 <HAL_RCC_OscConfig+0x4ac>
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af8:	4a05      	ldr	r2, [pc, #20]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003afa:	f023 0301 	bic.w	r3, r3, #1
 8003afe:	6713      	str	r3, [r2, #112]	; 0x70
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b04:	4a02      	ldr	r2, [pc, #8]	; (8003b10 <HAL_RCC_OscConfig+0x4a4>)
 8003b06:	f023 0304 	bic.w	r3, r3, #4
 8003b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0c:	e021      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e6>
 8003b0e:	bf00      	nop
 8003b10:	58024400 	.word	0x58024400
 8003b14:	58024800 	.word	0x58024800
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b05      	cmp	r3, #5
 8003b1e:	d10c      	bne.n	8003b3a <HAL_RCC_OscConfig+0x4ce>
 8003b20:	4b83      	ldr	r3, [pc, #524]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	4a82      	ldr	r2, [pc, #520]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003b26:	f043 0304 	orr.w	r3, r3, #4
 8003b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2c:	4b80      	ldr	r3, [pc, #512]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b30:	4a7f      	ldr	r2, [pc, #508]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	6713      	str	r3, [r2, #112]	; 0x70
 8003b38:	e00b      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e6>
 8003b3a:	4b7d      	ldr	r3, [pc, #500]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	4a7c      	ldr	r2, [pc, #496]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	6713      	str	r3, [r2, #112]	; 0x70
 8003b46:	4b7a      	ldr	r3, [pc, #488]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	4a79      	ldr	r2, [pc, #484]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003b4c:	f023 0304 	bic.w	r3, r3, #4
 8003b50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d015      	beq.n	8003b86 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fe f895 	bl	8001c88 <HAL_GetTick>
 8003b5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7fe f891 	bl	8001c88 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e14b      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b78:	4b6d      	ldr	r3, [pc, #436]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0ee      	beq.n	8003b62 <HAL_RCC_OscConfig+0x4f6>
 8003b84:	e014      	b.n	8003bb0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b86:	f7fe f87f 	bl	8001c88 <HAL_GetTick>
 8003b8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7fe f87b 	bl	8001c88 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e135      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ba4:	4b62      	ldr	r3, [pc, #392]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1ee      	bne.n	8003b8e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 812a 	beq.w	8003e0e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003bba:	4b5d      	ldr	r3, [pc, #372]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bc2:	2b18      	cmp	r3, #24
 8003bc4:	f000 80ba 	beq.w	8003d3c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	f040 8095 	bne.w	8003cfc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd2:	4b57      	ldr	r3, [pc, #348]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a56      	ldr	r2, [pc, #344]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003bd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fe f853 	bl	8001c88 <HAL_GetTick>
 8003be2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be6:	f7fe f84f 	bl	8001c88 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e10b      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bf8:	4b4d      	ldr	r3, [pc, #308]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f0      	bne.n	8003be6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c04:	4b4a      	ldr	r3, [pc, #296]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003c06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c08:	4b4a      	ldr	r3, [pc, #296]	; (8003d34 <HAL_RCC_OscConfig+0x6c8>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c14:	0112      	lsls	r2, r2, #4
 8003c16:	430a      	orrs	r2, r1
 8003c18:	4945      	ldr	r1, [pc, #276]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	628b      	str	r3, [r1, #40]	; 0x28
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	3b01      	subs	r3, #1
 8003c24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	025b      	lsls	r3, r3, #9
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	041b      	lsls	r3, r3, #16
 8003c3c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c46:	3b01      	subs	r3, #1
 8003c48:	061b      	lsls	r3, r3, #24
 8003c4a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c4e:	4938      	ldr	r1, [pc, #224]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c54:	4b36      	ldr	r3, [pc, #216]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	4a35      	ldr	r2, [pc, #212]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003c5a:	f023 0301 	bic.w	r3, r3, #1
 8003c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c60:	4b33      	ldr	r3, [pc, #204]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c64:	4b34      	ldr	r3, [pc, #208]	; (8003d38 <HAL_RCC_OscConfig+0x6cc>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c6c:	00d2      	lsls	r2, r2, #3
 8003c6e:	4930      	ldr	r1, [pc, #192]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c74:	4b2e      	ldr	r3, [pc, #184]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	f023 020c 	bic.w	r2, r3, #12
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	492b      	ldr	r1, [pc, #172]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c86:	4b2a      	ldr	r3, [pc, #168]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	f023 0202 	bic.w	r2, r3, #2
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	4927      	ldr	r1, [pc, #156]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c98:	4b25      	ldr	r3, [pc, #148]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	4a24      	ldr	r2, [pc, #144]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca4:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003cb0:	4b1f      	ldr	r3, [pc, #124]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	4a1e      	ldr	r2, [pc, #120]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003cb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003cbc:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	4a1b      	ldr	r2, [pc, #108]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc8:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fd ffd8 	bl	8001c88 <HAL_GetTick>
 8003cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fd ffd4 	bl	8001c88 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e090      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cee:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x670>
 8003cfa:	e088      	b.n	8003e0e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0b      	ldr	r2, [pc, #44]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fd ffbe 	bl	8001c88 <HAL_GetTick>
 8003d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fd ffba 	bl	8001c88 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e076      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d22:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <HAL_RCC_OscConfig+0x6c4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x6a4>
 8003d2e:	e06e      	b.n	8003e0e <HAL_RCC_OscConfig+0x7a2>
 8003d30:	58024400 	.word	0x58024400
 8003d34:	fffffc0c 	.word	0xfffffc0c
 8003d38:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d3c:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <HAL_RCC_OscConfig+0x7ac>)
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d42:	4b35      	ldr	r3, [pc, #212]	; (8003e18 <HAL_RCC_OscConfig+0x7ac>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d031      	beq.n	8003db4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f003 0203 	and.w	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d12a      	bne.n	8003db4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d122      	bne.n	8003db4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d11a      	bne.n	8003db4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	0a5b      	lsrs	r3, r3, #9
 8003d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d111      	bne.n	8003db4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	0c1b      	lsrs	r3, r3, #16
 8003d94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d108      	bne.n	8003db4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	0e1b      	lsrs	r3, r3, #24
 8003da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e02b      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003db8:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <HAL_RCC_OscConfig+0x7ac>)
 8003dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbc:	08db      	lsrs	r3, r3, #3
 8003dbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dc2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d01f      	beq.n	8003e0e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003dce:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <HAL_RCC_OscConfig+0x7ac>)
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	4a11      	ldr	r2, [pc, #68]	; (8003e18 <HAL_RCC_OscConfig+0x7ac>)
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dda:	f7fd ff55 	bl	8001c88 <HAL_GetTick>
 8003dde:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003de0:	bf00      	nop
 8003de2:	f7fd ff51 	bl	8001c88 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d0f9      	beq.n	8003de2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dee:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <HAL_RCC_OscConfig+0x7ac>)
 8003df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <HAL_RCC_OscConfig+0x7b0>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003dfa:	00d2      	lsls	r2, r2, #3
 8003dfc:	4906      	ldr	r1, [pc, #24]	; (8003e18 <HAL_RCC_OscConfig+0x7ac>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_RCC_OscConfig+0x7ac>)
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <HAL_RCC_OscConfig+0x7ac>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3730      	adds	r7, #48	; 0x30
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	58024400 	.word	0x58024400
 8003e1c:	ffff0007 	.word	0xffff0007

08003e20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e19c      	b.n	800416e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e34:	4b8a      	ldr	r3, [pc, #552]	; (8004060 <HAL_RCC_ClockConfig+0x240>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d910      	bls.n	8003e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b87      	ldr	r3, [pc, #540]	; (8004060 <HAL_RCC_ClockConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 020f 	bic.w	r2, r3, #15
 8003e4a:	4985      	ldr	r1, [pc, #532]	; (8004060 <HAL_RCC_ClockConfig+0x240>)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e52:	4b83      	ldr	r3, [pc, #524]	; (8004060 <HAL_RCC_ClockConfig+0x240>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e184      	b.n	800416e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d010      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	4b7b      	ldr	r3, [pc, #492]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d908      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e80:	4b78      	ldr	r3, [pc, #480]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	4975      	ldr	r1, [pc, #468]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d010      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	4b70      	ldr	r3, [pc, #448]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d908      	bls.n	8003ec0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eae:	4b6d      	ldr	r3, [pc, #436]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	496a      	ldr	r1, [pc, #424]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d010      	beq.n	8003eee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699a      	ldr	r2, [r3, #24]
 8003ed0:	4b64      	ldr	r3, [pc, #400]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d908      	bls.n	8003eee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003edc:	4b61      	ldr	r3, [pc, #388]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	495e      	ldr	r1, [pc, #376]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d010      	beq.n	8003f1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69da      	ldr	r2, [r3, #28]
 8003efe:	4b59      	ldr	r3, [pc, #356]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d908      	bls.n	8003f1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f0a:	4b56      	ldr	r3, [pc, #344]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	4953      	ldr	r1, [pc, #332]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d010      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	4b4d      	ldr	r3, [pc, #308]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d908      	bls.n	8003f4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f38:	4b4a      	ldr	r3, [pc, #296]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	f023 020f 	bic.w	r2, r3, #15
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4947      	ldr	r1, [pc, #284]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d055      	beq.n	8004002 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f56:	4b43      	ldr	r3, [pc, #268]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	4940      	ldr	r1, [pc, #256]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d107      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f70:	4b3c      	ldr	r3, [pc, #240]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d121      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0f6      	b.n	800416e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d107      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f88:	4b36      	ldr	r3, [pc, #216]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d115      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0ea      	b.n	800416e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d107      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fa0:	4b30      	ldr	r3, [pc, #192]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0de      	b.n	800416e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fb0:	4b2c      	ldr	r3, [pc, #176]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0d6      	b.n	800416e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fc0:	4b28      	ldr	r3, [pc, #160]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f023 0207 	bic.w	r2, r3, #7
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4925      	ldr	r1, [pc, #148]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd2:	f7fd fe59 	bl	8001c88 <HAL_GetTick>
 8003fd6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fda:	f7fd fe55 	bl	8001c88 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e0be      	b.n	800416e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff0:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d1eb      	bne.n	8003fda <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d010      	beq.n	8004030 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	4b14      	ldr	r3, [pc, #80]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	429a      	cmp	r2, r3
 800401c:	d208      	bcs.n	8004030 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800401e:	4b11      	ldr	r3, [pc, #68]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	f023 020f 	bic.w	r2, r3, #15
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	490e      	ldr	r1, [pc, #56]	; (8004064 <HAL_RCC_ClockConfig+0x244>)
 800402c:	4313      	orrs	r3, r2
 800402e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCC_ClockConfig+0x240>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d214      	bcs.n	8004068 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403e:	4b08      	ldr	r3, [pc, #32]	; (8004060 <HAL_RCC_ClockConfig+0x240>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f023 020f 	bic.w	r2, r3, #15
 8004046:	4906      	ldr	r1, [pc, #24]	; (8004060 <HAL_RCC_ClockConfig+0x240>)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	4313      	orrs	r3, r2
 800404c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800404e:	4b04      	ldr	r3, [pc, #16]	; (8004060 <HAL_RCC_ClockConfig+0x240>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d005      	beq.n	8004068 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e086      	b.n	800416e <HAL_RCC_ClockConfig+0x34e>
 8004060:	52002000 	.word	0x52002000
 8004064:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d010      	beq.n	8004096 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	4b3f      	ldr	r3, [pc, #252]	; (8004178 <HAL_RCC_ClockConfig+0x358>)
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004080:	429a      	cmp	r2, r3
 8004082:	d208      	bcs.n	8004096 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004084:	4b3c      	ldr	r3, [pc, #240]	; (8004178 <HAL_RCC_ClockConfig+0x358>)
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	4939      	ldr	r1, [pc, #228]	; (8004178 <HAL_RCC_ClockConfig+0x358>)
 8004092:	4313      	orrs	r3, r2
 8004094:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d010      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695a      	ldr	r2, [r3, #20]
 80040a6:	4b34      	ldr	r3, [pc, #208]	; (8004178 <HAL_RCC_ClockConfig+0x358>)
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d208      	bcs.n	80040c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040b2:	4b31      	ldr	r3, [pc, #196]	; (8004178 <HAL_RCC_ClockConfig+0x358>)
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	492e      	ldr	r1, [pc, #184]	; (8004178 <HAL_RCC_ClockConfig+0x358>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d010      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699a      	ldr	r2, [r3, #24]
 80040d4:	4b28      	ldr	r3, [pc, #160]	; (8004178 <HAL_RCC_ClockConfig+0x358>)
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040dc:	429a      	cmp	r2, r3
 80040de:	d208      	bcs.n	80040f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040e0:	4b25      	ldr	r3, [pc, #148]	; (8004178 <HAL_RCC_ClockConfig+0x358>)
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	4922      	ldr	r1, [pc, #136]	; (8004178 <HAL_RCC_ClockConfig+0x358>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d010      	beq.n	8004120 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69da      	ldr	r2, [r3, #28]
 8004102:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <HAL_RCC_ClockConfig+0x358>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800410a:	429a      	cmp	r2, r3
 800410c:	d208      	bcs.n	8004120 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800410e:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <HAL_RCC_ClockConfig+0x358>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	4917      	ldr	r1, [pc, #92]	; (8004178 <HAL_RCC_ClockConfig+0x358>)
 800411c:	4313      	orrs	r3, r2
 800411e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004120:	f000 f834 	bl	800418c <HAL_RCC_GetSysClockFreq>
 8004124:	4602      	mov	r2, r0
 8004126:	4b14      	ldr	r3, [pc, #80]	; (8004178 <HAL_RCC_ClockConfig+0x358>)
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	4912      	ldr	r1, [pc, #72]	; (800417c <HAL_RCC_ClockConfig+0x35c>)
 8004132:	5ccb      	ldrb	r3, [r1, r3]
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
 800413c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800413e:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <HAL_RCC_ClockConfig+0x358>)
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	4a0d      	ldr	r2, [pc, #52]	; (800417c <HAL_RCC_ClockConfig+0x35c>)
 8004148:	5cd3      	ldrb	r3, [r2, r3]
 800414a:	f003 031f 	and.w	r3, r3, #31
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
 8004154:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <HAL_RCC_ClockConfig+0x360>)
 8004156:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004158:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <HAL_RCC_ClockConfig+0x364>)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800415e:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <HAL_RCC_ClockConfig+0x368>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7fd fd46 	bl	8001bf4 <HAL_InitTick>
 8004168:	4603      	mov	r3, r0
 800416a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800416c:	7bfb      	ldrb	r3, [r7, #15]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	58024400 	.word	0x58024400
 800417c:	0800d068 	.word	0x0800d068
 8004180:	24000018 	.word	0x24000018
 8004184:	24000014 	.word	0x24000014
 8004188:	2400001c 	.word	0x2400001c

0800418c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800418c:	b480      	push	{r7}
 800418e:	b089      	sub	sp, #36	; 0x24
 8004190:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004192:	4bb3      	ldr	r3, [pc, #716]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800419a:	2b18      	cmp	r3, #24
 800419c:	f200 8155 	bhi.w	800444a <HAL_RCC_GetSysClockFreq+0x2be>
 80041a0:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80041a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a6:	bf00      	nop
 80041a8:	0800420d 	.word	0x0800420d
 80041ac:	0800444b 	.word	0x0800444b
 80041b0:	0800444b 	.word	0x0800444b
 80041b4:	0800444b 	.word	0x0800444b
 80041b8:	0800444b 	.word	0x0800444b
 80041bc:	0800444b 	.word	0x0800444b
 80041c0:	0800444b 	.word	0x0800444b
 80041c4:	0800444b 	.word	0x0800444b
 80041c8:	08004233 	.word	0x08004233
 80041cc:	0800444b 	.word	0x0800444b
 80041d0:	0800444b 	.word	0x0800444b
 80041d4:	0800444b 	.word	0x0800444b
 80041d8:	0800444b 	.word	0x0800444b
 80041dc:	0800444b 	.word	0x0800444b
 80041e0:	0800444b 	.word	0x0800444b
 80041e4:	0800444b 	.word	0x0800444b
 80041e8:	08004239 	.word	0x08004239
 80041ec:	0800444b 	.word	0x0800444b
 80041f0:	0800444b 	.word	0x0800444b
 80041f4:	0800444b 	.word	0x0800444b
 80041f8:	0800444b 	.word	0x0800444b
 80041fc:	0800444b 	.word	0x0800444b
 8004200:	0800444b 	.word	0x0800444b
 8004204:	0800444b 	.word	0x0800444b
 8004208:	0800423f 	.word	0x0800423f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800420c:	4b94      	ldr	r3, [pc, #592]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d009      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004218:	4b91      	ldr	r3, [pc, #580]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	08db      	lsrs	r3, r3, #3
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	4a90      	ldr	r2, [pc, #576]	; (8004464 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
 8004228:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800422a:	e111      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800422c:	4b8d      	ldr	r3, [pc, #564]	; (8004464 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800422e:	61bb      	str	r3, [r7, #24]
      break;
 8004230:	e10e      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004232:	4b8d      	ldr	r3, [pc, #564]	; (8004468 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004234:	61bb      	str	r3, [r7, #24]
      break;
 8004236:	e10b      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004238:	4b8c      	ldr	r3, [pc, #560]	; (800446c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800423a:	61bb      	str	r3, [r7, #24]
      break;
 800423c:	e108      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800423e:	4b88      	ldr	r3, [pc, #544]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004248:	4b85      	ldr	r3, [pc, #532]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004252:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004254:	4b82      	ldr	r3, [pc, #520]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800425e:	4b80      	ldr	r3, [pc, #512]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	08db      	lsrs	r3, r3, #3
 8004264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	fb02 f303 	mul.w	r3, r2, r3
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004276:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 80e1 	beq.w	8004444 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b02      	cmp	r3, #2
 8004286:	f000 8083 	beq.w	8004390 <HAL_RCC_GetSysClockFreq+0x204>
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b02      	cmp	r3, #2
 800428e:	f200 80a1 	bhi.w	80043d4 <HAL_RCC_GetSysClockFreq+0x248>
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x114>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d056      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x1c0>
 800429e:	e099      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042a0:	4b6f      	ldr	r3, [pc, #444]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d02d      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042ac:	4b6c      	ldr	r3, [pc, #432]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	08db      	lsrs	r3, r3, #3
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	4a6b      	ldr	r2, [pc, #428]	; (8004464 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
 80042bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	ee07 3a90 	vmov	s15, r3
 80042c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d6:	4b62      	ldr	r3, [pc, #392]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004470 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004302:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004306:	e087      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004474 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800431a:	4b51      	ldr	r3, [pc, #324]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800432a:	ed97 6a02 	vldr	s12, [r7, #8]
 800432e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004470 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800433a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800433e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800434a:	e065      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004356:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004478 <HAL_RCC_GetSysClockFreq+0x2ec>
 800435a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435e:	4b40      	ldr	r3, [pc, #256]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004372:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004470 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800438e:	e043      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800447c <HAL_RCC_GetSysClockFreq+0x2f0>
 800439e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a2:	4b2f      	ldr	r3, [pc, #188]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004470 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043d2:	e021      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004478 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e6:	4b1e      	ldr	r3, [pc, #120]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004470 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800440a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004416:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004418:	4b11      	ldr	r3, [pc, #68]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	0a5b      	lsrs	r3, r3, #9
 800441e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004422:	3301      	adds	r3, #1
 8004424:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	ee07 3a90 	vmov	s15, r3
 800442c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004430:	edd7 6a07 	vldr	s13, [r7, #28]
 8004434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800443c:	ee17 3a90 	vmov	r3, s15
 8004440:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004442:	e005      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	61bb      	str	r3, [r7, #24]
      break;
 8004448:	e002      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800444a:	4b07      	ldr	r3, [pc, #28]	; (8004468 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800444c:	61bb      	str	r3, [r7, #24]
      break;
 800444e:	bf00      	nop
  }

  return sysclockfreq;
 8004450:	69bb      	ldr	r3, [r7, #24]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3724      	adds	r7, #36	; 0x24
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	58024400 	.word	0x58024400
 8004464:	03d09000 	.word	0x03d09000
 8004468:	003d0900 	.word	0x003d0900
 800446c:	007a1200 	.word	0x007a1200
 8004470:	46000000 	.word	0x46000000
 8004474:	4c742400 	.word	0x4c742400
 8004478:	4a742400 	.word	0x4a742400
 800447c:	4af42400 	.word	0x4af42400

08004480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004486:	f7ff fe81 	bl	800418c <HAL_RCC_GetSysClockFreq>
 800448a:	4602      	mov	r2, r0
 800448c:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	490f      	ldr	r1, [pc, #60]	; (80044d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004498:	5ccb      	ldrb	r3, [r1, r3]
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	fa22 f303 	lsr.w	r3, r2, r3
 80044a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044a4:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	4a09      	ldr	r2, [pc, #36]	; (80044d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80044ae:	5cd3      	ldrb	r3, [r2, r3]
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ba:	4a07      	ldr	r2, [pc, #28]	; (80044d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80044bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044be:	4a07      	ldr	r2, [pc, #28]	; (80044dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80044c4:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80044c6:	681b      	ldr	r3, [r3, #0]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	58024400 	.word	0x58024400
 80044d4:	0800d068 	.word	0x0800d068
 80044d8:	24000018 	.word	0x24000018
 80044dc:	24000014 	.word	0x24000014

080044e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80044e4:	f7ff ffcc 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b06      	ldr	r3, [pc, #24]	; (8004504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4904      	ldr	r1, [pc, #16]	; (8004508 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	58024400 	.word	0x58024400
 8004508:	0800d068 	.word	0x0800d068

0800450c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004510:	f7ff ffb6 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4904      	ldr	r1, [pc, #16]	; (8004534 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	58024400 	.word	0x58024400
 8004534:	0800d068 	.word	0x0800d068

08004538 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800453c:	b0c6      	sub	sp, #280	; 0x118
 800453e:	af00      	add	r7, sp, #0
 8004540:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004544:	2300      	movs	r3, #0
 8004546:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800454a:	2300      	movs	r3, #0
 800454c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800455c:	2500      	movs	r5, #0
 800455e:	ea54 0305 	orrs.w	r3, r4, r5
 8004562:	d049      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800456a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800456e:	d02f      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004570:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004574:	d828      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800457a:	d01a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800457c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004580:	d822      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800458a:	d007      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800458c:	e01c      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800458e:	4bab      	ldr	r3, [pc, #684]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	4aaa      	ldr	r2, [pc, #680]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004598:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800459a:	e01a      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800459c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045a0:	3308      	adds	r3, #8
 80045a2:	2102      	movs	r1, #2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f001 fc25 	bl	8005df4 <RCCEx_PLL2_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80045b0:	e00f      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045b6:	3328      	adds	r3, #40	; 0x28
 80045b8:	2102      	movs	r1, #2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f001 fccc 	bl	8005f58 <RCCEx_PLL3_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80045c6:	e004      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80045ce:	e000      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80045d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045da:	4b98      	ldr	r3, [pc, #608]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80045e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e8:	4a94      	ldr	r2, [pc, #592]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045ea:	430b      	orrs	r3, r1
 80045ec:	6513      	str	r3, [r2, #80]	; 0x50
 80045ee:	e003      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004604:	f04f 0900 	mov.w	r9, #0
 8004608:	ea58 0309 	orrs.w	r3, r8, r9
 800460c:	d047      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800460e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004614:	2b04      	cmp	r3, #4
 8004616:	d82a      	bhi.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004635 	.word	0x08004635
 8004624:	08004643 	.word	0x08004643
 8004628:	08004659 	.word	0x08004659
 800462c:	08004677 	.word	0x08004677
 8004630:	08004677 	.word	0x08004677
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004634:	4b81      	ldr	r3, [pc, #516]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	4a80      	ldr	r2, [pc, #512]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800463a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800463e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004640:	e01a      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004646:	3308      	adds	r3, #8
 8004648:	2100      	movs	r1, #0
 800464a:	4618      	mov	r0, r3
 800464c:	f001 fbd2 	bl	8005df4 <RCCEx_PLL2_Config>
 8004650:	4603      	mov	r3, r0
 8004652:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004656:	e00f      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800465c:	3328      	adds	r3, #40	; 0x28
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f001 fc79 	bl	8005f58 <RCCEx_PLL3_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800466c:	e004      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004674:	e000      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004678:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10a      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004680:	4b6e      	ldr	r3, [pc, #440]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004684:	f023 0107 	bic.w	r1, r3, #7
 8004688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800468c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468e:	4a6b      	ldr	r2, [pc, #428]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004690:	430b      	orrs	r3, r1
 8004692:	6513      	str	r3, [r2, #80]	; 0x50
 8004694:	e003      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004696:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800469a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800469e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80046aa:	f04f 0b00 	mov.w	fp, #0
 80046ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80046b2:	d05b      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80046b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046bc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80046c0:	d03b      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80046c2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80046c6:	d834      	bhi.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046cc:	d037      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80046ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046d2:	d82e      	bhi.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046d8:	d033      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80046da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046de:	d828      	bhi.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e4:	d01a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80046e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ea:	d822      	bhi.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80046f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046f4:	d007      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80046f6:	e01c      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f8:	4b50      	ldr	r3, [pc, #320]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	4a4f      	ldr	r2, [pc, #316]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004702:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004704:	e01e      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800470a:	3308      	adds	r3, #8
 800470c:	2100      	movs	r1, #0
 800470e:	4618      	mov	r0, r3
 8004710:	f001 fb70 	bl	8005df4 <RCCEx_PLL2_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800471a:	e013      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800471c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004720:	3328      	adds	r3, #40	; 0x28
 8004722:	2100      	movs	r1, #0
 8004724:	4618      	mov	r0, r3
 8004726:	f001 fc17 	bl	8005f58 <RCCEx_PLL3_Config>
 800472a:	4603      	mov	r3, r0
 800472c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004730:	e008      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004738:	e004      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800473a:	bf00      	nop
 800473c:	e002      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800473e:	bf00      	nop
 8004740:	e000      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004744:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10b      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800474c:	4b3b      	ldr	r3, [pc, #236]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800474e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004750:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004758:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800475c:	4a37      	ldr	r2, [pc, #220]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800475e:	430b      	orrs	r3, r1
 8004760:	6593      	str	r3, [r2, #88]	; 0x58
 8004762:	e003      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004764:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004768:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800476c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004778:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800477c:	2300      	movs	r3, #0
 800477e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004782:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d05d      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800478c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004790:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004794:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004798:	d03b      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800479a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800479e:	d834      	bhi.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80047a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047a4:	d037      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80047a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047aa:	d82e      	bhi.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80047ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047b0:	d033      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80047b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047b6:	d828      	bhi.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80047b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047bc:	d01a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80047be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047c2:	d822      	bhi.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80047c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047cc:	d007      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80047ce:	e01c      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d0:	4b1a      	ldr	r3, [pc, #104]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047dc:	e01e      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047e2:	3308      	adds	r3, #8
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f001 fb04 	bl	8005df4 <RCCEx_PLL2_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80047f2:	e013      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047f8:	3328      	adds	r3, #40	; 0x28
 80047fa:	2100      	movs	r1, #0
 80047fc:	4618      	mov	r0, r3
 80047fe:	f001 fbab 	bl	8005f58 <RCCEx_PLL3_Config>
 8004802:	4603      	mov	r3, r0
 8004804:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004808:	e008      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004810:	e004      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004812:	bf00      	nop
 8004814:	e002      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800481a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800481c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10d      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004824:	4b05      	ldr	r3, [pc, #20]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004828:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800482c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004830:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004834:	4a01      	ldr	r2, [pc, #4]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004836:	430b      	orrs	r3, r1
 8004838:	6593      	str	r3, [r2, #88]	; 0x58
 800483a:	e005      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800483c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004840:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004844:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004854:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004858:	2300      	movs	r3, #0
 800485a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800485e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004862:	460b      	mov	r3, r1
 8004864:	4313      	orrs	r3, r2
 8004866:	d03a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800486c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486e:	2b30      	cmp	r3, #48	; 0x30
 8004870:	d01f      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004872:	2b30      	cmp	r3, #48	; 0x30
 8004874:	d819      	bhi.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004876:	2b20      	cmp	r3, #32
 8004878:	d00c      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800487a:	2b20      	cmp	r3, #32
 800487c:	d815      	bhi.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x372>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d019      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004882:	2b10      	cmp	r3, #16
 8004884:	d111      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004886:	4baa      	ldr	r3, [pc, #680]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	4aa9      	ldr	r2, [pc, #676]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800488c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004890:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004892:	e011      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004898:	3308      	adds	r3, #8
 800489a:	2102      	movs	r1, #2
 800489c:	4618      	mov	r0, r3
 800489e:	f001 faa9 	bl	8005df4 <RCCEx_PLL2_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80048a8:	e006      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80048b0:	e002      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80048b2:	bf00      	nop
 80048b4:	e000      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80048b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80048c0:	4b9b      	ldr	r3, [pc, #620]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80048c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ce:	4a98      	ldr	r2, [pc, #608]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048d0:	430b      	orrs	r3, r1
 80048d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048d4:	e003      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80048de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80048ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048ee:	2300      	movs	r3, #0
 80048f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80048f8:	460b      	mov	r3, r1
 80048fa:	4313      	orrs	r3, r2
 80048fc:	d051      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80048fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004908:	d035      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800490a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800490e:	d82e      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004910:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004914:	d031      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004916:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800491a:	d828      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800491c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004920:	d01a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004926:	d822      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004930:	d007      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004932:	e01c      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004934:	4b7e      	ldr	r3, [pc, #504]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	4a7d      	ldr	r2, [pc, #500]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800493a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800493e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004940:	e01c      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004946:	3308      	adds	r3, #8
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f001 fa52 	bl	8005df4 <RCCEx_PLL2_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004956:	e011      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800495c:	3328      	adds	r3, #40	; 0x28
 800495e:	2100      	movs	r1, #0
 8004960:	4618      	mov	r0, r3
 8004962:	f001 faf9 	bl	8005f58 <RCCEx_PLL3_Config>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800496c:	e006      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004974:	e002      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004976:	bf00      	nop
 8004978:	e000      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800497a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800497c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004984:	4b6a      	ldr	r3, [pc, #424]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004988:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800498c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004992:	4a67      	ldr	r2, [pc, #412]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004994:	430b      	orrs	r3, r1
 8004996:	6513      	str	r3, [r2, #80]	; 0x50
 8004998:	e003      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800499e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80049ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049b2:	2300      	movs	r3, #0
 80049b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049b8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80049bc:	460b      	mov	r3, r1
 80049be:	4313      	orrs	r3, r2
 80049c0:	d053      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80049c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049cc:	d033      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80049ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d2:	d82c      	bhi.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049d8:	d02f      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80049da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049de:	d826      	bhi.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049e4:	d02b      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80049e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049ea:	d820      	bhi.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049f0:	d012      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80049f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049f6:	d81a      	bhi.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d022      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a00:	d115      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a06:	3308      	adds	r3, #8
 8004a08:	2101      	movs	r1, #1
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f001 f9f2 	bl	8005df4 <RCCEx_PLL2_Config>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a16:	e015      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a1c:	3328      	adds	r3, #40	; 0x28
 8004a1e:	2101      	movs	r1, #1
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 fa99 	bl	8005f58 <RCCEx_PLL3_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a2c:	e00a      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004a34:	e006      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a36:	bf00      	nop
 8004a38:	e004      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a3a:	bf00      	nop
 8004a3c:	e002      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a3e:	bf00      	nop
 8004a40:	e000      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a4c:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a50:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5a:	4a35      	ldr	r2, [pc, #212]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6513      	str	r3, [r2, #80]	; 0x50
 8004a60:	e003      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a72:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004a76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a80:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a84:	460b      	mov	r3, r1
 8004a86:	4313      	orrs	r3, r2
 8004a88:	d058      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a96:	d033      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a9c:	d82c      	bhi.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa2:	d02f      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa8:	d826      	bhi.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004aaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004aae:	d02b      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004ab0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ab4:	d820      	bhi.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aba:	d012      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac0:	d81a      	bhi.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d022      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aca:	d115      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f001 f98d 	bl	8005df4 <RCCEx_PLL2_Config>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ae0:	e015      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae6:	3328      	adds	r3, #40	; 0x28
 8004ae8:	2101      	movs	r1, #1
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 fa34 	bl	8005f58 <RCCEx_PLL3_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004af6:	e00a      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004afe:	e006      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004b00:	bf00      	nop
 8004b02:	e004      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004b04:	bf00      	nop
 8004b06:	e002      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004b08:	bf00      	nop
 8004b0a:	e000      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10e      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b26:	4a02      	ldr	r2, [pc, #8]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b2c:	e006      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004b2e:	bf00      	nop
 8004b30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b52:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	d037      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b66:	d00e      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6c:	d816      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d018      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004b72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b76:	d111      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b78:	4bc4      	ldr	r3, [pc, #784]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	4ac3      	ldr	r2, [pc, #780]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b84:	e00f      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f001 f930 	bl	8005df4 <RCCEx_PLL2_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b9a:	e004      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ba6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bae:	4bb7      	ldr	r3, [pc, #732]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bbc:	4ab3      	ldr	r2, [pc, #716]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	6513      	str	r3, [r2, #80]	; 0x50
 8004bc2:	e003      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004bd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004be2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004be6:	460b      	mov	r3, r1
 8004be8:	4313      	orrs	r3, r2
 8004bea:	d039      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d81c      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004bf6:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c39 	.word	0x08004c39
 8004c00:	08004c0d 	.word	0x08004c0d
 8004c04:	08004c1b 	.word	0x08004c1b
 8004c08:	08004c39 	.word	0x08004c39
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c0c:	4b9f      	ldr	r3, [pc, #636]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	4a9e      	ldr	r2, [pc, #632]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c18:	e00f      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c1e:	3308      	adds	r3, #8
 8004c20:	2102      	movs	r1, #2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f001 f8e6 	bl	8005df4 <RCCEx_PLL2_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c2e:	e004      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c36:	e000      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c42:	4b92      	ldr	r3, [pc, #584]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c46:	f023 0103 	bic.w	r1, r3, #3
 8004c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c50:	4a8e      	ldr	r2, [pc, #568]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c52:	430b      	orrs	r3, r1
 8004c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c56:	e003      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c68:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c70:	2300      	movs	r3, #0
 8004c72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f000 8099 	beq.w	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c82:	4b83      	ldr	r3, [pc, #524]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a82      	ldr	r2, [pc, #520]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c8e:	f7fc fffb 	bl	8001c88 <HAL_GetTick>
 8004c92:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c96:	e00b      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c98:	f7fc fff6 	bl	8001c88 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b64      	cmp	r3, #100	; 0x64
 8004ca6:	d903      	bls.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004cae:	e005      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cb0:	4b77      	ldr	r3, [pc, #476]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0ed      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004cbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d173      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004cc4:	4b71      	ldr	r3, [pc, #452]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ccc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cd0:	4053      	eors	r3, r2
 8004cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d015      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cda:	4b6c      	ldr	r3, [pc, #432]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ce6:	4b69      	ldr	r3, [pc, #420]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cea:	4a68      	ldr	r2, [pc, #416]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf2:	4b66      	ldr	r3, [pc, #408]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf6:	4a65      	ldr	r2, [pc, #404]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004cfe:	4a63      	ldr	r2, [pc, #396]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d04:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d12:	d118      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fc ffb8 	bl	8001c88 <HAL_GetTick>
 8004d18:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d1c:	e00d      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d1e:	f7fc ffb3 	bl	8001c88 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d28:	1ad2      	subs	r2, r2, r3
 8004d2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d903      	bls.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8004d38:	e005      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d3a:	4b54      	ldr	r3, [pc, #336]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0eb      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004d46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d129      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d5e:	d10e      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004d60:	4b4a      	ldr	r3, [pc, #296]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d70:	091a      	lsrs	r2, r3, #4
 8004d72:	4b48      	ldr	r3, [pc, #288]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	4a45      	ldr	r2, [pc, #276]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	6113      	str	r3, [r2, #16]
 8004d7c:	e005      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004d7e:	4b43      	ldr	r3, [pc, #268]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	4a42      	ldr	r2, [pc, #264]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d88:	6113      	str	r3, [r2, #16]
 8004d8a:	4b40      	ldr	r3, [pc, #256]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d8c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9a:	4a3c      	ldr	r2, [pc, #240]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004da0:	e008      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004da2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004da6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8004daa:	e003      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004db0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	f002 0301 	and.w	r3, r2, #1
 8004dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004dca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f000 808f 	beq.w	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ddc:	2b28      	cmp	r3, #40	; 0x28
 8004dde:	d871      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004de0:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004ecd 	.word	0x08004ecd
 8004dec:	08004ec5 	.word	0x08004ec5
 8004df0:	08004ec5 	.word	0x08004ec5
 8004df4:	08004ec5 	.word	0x08004ec5
 8004df8:	08004ec5 	.word	0x08004ec5
 8004dfc:	08004ec5 	.word	0x08004ec5
 8004e00:	08004ec5 	.word	0x08004ec5
 8004e04:	08004ec5 	.word	0x08004ec5
 8004e08:	08004e99 	.word	0x08004e99
 8004e0c:	08004ec5 	.word	0x08004ec5
 8004e10:	08004ec5 	.word	0x08004ec5
 8004e14:	08004ec5 	.word	0x08004ec5
 8004e18:	08004ec5 	.word	0x08004ec5
 8004e1c:	08004ec5 	.word	0x08004ec5
 8004e20:	08004ec5 	.word	0x08004ec5
 8004e24:	08004ec5 	.word	0x08004ec5
 8004e28:	08004eaf 	.word	0x08004eaf
 8004e2c:	08004ec5 	.word	0x08004ec5
 8004e30:	08004ec5 	.word	0x08004ec5
 8004e34:	08004ec5 	.word	0x08004ec5
 8004e38:	08004ec5 	.word	0x08004ec5
 8004e3c:	08004ec5 	.word	0x08004ec5
 8004e40:	08004ec5 	.word	0x08004ec5
 8004e44:	08004ec5 	.word	0x08004ec5
 8004e48:	08004ecd 	.word	0x08004ecd
 8004e4c:	08004ec5 	.word	0x08004ec5
 8004e50:	08004ec5 	.word	0x08004ec5
 8004e54:	08004ec5 	.word	0x08004ec5
 8004e58:	08004ec5 	.word	0x08004ec5
 8004e5c:	08004ec5 	.word	0x08004ec5
 8004e60:	08004ec5 	.word	0x08004ec5
 8004e64:	08004ec5 	.word	0x08004ec5
 8004e68:	08004ecd 	.word	0x08004ecd
 8004e6c:	08004ec5 	.word	0x08004ec5
 8004e70:	08004ec5 	.word	0x08004ec5
 8004e74:	08004ec5 	.word	0x08004ec5
 8004e78:	08004ec5 	.word	0x08004ec5
 8004e7c:	08004ec5 	.word	0x08004ec5
 8004e80:	08004ec5 	.word	0x08004ec5
 8004e84:	08004ec5 	.word	0x08004ec5
 8004e88:	08004ecd 	.word	0x08004ecd
 8004e8c:	58024400 	.word	0x58024400
 8004e90:	58024800 	.word	0x58024800
 8004e94:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 ffa7 	bl	8005df4 <RCCEx_PLL2_Config>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004eac:	e00f      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eb2:	3328      	adds	r3, #40	; 0x28
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f001 f84e 	bl	8005f58 <RCCEx_PLL3_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004ec2:	e004      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004eca:	e000      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ece:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004ed6:	4bbf      	ldr	r3, [pc, #764]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eda:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ee4:	4abb      	ldr	r2, [pc, #748]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	6553      	str	r3, [r2, #84]	; 0x54
 8004eea:	e003      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ef0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efc:	f002 0302 	and.w	r3, r2, #2
 8004f00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f04:	2300      	movs	r3, #0
 8004f06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f0a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4313      	orrs	r3, r2
 8004f12:	d041      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1a:	2b05      	cmp	r3, #5
 8004f1c:	d824      	bhi.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004f1e:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f24:	08004f71 	.word	0x08004f71
 8004f28:	08004f3d 	.word	0x08004f3d
 8004f2c:	08004f53 	.word	0x08004f53
 8004f30:	08004f71 	.word	0x08004f71
 8004f34:	08004f71 	.word	0x08004f71
 8004f38:	08004f71 	.word	0x08004f71
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f40:	3308      	adds	r3, #8
 8004f42:	2101      	movs	r1, #1
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 ff55 	bl	8005df4 <RCCEx_PLL2_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f50:	e00f      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f56:	3328      	adds	r3, #40	; 0x28
 8004f58:	2101      	movs	r1, #1
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fffc 	bl	8005f58 <RCCEx_PLL3_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f66:	e004      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004f6e:	e000      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10a      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f7a:	4b96      	ldr	r3, [pc, #600]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	f023 0107 	bic.w	r1, r3, #7
 8004f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f88:	4a92      	ldr	r2, [pc, #584]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	6553      	str	r3, [r2, #84]	; 0x54
 8004f8e:	e003      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f002 0304 	and.w	r3, r2, #4
 8004fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fae:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	d044      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc0:	2b05      	cmp	r3, #5
 8004fc2:	d825      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004fc4:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08005019 	.word	0x08005019
 8004fd0:	08004fe5 	.word	0x08004fe5
 8004fd4:	08004ffb 	.word	0x08004ffb
 8004fd8:	08005019 	.word	0x08005019
 8004fdc:	08005019 	.word	0x08005019
 8004fe0:	08005019 	.word	0x08005019
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fe8:	3308      	adds	r3, #8
 8004fea:	2101      	movs	r1, #1
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 ff01 	bl	8005df4 <RCCEx_PLL2_Config>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ff8:	e00f      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ffe:	3328      	adds	r3, #40	; 0x28
 8005000:	2101      	movs	r1, #1
 8005002:	4618      	mov	r0, r3
 8005004:	f000 ffa8 	bl	8005f58 <RCCEx_PLL3_Config>
 8005008:	4603      	mov	r3, r0
 800500a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800500e:	e004      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005016:	e000      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800501a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10b      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005022:	4b6c      	ldr	r3, [pc, #432]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005026:	f023 0107 	bic.w	r1, r3, #7
 800502a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	4a68      	ldr	r2, [pc, #416]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005034:	430b      	orrs	r3, r1
 8005036:	6593      	str	r3, [r2, #88]	; 0x58
 8005038:	e003      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800503e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	f002 0320 	and.w	r3, r2, #32
 800504e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005052:	2300      	movs	r3, #0
 8005054:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005058:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800505c:	460b      	mov	r3, r1
 800505e:	4313      	orrs	r3, r2
 8005060:	d055      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800506a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800506e:	d033      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005074:	d82c      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507a:	d02f      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800507c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005080:	d826      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005082:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005086:	d02b      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005088:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800508c:	d820      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800508e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005092:	d012      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005098:	d81a      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d022      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800509e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050a2:	d115      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a8:	3308      	adds	r3, #8
 80050aa:	2100      	movs	r1, #0
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fea1 	bl	8005df4 <RCCEx_PLL2_Config>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80050b8:	e015      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050be:	3328      	adds	r3, #40	; 0x28
 80050c0:	2102      	movs	r1, #2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 ff48 	bl	8005f58 <RCCEx_PLL3_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80050ce:	e00a      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80050d6:	e006      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050d8:	bf00      	nop
 80050da:	e004      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050dc:	bf00      	nop
 80050de:	e002      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050e0:	bf00      	nop
 80050e2:	e000      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80050e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10b      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050ee:	4b39      	ldr	r3, [pc, #228]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80050f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050fe:	4a35      	ldr	r2, [pc, #212]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005100:	430b      	orrs	r3, r1
 8005102:	6553      	str	r3, [r2, #84]	; 0x54
 8005104:	e003      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005106:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800510a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800510e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800511a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800511e:	2300      	movs	r3, #0
 8005120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005124:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005128:	460b      	mov	r3, r1
 800512a:	4313      	orrs	r3, r2
 800512c:	d058      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800512e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005132:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005136:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800513a:	d033      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800513c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005140:	d82c      	bhi.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005146:	d02f      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514c:	d826      	bhi.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800514e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005152:	d02b      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005154:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005158:	d820      	bhi.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800515a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515e:	d012      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005164:	d81a      	bhi.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d022      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800516a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516e:	d115      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005174:	3308      	adds	r3, #8
 8005176:	2100      	movs	r1, #0
 8005178:	4618      	mov	r0, r3
 800517a:	f000 fe3b 	bl	8005df4 <RCCEx_PLL2_Config>
 800517e:	4603      	mov	r3, r0
 8005180:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005184:	e015      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800518a:	3328      	adds	r3, #40	; 0x28
 800518c:	2102      	movs	r1, #2
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fee2 	bl	8005f58 <RCCEx_PLL3_Config>
 8005194:	4603      	mov	r3, r0
 8005196:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800519a:	e00a      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80051a2:	e006      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80051a4:	bf00      	nop
 80051a6:	e004      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80051a8:	bf00      	nop
 80051aa:	e002      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80051ac:	bf00      	nop
 80051ae:	e000      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80051b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10e      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051ba:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051be:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80051c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051ca:	4a02      	ldr	r2, [pc, #8]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051cc:	430b      	orrs	r3, r1
 80051ce:	6593      	str	r3, [r2, #88]	; 0x58
 80051d0:	e006      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80051d2:	bf00      	nop
 80051d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80051e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80051ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051f0:	2300      	movs	r3, #0
 80051f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80051fa:	460b      	mov	r3, r1
 80051fc:	4313      	orrs	r3, r2
 80051fe:	d055      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005204:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005208:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800520c:	d033      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800520e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005212:	d82c      	bhi.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005218:	d02f      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800521a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800521e:	d826      	bhi.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005220:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005224:	d02b      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005226:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800522a:	d820      	bhi.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800522c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005230:	d012      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005232:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005236:	d81a      	bhi.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005238:	2b00      	cmp	r3, #0
 800523a:	d022      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800523c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005240:	d115      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005246:	3308      	adds	r3, #8
 8005248:	2100      	movs	r1, #0
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fdd2 	bl	8005df4 <RCCEx_PLL2_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005256:	e015      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525c:	3328      	adds	r3, #40	; 0x28
 800525e:	2102      	movs	r1, #2
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fe79 	bl	8005f58 <RCCEx_PLL3_Config>
 8005266:	4603      	mov	r3, r0
 8005268:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800526c:	e00a      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005274:	e006      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005276:	bf00      	nop
 8005278:	e004      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800527a:	bf00      	nop
 800527c:	e002      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800527e:	bf00      	nop
 8005280:	e000      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005284:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10b      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800528c:	4ba0      	ldr	r3, [pc, #640]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800528e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005290:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005298:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800529c:	4a9c      	ldr	r2, [pc, #624]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800529e:	430b      	orrs	r3, r1
 80052a0:	6593      	str	r3, [r2, #88]	; 0x58
 80052a2:	e003      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80052ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	f002 0308 	and.w	r3, r2, #8
 80052b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052bc:	2300      	movs	r3, #0
 80052be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052c2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80052c6:	460b      	mov	r3, r1
 80052c8:	4313      	orrs	r3, r2
 80052ca:	d01e      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80052cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d8:	d10c      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052de:	3328      	adds	r3, #40	; 0x28
 80052e0:	2102      	movs	r1, #2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fe38 	bl	8005f58 <RCCEx_PLL3_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80052f4:	4b86      	ldr	r3, [pc, #536]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005304:	4a82      	ldr	r2, [pc, #520]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005306:	430b      	orrs	r3, r1
 8005308:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005312:	f002 0310 	and.w	r3, r2, #16
 8005316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800531a:	2300      	movs	r3, #0
 800531c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005320:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005324:	460b      	mov	r3, r1
 8005326:	4313      	orrs	r3, r2
 8005328:	d01e      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800532a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800532e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005336:	d10c      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800533c:	3328      	adds	r3, #40	; 0x28
 800533e:	2102      	movs	r1, #2
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fe09 	bl	8005f58 <RCCEx_PLL3_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005352:	4b6f      	ldr	r3, [pc, #444]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005356:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800535a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800535e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005362:	4a6b      	ldr	r2, [pc, #428]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005364:	430b      	orrs	r3, r1
 8005366:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005374:	67bb      	str	r3, [r7, #120]	; 0x78
 8005376:	2300      	movs	r3, #0
 8005378:	67fb      	str	r3, [r7, #124]	; 0x7c
 800537a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800537e:	460b      	mov	r3, r1
 8005380:	4313      	orrs	r3, r2
 8005382:	d03e      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005388:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800538c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005390:	d022      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005392:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005396:	d81b      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800539c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a0:	d00b      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80053a2:	e015      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a8:	3308      	adds	r3, #8
 80053aa:	2100      	movs	r1, #0
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fd21 	bl	8005df4 <RCCEx_PLL2_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80053b8:	e00f      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053be:	3328      	adds	r3, #40	; 0x28
 80053c0:	2102      	movs	r1, #2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fdc8 	bl	8005f58 <RCCEx_PLL3_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80053ce:	e004      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80053d6:	e000      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80053d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10b      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053e2:	4b4b      	ldr	r3, [pc, #300]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80053ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053f2:	4a47      	ldr	r2, [pc, #284]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053f4:	430b      	orrs	r3, r1
 80053f6:	6593      	str	r3, [r2, #88]	; 0x58
 80053f8:	e003      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800540e:	673b      	str	r3, [r7, #112]	; 0x70
 8005410:	2300      	movs	r3, #0
 8005412:	677b      	str	r3, [r7, #116]	; 0x74
 8005414:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005418:	460b      	mov	r3, r1
 800541a:	4313      	orrs	r3, r2
 800541c:	d03b      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800541e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005426:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800542a:	d01f      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800542c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005430:	d818      	bhi.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005436:	d003      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005438:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800543c:	d007      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800543e:	e011      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005440:	4b33      	ldr	r3, [pc, #204]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	4a32      	ldr	r2, [pc, #200]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800544a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800544c:	e00f      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800544e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005452:	3328      	adds	r3, #40	; 0x28
 8005454:	2101      	movs	r1, #1
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fd7e 	bl	8005f58 <RCCEx_PLL3_Config>
 800545c:	4603      	mov	r3, r0
 800545e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005462:	e004      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800546a:	e000      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800546c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10b      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005476:	4b26      	ldr	r3, [pc, #152]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800547e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005486:	4a22      	ldr	r2, [pc, #136]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005488:	430b      	orrs	r3, r1
 800548a:	6553      	str	r3, [r2, #84]	; 0x54
 800548c:	e003      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005492:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80054a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80054a4:	2300      	movs	r3, #0
 80054a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054a8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80054ac:	460b      	mov	r3, r1
 80054ae:	4313      	orrs	r3, r2
 80054b0:	d034      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80054b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80054bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c0:	d007      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80054c2:	e011      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c4:	4b12      	ldr	r3, [pc, #72]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	4a11      	ldr	r2, [pc, #68]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80054d0:	e00e      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054d6:	3308      	adds	r3, #8
 80054d8:	2102      	movs	r1, #2
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fc8a 	bl	8005df4 <RCCEx_PLL2_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80054e6:	e003      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80054ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10d      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80054f8:	4b05      	ldr	r3, [pc, #20]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005506:	4a02      	ldr	r2, [pc, #8]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005508:	430b      	orrs	r3, r1
 800550a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800550c:	e006      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800550e:	bf00      	nop
 8005510:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005514:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005518:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800551c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005528:	663b      	str	r3, [r7, #96]	; 0x60
 800552a:	2300      	movs	r3, #0
 800552c:	667b      	str	r3, [r7, #100]	; 0x64
 800552e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005532:	460b      	mov	r3, r1
 8005534:	4313      	orrs	r3, r2
 8005536:	d00c      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800553c:	3328      	adds	r3, #40	; 0x28
 800553e:	2102      	movs	r1, #2
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fd09 	bl	8005f58 <RCCEx_PLL3_Config>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800555e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005560:	2300      	movs	r3, #0
 8005562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005564:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005568:	460b      	mov	r3, r1
 800556a:	4313      	orrs	r3, r2
 800556c:	d036      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800556e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005574:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005578:	d018      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800557a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800557e:	d811      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005584:	d014      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800558a:	d80b      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d011      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005594:	d106      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005596:	4bb7      	ldr	r3, [pc, #732]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	4ab6      	ldr	r2, [pc, #728]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800559c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80055a2:	e008      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80055aa:	e004      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80055ac:	bf00      	nop
 80055ae:	e002      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80055b0:	bf00      	nop
 80055b2:	e000      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80055b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055be:	4bad      	ldr	r3, [pc, #692]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055cc:	4aa9      	ldr	r2, [pc, #676]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055ce:	430b      	orrs	r3, r1
 80055d0:	6553      	str	r3, [r2, #84]	; 0x54
 80055d2:	e003      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80055d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80055e8:	653b      	str	r3, [r7, #80]	; 0x50
 80055ea:	2300      	movs	r3, #0
 80055ec:	657b      	str	r3, [r7, #84]	; 0x54
 80055ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80055f2:	460b      	mov	r3, r1
 80055f4:	4313      	orrs	r3, r2
 80055f6:	d009      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055f8:	4b9e      	ldr	r3, [pc, #632]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	4a9b      	ldr	r2, [pc, #620]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005608:	430b      	orrs	r3, r1
 800560a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800560c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005618:	64bb      	str	r3, [r7, #72]	; 0x48
 800561a:	2300      	movs	r3, #0
 800561c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800561e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005622:	460b      	mov	r3, r1
 8005624:	4313      	orrs	r3, r2
 8005626:	d009      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005628:	4b92      	ldr	r3, [pc, #584]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800562a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800562c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005636:	4a8f      	ldr	r2, [pc, #572]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005638:	430b      	orrs	r3, r1
 800563a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800563c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005648:	643b      	str	r3, [r7, #64]	; 0x40
 800564a:	2300      	movs	r3, #0
 800564c:	647b      	str	r3, [r7, #68]	; 0x44
 800564e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005652:	460b      	mov	r3, r1
 8005654:	4313      	orrs	r3, r2
 8005656:	d00e      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005658:	4b86      	ldr	r3, [pc, #536]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	4a85      	ldr	r2, [pc, #532]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800565e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005662:	6113      	str	r3, [r2, #16]
 8005664:	4b83      	ldr	r3, [pc, #524]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005666:	6919      	ldr	r1, [r3, #16]
 8005668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005670:	4a80      	ldr	r2, [pc, #512]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005672:	430b      	orrs	r3, r1
 8005674:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005682:	63bb      	str	r3, [r7, #56]	; 0x38
 8005684:	2300      	movs	r3, #0
 8005686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005688:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800568c:	460b      	mov	r3, r1
 800568e:	4313      	orrs	r3, r2
 8005690:	d009      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005692:	4b78      	ldr	r3, [pc, #480]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005696:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800569a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800569e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a0:	4a74      	ldr	r2, [pc, #464]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056a2:	430b      	orrs	r3, r1
 80056a4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80056b2:	633b      	str	r3, [r7, #48]	; 0x30
 80056b4:	2300      	movs	r3, #0
 80056b6:	637b      	str	r3, [r7, #52]	; 0x34
 80056b8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80056bc:	460b      	mov	r3, r1
 80056be:	4313      	orrs	r3, r2
 80056c0:	d00a      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056c2:	4b6c      	ldr	r3, [pc, #432]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80056ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d2:	4a68      	ldr	r2, [pc, #416]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80056d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	2100      	movs	r1, #0
 80056e2:	62b9      	str	r1, [r7, #40]	; 0x28
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80056ee:	460b      	mov	r3, r1
 80056f0:	4313      	orrs	r3, r2
 80056f2:	d011      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f8:	3308      	adds	r3, #8
 80056fa:	2100      	movs	r1, #0
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fb79 	bl	8005df4 <RCCEx_PLL2_Config>
 8005702:	4603      	mov	r3, r0
 8005704:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005708:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005714:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	2100      	movs	r1, #0
 8005722:	6239      	str	r1, [r7, #32]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
 800572a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	d011      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005738:	3308      	adds	r3, #8
 800573a:	2101      	movs	r1, #1
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fb59 	bl	8005df4 <RCCEx_PLL2_Config>
 8005742:	4603      	mov	r3, r0
 8005744:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005748:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005750:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005754:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	2100      	movs	r1, #0
 8005762:	61b9      	str	r1, [r7, #24]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	61fb      	str	r3, [r7, #28]
 800576a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800576e:	460b      	mov	r3, r1
 8005770:	4313      	orrs	r3, r2
 8005772:	d011      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005778:	3308      	adds	r3, #8
 800577a:	2102      	movs	r1, #2
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fb39 	bl	8005df4 <RCCEx_PLL2_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005788:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005790:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005794:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a0:	2100      	movs	r1, #0
 80057a2:	6139      	str	r1, [r7, #16]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80057ae:	460b      	mov	r3, r1
 80057b0:	4313      	orrs	r3, r2
 80057b2:	d011      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b8:	3328      	adds	r3, #40	; 0x28
 80057ba:	2100      	movs	r1, #0
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 fbcb 	bl	8005f58 <RCCEx_PLL3_Config>
 80057c2:	4603      	mov	r3, r0
 80057c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80057c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80057d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	2100      	movs	r1, #0
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057ee:	460b      	mov	r3, r1
 80057f0:	4313      	orrs	r3, r2
 80057f2:	d011      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f8:	3328      	adds	r3, #40	; 0x28
 80057fa:	2101      	movs	r1, #1
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fbab 	bl	8005f58 <RCCEx_PLL3_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005808:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005810:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005814:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	2100      	movs	r1, #0
 8005822:	6039      	str	r1, [r7, #0]
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	607b      	str	r3, [r7, #4]
 800582a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800582e:	460b      	mov	r3, r1
 8005830:	4313      	orrs	r3, r2
 8005832:	d011      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005838:	3328      	adds	r3, #40	; 0x28
 800583a:	2102      	movs	r1, #2
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fb8b 	bl	8005f58 <RCCEx_PLL3_Config>
 8005842:	4603      	mov	r3, r0
 8005844:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005848:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005850:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005854:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8005858:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	e000      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
}
 8005866:	4618      	mov	r0, r3
 8005868:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800586c:	46bd      	mov	sp, r7
 800586e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005872:	bf00      	nop
 8005874:	58024400 	.word	0x58024400

08005878 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800587c:	f7fe fe00 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 8005880:	4602      	mov	r2, r0
 8005882:	4b06      	ldr	r3, [pc, #24]	; (800589c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	091b      	lsrs	r3, r3, #4
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	4904      	ldr	r1, [pc, #16]	; (80058a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800588e:	5ccb      	ldrb	r3, [r1, r3]
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005898:	4618      	mov	r0, r3
 800589a:	bd80      	pop	{r7, pc}
 800589c:	58024400 	.word	0x58024400
 80058a0:	0800d068 	.word	0x0800d068

080058a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b089      	sub	sp, #36	; 0x24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058ac:	4ba1      	ldr	r3, [pc, #644]	; (8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	f003 0303 	and.w	r3, r3, #3
 80058b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80058b6:	4b9f      	ldr	r3, [pc, #636]	; (8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	0b1b      	lsrs	r3, r3, #12
 80058bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80058c2:	4b9c      	ldr	r3, [pc, #624]	; (8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80058ce:	4b99      	ldr	r3, [pc, #612]	; (8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d2:	08db      	lsrs	r3, r3, #3
 80058d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	fb02 f303 	mul.w	r3, r2, r3
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8111 	beq.w	8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	f000 8083 	beq.w	8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	f200 80a1 	bhi.w	8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d056      	beq.n	80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800590e:	e099      	b.n	8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005910:	4b88      	ldr	r3, [pc, #544]	; (8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	d02d      	beq.n	8005978 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800591c:	4b85      	ldr	r3, [pc, #532]	; (8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	08db      	lsrs	r3, r3, #3
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	4a84      	ldr	r2, [pc, #528]	; (8005b38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005928:	fa22 f303 	lsr.w	r3, r2, r3
 800592c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	ee07 3a90 	vmov	s15, r3
 8005934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005946:	4b7b      	ldr	r3, [pc, #492]	; (8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005956:	ed97 6a03 	vldr	s12, [r7, #12]
 800595a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800595e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800596a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005972:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005976:	e087      	b.n	8005a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005982:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800598a:	4b6a      	ldr	r3, [pc, #424]	; (8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800599a:	ed97 6a03 	vldr	s12, [r7, #12]
 800599e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059ba:	e065      	b.n	8005a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80059ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ce:	4b59      	ldr	r3, [pc, #356]	; (8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059de:	ed97 6a03 	vldr	s12, [r7, #12]
 80059e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059fe:	e043      	b.n	8005a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a12:	4b48      	ldr	r3, [pc, #288]	; (8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a42:	e021      	b.n	8005a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a56:	4b37      	ldr	r3, [pc, #220]	; (8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005a88:	4b2a      	ldr	r3, [pc, #168]	; (8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	0a5b      	lsrs	r3, r3, #9
 8005a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005aa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aae:	ee17 2a90 	vmov	r2, s15
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005ab6:	4b1f      	ldr	r3, [pc, #124]	; (8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	0c1b      	lsrs	r3, r3, #16
 8005abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac0:	ee07 3a90 	vmov	s15, r3
 8005ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005acc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ad0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005adc:	ee17 2a90 	vmov	r2, s15
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005ae4:	4b13      	ldr	r3, [pc, #76]	; (8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	0e1b      	lsrs	r3, r3, #24
 8005aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005afa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005afe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b0a:	ee17 2a90 	vmov	r2, s15
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b12:	e008      	b.n	8005b26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	609a      	str	r2, [r3, #8]
}
 8005b26:	bf00      	nop
 8005b28:	3724      	adds	r7, #36	; 0x24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	58024400 	.word	0x58024400
 8005b38:	03d09000 	.word	0x03d09000
 8005b3c:	46000000 	.word	0x46000000
 8005b40:	4c742400 	.word	0x4c742400
 8005b44:	4a742400 	.word	0x4a742400
 8005b48:	4af42400 	.word	0x4af42400

08005b4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b089      	sub	sp, #36	; 0x24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b54:	4ba1      	ldr	r3, [pc, #644]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	f003 0303 	and.w	r3, r3, #3
 8005b5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005b5e:	4b9f      	ldr	r3, [pc, #636]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	0d1b      	lsrs	r3, r3, #20
 8005b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b6a:	4b9c      	ldr	r3, [pc, #624]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b76:	4b99      	ldr	r3, [pc, #612]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7a:	08db      	lsrs	r3, r3, #3
 8005b7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 8111 	beq.w	8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	f000 8083 	beq.w	8005ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	f200 80a1 	bhi.w	8005cec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d056      	beq.n	8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005bb6:	e099      	b.n	8005cec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bb8:	4b88      	ldr	r3, [pc, #544]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d02d      	beq.n	8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bc4:	4b85      	ldr	r3, [pc, #532]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	08db      	lsrs	r3, r3, #3
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	4a84      	ldr	r2, [pc, #528]	; (8005de0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	ee07 3a90 	vmov	s15, r3
 8005bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bee:	4b7b      	ldr	r3, [pc, #492]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c02:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005de4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c1e:	e087      	b.n	8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c32:	4b6a      	ldr	r3, [pc, #424]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c46:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005de4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c62:	e065      	b.n	8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c76:	4b59      	ldr	r3, [pc, #356]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005de4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ca6:	e043      	b.n	8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005df0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cba:	4b48      	ldr	r3, [pc, #288]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cce:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005de4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cea:	e021      	b.n	8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005dec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cfe:	4b37      	ldr	r3, [pc, #220]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005de4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005d30:	4b2a      	ldr	r3, [pc, #168]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	0a5b      	lsrs	r3, r3, #9
 8005d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d56:	ee17 2a90 	vmov	r2, s15
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005d5e:	4b1f      	ldr	r3, [pc, #124]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	0c1b      	lsrs	r3, r3, #16
 8005d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d68:	ee07 3a90 	vmov	s15, r3
 8005d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d78:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d84:	ee17 2a90 	vmov	r2, s15
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005d8c:	4b13      	ldr	r3, [pc, #76]	; (8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	0e1b      	lsrs	r3, r3, #24
 8005d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005da2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005db2:	ee17 2a90 	vmov	r2, s15
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005dba:	e008      	b.n	8005dce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	609a      	str	r2, [r3, #8]
}
 8005dce:	bf00      	nop
 8005dd0:	3724      	adds	r7, #36	; 0x24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	58024400 	.word	0x58024400
 8005de0:	03d09000 	.word	0x03d09000
 8005de4:	46000000 	.word	0x46000000
 8005de8:	4c742400 	.word	0x4c742400
 8005dec:	4a742400 	.word	0x4a742400
 8005df0:	4af42400 	.word	0x4af42400

08005df4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e02:	4b53      	ldr	r3, [pc, #332]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d101      	bne.n	8005e12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e099      	b.n	8005f46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005e12:	4b4f      	ldr	r3, [pc, #316]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a4e      	ldr	r2, [pc, #312]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e1e:	f7fb ff33 	bl	8001c88 <HAL_GetTick>
 8005e22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e24:	e008      	b.n	8005e38 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e26:	f7fb ff2f 	bl	8001c88 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e086      	b.n	8005f46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e38:	4b45      	ldr	r3, [pc, #276]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1f0      	bne.n	8005e26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e44:	4b42      	ldr	r3, [pc, #264]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	031b      	lsls	r3, r3, #12
 8005e52:	493f      	ldr	r1, [pc, #252]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	628b      	str	r3, [r1, #40]	; 0x28
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	025b      	lsls	r3, r3, #9
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	041b      	lsls	r3, r3, #16
 8005e76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	061b      	lsls	r3, r3, #24
 8005e84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e88:	4931      	ldr	r1, [pc, #196]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e8e:	4b30      	ldr	r3, [pc, #192]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	492d      	ldr	r1, [pc, #180]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	f023 0220 	bic.w	r2, r3, #32
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	4928      	ldr	r1, [pc, #160]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005eb2:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	4a26      	ldr	r2, [pc, #152]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005eb8:	f023 0310 	bic.w	r3, r3, #16
 8005ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ebe:	4b24      	ldr	r3, [pc, #144]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005ec0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ec2:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <RCCEx_PLL2_Config+0x160>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	69d2      	ldr	r2, [r2, #28]
 8005eca:	00d2      	lsls	r2, r2, #3
 8005ecc:	4920      	ldr	r1, [pc, #128]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005ed2:	4b1f      	ldr	r3, [pc, #124]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	4a1e      	ldr	r2, [pc, #120]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005ed8:	f043 0310 	orr.w	r3, r3, #16
 8005edc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ee4:	4b1a      	ldr	r3, [pc, #104]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	4a19      	ldr	r2, [pc, #100]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005eea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ef0:	e00f      	b.n	8005f12 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d106      	bne.n	8005f06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ef8:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	4a14      	ldr	r2, [pc, #80]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f04:	e005      	b.n	8005f12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005f06:	4b12      	ldr	r3, [pc, #72]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0a:	4a11      	ldr	r2, [pc, #68]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005f12:	4b0f      	ldr	r3, [pc, #60]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a0e      	ldr	r2, [pc, #56]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005f18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f1e:	f7fb feb3 	bl	8001c88 <HAL_GetTick>
 8005f22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f24:	e008      	b.n	8005f38 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f26:	f7fb feaf 	bl	8001c88 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e006      	b.n	8005f46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f38:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <RCCEx_PLL2_Config+0x15c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0f0      	beq.n	8005f26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	58024400 	.word	0x58024400
 8005f54:	ffff0007 	.word	0xffff0007

08005f58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f66:	4b53      	ldr	r3, [pc, #332]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d101      	bne.n	8005f76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e099      	b.n	80060aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f76:	4b4f      	ldr	r3, [pc, #316]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a4e      	ldr	r2, [pc, #312]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f82:	f7fb fe81 	bl	8001c88 <HAL_GetTick>
 8005f86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f88:	e008      	b.n	8005f9c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f8a:	f7fb fe7d 	bl	8001c88 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e086      	b.n	80060aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f9c:	4b45      	ldr	r3, [pc, #276]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1f0      	bne.n	8005f8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005fa8:	4b42      	ldr	r3, [pc, #264]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	051b      	lsls	r3, r3, #20
 8005fb6:	493f      	ldr	r1, [pc, #252]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	628b      	str	r3, [r1, #40]	; 0x28
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	025b      	lsls	r3, r3, #9
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	041b      	lsls	r3, r3, #16
 8005fda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	061b      	lsls	r3, r3, #24
 8005fe8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fec:	4931      	ldr	r1, [pc, #196]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ff2:	4b30      	ldr	r3, [pc, #192]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	492d      	ldr	r1, [pc, #180]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006000:	4313      	orrs	r3, r2
 8006002:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006004:	4b2b      	ldr	r3, [pc, #172]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	4928      	ldr	r1, [pc, #160]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006012:	4313      	orrs	r3, r2
 8006014:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006016:	4b27      	ldr	r3, [pc, #156]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	4a26      	ldr	r2, [pc, #152]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800601c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006020:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006022:	4b24      	ldr	r3, [pc, #144]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006026:	4b24      	ldr	r3, [pc, #144]	; (80060b8 <RCCEx_PLL3_Config+0x160>)
 8006028:	4013      	ands	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	69d2      	ldr	r2, [r2, #28]
 800602e:	00d2      	lsls	r2, r2, #3
 8006030:	4920      	ldr	r1, [pc, #128]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006032:	4313      	orrs	r3, r2
 8006034:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006036:	4b1f      	ldr	r3, [pc, #124]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	4a1e      	ldr	r2, [pc, #120]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800603c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006040:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d106      	bne.n	8006056 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006048:	4b1a      	ldr	r3, [pc, #104]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	4a19      	ldr	r2, [pc, #100]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800604e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006052:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006054:	e00f      	b.n	8006076 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d106      	bne.n	800606a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800605c:	4b15      	ldr	r3, [pc, #84]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	4a14      	ldr	r2, [pc, #80]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006062:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006066:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006068:	e005      	b.n	8006076 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800606a:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606e:	4a11      	ldr	r2, [pc, #68]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006070:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006074:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006076:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a0e      	ldr	r2, [pc, #56]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800607c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006082:	f7fb fe01 	bl	8001c88 <HAL_GetTick>
 8006086:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006088:	e008      	b.n	800609c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800608a:	f7fb fdfd 	bl	8001c88 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d901      	bls.n	800609c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e006      	b.n	80060aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800609c:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <RCCEx_PLL3_Config+0x15c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0f0      	beq.n	800608a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	58024400 	.word	0x58024400
 80060b8:	ffff0007 	.word	0xffff0007

080060bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e049      	b.n	8006162 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fb fa1c 	bl	8001520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3304      	adds	r3, #4
 80060f8:	4619      	mov	r1, r3
 80060fa:	4610      	mov	r0, r2
 80060fc:	f000 fafc 	bl	80066f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b01      	cmp	r3, #1
 800617e:	d001      	beq.n	8006184 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e05e      	b.n	8006242 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0201 	orr.w	r2, r2, #1
 800619a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a2b      	ldr	r2, [pc, #172]	; (8006250 <HAL_TIM_Base_Start_IT+0xe4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d02c      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x94>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ae:	d027      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x94>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a27      	ldr	r2, [pc, #156]	; (8006254 <HAL_TIM_Base_Start_IT+0xe8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d022      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x94>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a26      	ldr	r2, [pc, #152]	; (8006258 <HAL_TIM_Base_Start_IT+0xec>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d01d      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x94>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a24      	ldr	r2, [pc, #144]	; (800625c <HAL_TIM_Base_Start_IT+0xf0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d018      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x94>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a23      	ldr	r2, [pc, #140]	; (8006260 <HAL_TIM_Base_Start_IT+0xf4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d013      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x94>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a21      	ldr	r2, [pc, #132]	; (8006264 <HAL_TIM_Base_Start_IT+0xf8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00e      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x94>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a20      	ldr	r2, [pc, #128]	; (8006268 <HAL_TIM_Base_Start_IT+0xfc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d009      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x94>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1e      	ldr	r2, [pc, #120]	; (800626c <HAL_TIM_Base_Start_IT+0x100>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d004      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x94>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1d      	ldr	r2, [pc, #116]	; (8006270 <HAL_TIM_Base_Start_IT+0x104>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d115      	bne.n	800622c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	4b1b      	ldr	r3, [pc, #108]	; (8006274 <HAL_TIM_Base_Start_IT+0x108>)
 8006208:	4013      	ands	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b06      	cmp	r3, #6
 8006210:	d015      	beq.n	800623e <HAL_TIM_Base_Start_IT+0xd2>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006218:	d011      	beq.n	800623e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f042 0201 	orr.w	r2, r2, #1
 8006228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622a:	e008      	b.n	800623e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0201 	orr.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	e000      	b.n	8006240 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	40010000 	.word	0x40010000
 8006254:	40000400 	.word	0x40000400
 8006258:	40000800 	.word	0x40000800
 800625c:	40000c00 	.word	0x40000c00
 8006260:	40010400 	.word	0x40010400
 8006264:	40001800 	.word	0x40001800
 8006268:	40014000 	.word	0x40014000
 800626c:	4000e000 	.word	0x4000e000
 8006270:	4000e400 	.word	0x4000e400
 8006274:	00010007 	.word	0x00010007

08006278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b02      	cmp	r3, #2
 800628c:	d122      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b02      	cmp	r3, #2
 800629a:	d11b      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0202 	mvn.w	r2, #2
 80062a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f9fe 	bl	80066bc <HAL_TIM_IC_CaptureCallback>
 80062c0:	e005      	b.n	80062ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f9f0 	bl	80066a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fa01 	bl	80066d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d122      	bne.n	8006328 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d11b      	bne.n	8006328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f06f 0204 	mvn.w	r2, #4
 80062f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2202      	movs	r2, #2
 80062fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f9d4 	bl	80066bc <HAL_TIM_IC_CaptureCallback>
 8006314:	e005      	b.n	8006322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f9c6 	bl	80066a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f9d7 	bl	80066d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	2b08      	cmp	r3, #8
 8006334:	d122      	bne.n	800637c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b08      	cmp	r3, #8
 8006342:	d11b      	bne.n	800637c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f06f 0208 	mvn.w	r2, #8
 800634c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2204      	movs	r2, #4
 8006352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f9aa 	bl	80066bc <HAL_TIM_IC_CaptureCallback>
 8006368:	e005      	b.n	8006376 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f99c 	bl	80066a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f9ad 	bl	80066d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f003 0310 	and.w	r3, r3, #16
 8006386:	2b10      	cmp	r3, #16
 8006388:	d122      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0310 	and.w	r3, r3, #16
 8006394:	2b10      	cmp	r3, #16
 8006396:	d11b      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f06f 0210 	mvn.w	r2, #16
 80063a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2208      	movs	r2, #8
 80063a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f980 	bl	80066bc <HAL_TIM_IC_CaptureCallback>
 80063bc:	e005      	b.n	80063ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f972 	bl	80066a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f983 	bl	80066d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d10e      	bne.n	80063fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d107      	bne.n	80063fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0201 	mvn.w	r2, #1
 80063f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fa ff80 	bl	80012fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006406:	2b80      	cmp	r3, #128	; 0x80
 8006408:	d10e      	bne.n	8006428 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006414:	2b80      	cmp	r3, #128	; 0x80
 8006416:	d107      	bne.n	8006428 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fb52 	bl	8006acc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006436:	d10e      	bne.n	8006456 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006442:	2b80      	cmp	r3, #128	; 0x80
 8006444:	d107      	bne.n	8006456 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800644e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fb45 	bl	8006ae0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	d10e      	bne.n	8006482 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646e:	2b40      	cmp	r3, #64	; 0x40
 8006470:	d107      	bne.n	8006482 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800647a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f931 	bl	80066e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b20      	cmp	r3, #32
 800648e:	d10e      	bne.n	80064ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b20      	cmp	r3, #32
 800649c:	d107      	bne.n	80064ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f06f 0220 	mvn.w	r2, #32
 80064a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fb05 	bl	8006ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064ae:	bf00      	nop
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <HAL_TIM_ConfigClockSource+0x1c>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e0dc      	b.n	800668e <HAL_TIM_ConfigClockSource+0x1d6>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	4b6a      	ldr	r3, [pc, #424]	; (8006698 <HAL_TIM_ConfigClockSource+0x1e0>)
 80064f0:	4013      	ands	r3, r2
 80064f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a64      	ldr	r2, [pc, #400]	; (800669c <HAL_TIM_ConfigClockSource+0x1e4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	f000 80a9 	beq.w	8006662 <HAL_TIM_ConfigClockSource+0x1aa>
 8006510:	4a62      	ldr	r2, [pc, #392]	; (800669c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	f200 80ae 	bhi.w	8006674 <HAL_TIM_ConfigClockSource+0x1bc>
 8006518:	4a61      	ldr	r2, [pc, #388]	; (80066a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	f000 80a1 	beq.w	8006662 <HAL_TIM_ConfigClockSource+0x1aa>
 8006520:	4a5f      	ldr	r2, [pc, #380]	; (80066a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	f200 80a6 	bhi.w	8006674 <HAL_TIM_ConfigClockSource+0x1bc>
 8006528:	4a5e      	ldr	r2, [pc, #376]	; (80066a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800652a:	4293      	cmp	r3, r2
 800652c:	f000 8099 	beq.w	8006662 <HAL_TIM_ConfigClockSource+0x1aa>
 8006530:	4a5c      	ldr	r2, [pc, #368]	; (80066a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006532:	4293      	cmp	r3, r2
 8006534:	f200 809e 	bhi.w	8006674 <HAL_TIM_ConfigClockSource+0x1bc>
 8006538:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800653c:	f000 8091 	beq.w	8006662 <HAL_TIM_ConfigClockSource+0x1aa>
 8006540:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006544:	f200 8096 	bhi.w	8006674 <HAL_TIM_ConfigClockSource+0x1bc>
 8006548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800654c:	f000 8089 	beq.w	8006662 <HAL_TIM_ConfigClockSource+0x1aa>
 8006550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006554:	f200 808e 	bhi.w	8006674 <HAL_TIM_ConfigClockSource+0x1bc>
 8006558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800655c:	d03e      	beq.n	80065dc <HAL_TIM_ConfigClockSource+0x124>
 800655e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006562:	f200 8087 	bhi.w	8006674 <HAL_TIM_ConfigClockSource+0x1bc>
 8006566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656a:	f000 8086 	beq.w	800667a <HAL_TIM_ConfigClockSource+0x1c2>
 800656e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006572:	d87f      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x1bc>
 8006574:	2b70      	cmp	r3, #112	; 0x70
 8006576:	d01a      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0xf6>
 8006578:	2b70      	cmp	r3, #112	; 0x70
 800657a:	d87b      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x1bc>
 800657c:	2b60      	cmp	r3, #96	; 0x60
 800657e:	d050      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x16a>
 8006580:	2b60      	cmp	r3, #96	; 0x60
 8006582:	d877      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x1bc>
 8006584:	2b50      	cmp	r3, #80	; 0x50
 8006586:	d03c      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x14a>
 8006588:	2b50      	cmp	r3, #80	; 0x50
 800658a:	d873      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x1bc>
 800658c:	2b40      	cmp	r3, #64	; 0x40
 800658e:	d058      	beq.n	8006642 <HAL_TIM_ConfigClockSource+0x18a>
 8006590:	2b40      	cmp	r3, #64	; 0x40
 8006592:	d86f      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x1bc>
 8006594:	2b30      	cmp	r3, #48	; 0x30
 8006596:	d064      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0x1aa>
 8006598:	2b30      	cmp	r3, #48	; 0x30
 800659a:	d86b      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x1bc>
 800659c:	2b20      	cmp	r3, #32
 800659e:	d060      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0x1aa>
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d867      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x1bc>
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d05c      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0x1aa>
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d05a      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0x1aa>
 80065ac:	e062      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	6899      	ldr	r1, [r3, #8]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f000 f9bf 	bl	8006940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	609a      	str	r2, [r3, #8]
      break;
 80065da:	e04f      	b.n	800667c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6818      	ldr	r0, [r3, #0]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	6899      	ldr	r1, [r3, #8]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f000 f9a8 	bl	8006940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065fe:	609a      	str	r2, [r3, #8]
      break;
 8006600:	e03c      	b.n	800667c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	6859      	ldr	r1, [r3, #4]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	461a      	mov	r2, r3
 8006610:	f000 f918 	bl	8006844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2150      	movs	r1, #80	; 0x50
 800661a:	4618      	mov	r0, r3
 800661c:	f000 f972 	bl	8006904 <TIM_ITRx_SetConfig>
      break;
 8006620:	e02c      	b.n	800667c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6818      	ldr	r0, [r3, #0]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	6859      	ldr	r1, [r3, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	461a      	mov	r2, r3
 8006630:	f000 f937 	bl	80068a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2160      	movs	r1, #96	; 0x60
 800663a:	4618      	mov	r0, r3
 800663c:	f000 f962 	bl	8006904 <TIM_ITRx_SetConfig>
      break;
 8006640:	e01c      	b.n	800667c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6818      	ldr	r0, [r3, #0]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	6859      	ldr	r1, [r3, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	461a      	mov	r2, r3
 8006650:	f000 f8f8 	bl	8006844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2140      	movs	r1, #64	; 0x40
 800665a:	4618      	mov	r0, r3
 800665c:	f000 f952 	bl	8006904 <TIM_ITRx_SetConfig>
      break;
 8006660:	e00c      	b.n	800667c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f000 f949 	bl	8006904 <TIM_ITRx_SetConfig>
      break;
 8006672:	e003      	b.n	800667c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	73fb      	strb	r3, [r7, #15]
      break;
 8006678:	e000      	b.n	800667c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800667a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	ffceff88 	.word	0xffceff88
 800669c:	00100040 	.word	0x00100040
 80066a0:	00100030 	.word	0x00100030
 80066a4:	00100020 	.word	0x00100020

080066a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a44      	ldr	r2, [pc, #272]	; (800681c <TIM_Base_SetConfig+0x124>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d013      	beq.n	8006738 <TIM_Base_SetConfig+0x40>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006716:	d00f      	beq.n	8006738 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a41      	ldr	r2, [pc, #260]	; (8006820 <TIM_Base_SetConfig+0x128>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00b      	beq.n	8006738 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a40      	ldr	r2, [pc, #256]	; (8006824 <TIM_Base_SetConfig+0x12c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d007      	beq.n	8006738 <TIM_Base_SetConfig+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a3f      	ldr	r2, [pc, #252]	; (8006828 <TIM_Base_SetConfig+0x130>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d003      	beq.n	8006738 <TIM_Base_SetConfig+0x40>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a3e      	ldr	r2, [pc, #248]	; (800682c <TIM_Base_SetConfig+0x134>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d108      	bne.n	800674a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a33      	ldr	r2, [pc, #204]	; (800681c <TIM_Base_SetConfig+0x124>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d027      	beq.n	80067a2 <TIM_Base_SetConfig+0xaa>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006758:	d023      	beq.n	80067a2 <TIM_Base_SetConfig+0xaa>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a30      	ldr	r2, [pc, #192]	; (8006820 <TIM_Base_SetConfig+0x128>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01f      	beq.n	80067a2 <TIM_Base_SetConfig+0xaa>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a2f      	ldr	r2, [pc, #188]	; (8006824 <TIM_Base_SetConfig+0x12c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d01b      	beq.n	80067a2 <TIM_Base_SetConfig+0xaa>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2e      	ldr	r2, [pc, #184]	; (8006828 <TIM_Base_SetConfig+0x130>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d017      	beq.n	80067a2 <TIM_Base_SetConfig+0xaa>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2d      	ldr	r2, [pc, #180]	; (800682c <TIM_Base_SetConfig+0x134>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d013      	beq.n	80067a2 <TIM_Base_SetConfig+0xaa>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2c      	ldr	r2, [pc, #176]	; (8006830 <TIM_Base_SetConfig+0x138>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00f      	beq.n	80067a2 <TIM_Base_SetConfig+0xaa>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a2b      	ldr	r2, [pc, #172]	; (8006834 <TIM_Base_SetConfig+0x13c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00b      	beq.n	80067a2 <TIM_Base_SetConfig+0xaa>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a2a      	ldr	r2, [pc, #168]	; (8006838 <TIM_Base_SetConfig+0x140>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d007      	beq.n	80067a2 <TIM_Base_SetConfig+0xaa>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a29      	ldr	r2, [pc, #164]	; (800683c <TIM_Base_SetConfig+0x144>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d003      	beq.n	80067a2 <TIM_Base_SetConfig+0xaa>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a28      	ldr	r2, [pc, #160]	; (8006840 <TIM_Base_SetConfig+0x148>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d108      	bne.n	80067b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a10      	ldr	r2, [pc, #64]	; (800681c <TIM_Base_SetConfig+0x124>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00f      	beq.n	8006800 <TIM_Base_SetConfig+0x108>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a12      	ldr	r2, [pc, #72]	; (800682c <TIM_Base_SetConfig+0x134>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00b      	beq.n	8006800 <TIM_Base_SetConfig+0x108>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a11      	ldr	r2, [pc, #68]	; (8006830 <TIM_Base_SetConfig+0x138>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_Base_SetConfig+0x108>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a10      	ldr	r2, [pc, #64]	; (8006834 <TIM_Base_SetConfig+0x13c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_Base_SetConfig+0x108>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <TIM_Base_SetConfig+0x140>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d103      	bne.n	8006808 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	615a      	str	r2, [r3, #20]
}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40010000 	.word	0x40010000
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40000c00 	.word	0x40000c00
 800682c:	40010400 	.word	0x40010400
 8006830:	40014000 	.word	0x40014000
 8006834:	40014400 	.word	0x40014400
 8006838:	40014800 	.word	0x40014800
 800683c:	4000e000 	.word	0x4000e000
 8006840:	4000e400 	.word	0x4000e400

08006844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	f023 0201 	bic.w	r2, r3, #1
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800686e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	011b      	lsls	r3, r3, #4
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	4313      	orrs	r3, r2
 8006878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f023 030a 	bic.w	r3, r3, #10
 8006880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	621a      	str	r2, [r3, #32]
}
 8006896:	bf00      	nop
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b087      	sub	sp, #28
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	60f8      	str	r0, [r7, #12]
 80068aa:	60b9      	str	r1, [r7, #8]
 80068ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	f023 0210 	bic.w	r2, r3, #16
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	031b      	lsls	r3, r3, #12
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	011b      	lsls	r3, r3, #4
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	621a      	str	r2, [r3, #32]
}
 80068f6:	bf00      	nop
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
	...

08006904 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4b09      	ldr	r3, [pc, #36]	; (800693c <TIM_ITRx_SetConfig+0x38>)
 8006918:	4013      	ands	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4313      	orrs	r3, r2
 8006922:	f043 0307 	orr.w	r3, r3, #7
 8006926:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	609a      	str	r2, [r3, #8]
}
 800692e:	bf00      	nop
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	ffcfff8f 	.word	0xffcfff8f

08006940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800695a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	021a      	lsls	r2, r3, #8
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	431a      	orrs	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4313      	orrs	r3, r2
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	609a      	str	r2, [r3, #8]
}
 8006974:	bf00      	nop
 8006976:	371c      	adds	r7, #28
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006990:	2b01      	cmp	r3, #1
 8006992:	d101      	bne.n	8006998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006994:	2302      	movs	r3, #2
 8006996:	e077      	b.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a35      	ldr	r2, [pc, #212]	; (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d004      	beq.n	80069cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a34      	ldr	r2, [pc, #208]	; (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d108      	bne.n	80069de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a25      	ldr	r2, [pc, #148]	; (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d02c      	beq.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0a:	d027      	beq.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a22      	ldr	r2, [pc, #136]	; (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d022      	beq.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a21      	ldr	r2, [pc, #132]	; (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d01d      	beq.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a1f      	ldr	r2, [pc, #124]	; (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d018      	beq.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a1a      	ldr	r2, [pc, #104]	; (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d013      	beq.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a1b      	ldr	r2, [pc, #108]	; (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00e      	beq.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1a      	ldr	r2, [pc, #104]	; (8006aac <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d009      	beq.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a18      	ldr	r2, [pc, #96]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d004      	beq.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a17      	ldr	r2, [pc, #92]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d10c      	bne.n	8006a76 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	40010000 	.word	0x40010000
 8006a98:	40010400 	.word	0x40010400
 8006a9c:	40000400 	.word	0x40000400
 8006aa0:	40000800 	.word	0x40000800
 8006aa4:	40000c00 	.word	0x40000c00
 8006aa8:	40001800 	.word	0x40001800
 8006aac:	40014000 	.word	0x40014000
 8006ab0:	4000e000 	.word	0x4000e000
 8006ab4:	4000e400 	.word	0x4000e400

08006ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e042      	b.n	8006b8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d106      	bne.n	8006b1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7fa fd7f 	bl	800161c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2224      	movs	r2, #36	; 0x24
 8006b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 0201 	bic.w	r2, r2, #1
 8006b34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fc94 	bl	8007464 <UART_SetConfig>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e022      	b.n	8006b8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 faf4 	bl	800813c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0201 	orr.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 fb7b 	bl	8008280 <UART_CheckIdleState>
 8006b8a:	4603      	mov	r3, r0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08a      	sub	sp, #40	; 0x28
 8006b98:	af02      	add	r7, sp, #8
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	603b      	str	r3, [r7, #0]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006baa:	2b20      	cmp	r3, #32
 8006bac:	d17b      	bne.n	8006ca6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <HAL_UART_Transmit+0x26>
 8006bb4:	88fb      	ldrh	r3, [r7, #6]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e074      	b.n	8006ca8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2221      	movs	r2, #33	; 0x21
 8006bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bce:	f7fb f85b 	bl	8001c88 <HAL_GetTick>
 8006bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	88fa      	ldrh	r2, [r7, #6]
 8006bd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	88fa      	ldrh	r2, [r7, #6]
 8006be0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bec:	d108      	bne.n	8006c00 <HAL_UART_Transmit+0x6c>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d104      	bne.n	8006c00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	e003      	b.n	8006c08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c08:	e030      	b.n	8006c6c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2200      	movs	r2, #0
 8006c12:	2180      	movs	r1, #128	; 0x80
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f001 fbdd 	bl	80083d4 <UART_WaitOnFlagUntilTimeout>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d005      	beq.n	8006c2c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e03d      	b.n	8006ca8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10b      	bne.n	8006c4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	3302      	adds	r3, #2
 8006c46:	61bb      	str	r3, [r7, #24]
 8006c48:	e007      	b.n	8006c5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	781a      	ldrb	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	3301      	adds	r3, #1
 8006c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	3b01      	subs	r3, #1
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1c8      	bne.n	8006c0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2140      	movs	r1, #64	; 0x40
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f001 fba6 	bl	80083d4 <UART_WaitOnFlagUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d005      	beq.n	8006c9a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e006      	b.n	8006ca8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	e000      	b.n	8006ca8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006ca6:	2302      	movs	r3, #2
  }
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3720      	adds	r7, #32
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b0ba      	sub	sp, #232	; 0xe8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006cd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006cda:	f640 030f 	movw	r3, #2063	; 0x80f
 8006cde:	4013      	ands	r3, r2
 8006ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ce4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d11b      	bne.n	8006d24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf0:	f003 0320 	and.w	r3, r3, #32
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d015      	beq.n	8006d24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d105      	bne.n	8006d10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d009      	beq.n	8006d24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 8377 	beq.w	8007408 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
      }
      return;
 8006d22:	e371      	b.n	8007408 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 8123 	beq.w	8006f74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006d2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d32:	4b8d      	ldr	r3, [pc, #564]	; (8006f68 <HAL_UART_IRQHandler+0x2b8>)
 8006d34:	4013      	ands	r3, r2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006d3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006d3e:	4b8b      	ldr	r3, [pc, #556]	; (8006f6c <HAL_UART_IRQHandler+0x2bc>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 8116 	beq.w	8006f74 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d011      	beq.n	8006d78 <HAL_UART_IRQHandler+0xc8>
 8006d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00b      	beq.n	8006d78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2201      	movs	r2, #1
 8006d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6e:	f043 0201 	orr.w	r2, r3, #1
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d011      	beq.n	8006da8 <HAL_UART_IRQHandler+0xf8>
 8006d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00b      	beq.n	8006da8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2202      	movs	r2, #2
 8006d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9e:	f043 0204 	orr.w	r2, r3, #4
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d011      	beq.n	8006dd8 <HAL_UART_IRQHandler+0x128>
 8006db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00b      	beq.n	8006dd8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dce:	f043 0202 	orr.w	r2, r3, #2
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d017      	beq.n	8006e14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d105      	bne.n	8006dfc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006df0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006df4:	4b5c      	ldr	r3, [pc, #368]	; (8006f68 <HAL_UART_IRQHandler+0x2b8>)
 8006df6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00b      	beq.n	8006e14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2208      	movs	r2, #8
 8006e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e0a:	f043 0208 	orr.w	r2, r3, #8
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d012      	beq.n	8006e46 <HAL_UART_IRQHandler+0x196>
 8006e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00c      	beq.n	8006e46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e3c:	f043 0220 	orr.w	r2, r3, #32
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 82dd 	beq.w	800740c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d013      	beq.n	8006e86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d105      	bne.n	8006e76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d007      	beq.n	8006e86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9a:	2b40      	cmp	r3, #64	; 0x40
 8006e9c:	d005      	beq.n	8006eaa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ea2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d054      	beq.n	8006f54 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 fafa 	bl	80084a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eba:	2b40      	cmp	r3, #64	; 0x40
 8006ebc:	d146      	bne.n	8006f4c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ecc:	e853 3f00 	ldrex	r3, [r3]
 8006ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006eea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ef6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1d9      	bne.n	8006ebe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d017      	beq.n	8006f44 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f1a:	4a15      	ldr	r2, [pc, #84]	; (8006f70 <HAL_UART_IRQHandler+0x2c0>)
 8006f1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fb fb21 	bl	800256c <HAL_DMA_Abort_IT>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d019      	beq.n	8006f64 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006f3e:	4610      	mov	r0, r2
 8006f40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f42:	e00f      	b.n	8006f64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fa77 	bl	8007438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f4a:	e00b      	b.n	8006f64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fa73 	bl	8007438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f52:	e007      	b.n	8006f64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fa6f 	bl	8007438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006f62:	e253      	b.n	800740c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f64:	bf00      	nop
    return;
 8006f66:	e251      	b.n	800740c <HAL_UART_IRQHandler+0x75c>
 8006f68:	10000001 	.word	0x10000001
 8006f6c:	04000120 	.word	0x04000120
 8006f70:	08008571 	.word	0x08008571

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	f040 81e7 	bne.w	800734c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f82:	f003 0310 	and.w	r3, r3, #16
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 81e0 	beq.w	800734c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f90:	f003 0310 	and.w	r3, r3, #16
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 81d9 	beq.w	800734c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2210      	movs	r2, #16
 8006fa0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fac:	2b40      	cmp	r3, #64	; 0x40
 8006fae:	f040 8151 	bne.w	8007254 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a96      	ldr	r2, [pc, #600]	; (8007214 <HAL_UART_IRQHandler+0x564>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d068      	beq.n	8007092 <HAL_UART_IRQHandler+0x3e2>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a93      	ldr	r2, [pc, #588]	; (8007218 <HAL_UART_IRQHandler+0x568>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d061      	beq.n	8007092 <HAL_UART_IRQHandler+0x3e2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a91      	ldr	r2, [pc, #580]	; (800721c <HAL_UART_IRQHandler+0x56c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d05a      	beq.n	8007092 <HAL_UART_IRQHandler+0x3e2>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a8e      	ldr	r2, [pc, #568]	; (8007220 <HAL_UART_IRQHandler+0x570>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d053      	beq.n	8007092 <HAL_UART_IRQHandler+0x3e2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a8c      	ldr	r2, [pc, #560]	; (8007224 <HAL_UART_IRQHandler+0x574>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d04c      	beq.n	8007092 <HAL_UART_IRQHandler+0x3e2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a89      	ldr	r2, [pc, #548]	; (8007228 <HAL_UART_IRQHandler+0x578>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d045      	beq.n	8007092 <HAL_UART_IRQHandler+0x3e2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a87      	ldr	r2, [pc, #540]	; (800722c <HAL_UART_IRQHandler+0x57c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d03e      	beq.n	8007092 <HAL_UART_IRQHandler+0x3e2>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a84      	ldr	r2, [pc, #528]	; (8007230 <HAL_UART_IRQHandler+0x580>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d037      	beq.n	8007092 <HAL_UART_IRQHandler+0x3e2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a82      	ldr	r2, [pc, #520]	; (8007234 <HAL_UART_IRQHandler+0x584>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d030      	beq.n	8007092 <HAL_UART_IRQHandler+0x3e2>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a7f      	ldr	r2, [pc, #508]	; (8007238 <HAL_UART_IRQHandler+0x588>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d029      	beq.n	8007092 <HAL_UART_IRQHandler+0x3e2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a7d      	ldr	r2, [pc, #500]	; (800723c <HAL_UART_IRQHandler+0x58c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d022      	beq.n	8007092 <HAL_UART_IRQHandler+0x3e2>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a7a      	ldr	r2, [pc, #488]	; (8007240 <HAL_UART_IRQHandler+0x590>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d01b      	beq.n	8007092 <HAL_UART_IRQHandler+0x3e2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a78      	ldr	r2, [pc, #480]	; (8007244 <HAL_UART_IRQHandler+0x594>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d014      	beq.n	8007092 <HAL_UART_IRQHandler+0x3e2>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a75      	ldr	r2, [pc, #468]	; (8007248 <HAL_UART_IRQHandler+0x598>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00d      	beq.n	8007092 <HAL_UART_IRQHandler+0x3e2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a73      	ldr	r2, [pc, #460]	; (800724c <HAL_UART_IRQHandler+0x59c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d006      	beq.n	8007092 <HAL_UART_IRQHandler+0x3e2>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a70      	ldr	r2, [pc, #448]	; (8007250 <HAL_UART_IRQHandler+0x5a0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d106      	bne.n	80070a0 <HAL_UART_IRQHandler+0x3f0>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	b29b      	uxth	r3, r3
 800709e:	e005      	b.n	80070ac <HAL_UART_IRQHandler+0x3fc>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 81ab 	beq.w	8007410 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070c4:	429a      	cmp	r2, r3
 80070c6:	f080 81a3 	bcs.w	8007410 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e0:	f000 8087 	beq.w	80071f2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007100:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	461a      	mov	r2, r3
 800710a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800710e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007112:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800711a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800711e:	e841 2300 	strex	r3, r2, [r1]
 8007122:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1da      	bne.n	80070e4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3308      	adds	r3, #8
 8007134:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800713e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007140:	f023 0301 	bic.w	r3, r3, #1
 8007144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3308      	adds	r3, #8
 800714e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007152:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007156:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800715a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e1      	bne.n	800712e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3308      	adds	r3, #8
 8007170:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800717a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800717c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3308      	adds	r3, #8
 800718a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800718e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007190:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007194:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800719c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e3      	bne.n	800716a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c0:	f023 0310 	bic.w	r3, r3, #16
 80071c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80071d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e4      	bne.n	80071b0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fa fe9f 	bl	8001f30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2202      	movs	r2, #2
 80071f6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007204:	b29b      	uxth	r3, r3
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	b29b      	uxth	r3, r3
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f91d 	bl	800744c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007212:	e0fd      	b.n	8007410 <HAL_UART_IRQHandler+0x760>
 8007214:	40020010 	.word	0x40020010
 8007218:	40020028 	.word	0x40020028
 800721c:	40020040 	.word	0x40020040
 8007220:	40020058 	.word	0x40020058
 8007224:	40020070 	.word	0x40020070
 8007228:	40020088 	.word	0x40020088
 800722c:	400200a0 	.word	0x400200a0
 8007230:	400200b8 	.word	0x400200b8
 8007234:	40020410 	.word	0x40020410
 8007238:	40020428 	.word	0x40020428
 800723c:	40020440 	.word	0x40020440
 8007240:	40020458 	.word	0x40020458
 8007244:	40020470 	.word	0x40020470
 8007248:	40020488 	.word	0x40020488
 800724c:	400204a0 	.word	0x400204a0
 8007250:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007260:	b29b      	uxth	r3, r3
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800726e:	b29b      	uxth	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 80cf 	beq.w	8007414 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007276:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 80ca 	beq.w	8007414 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800728e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007294:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	461a      	mov	r2, r3
 800729e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072a2:	647b      	str	r3, [r7, #68]	; 0x44
 80072a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e4      	bne.n	8007280 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3308      	adds	r3, #8
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	623b      	str	r3, [r7, #32]
   return(result);
 80072c6:	6a3a      	ldr	r2, [r7, #32]
 80072c8:	4b55      	ldr	r3, [pc, #340]	; (8007420 <HAL_UART_IRQHandler+0x770>)
 80072ca:	4013      	ands	r3, r2
 80072cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3308      	adds	r3, #8
 80072d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072da:	633a      	str	r2, [r7, #48]	; 0x30
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1e3      	bne.n	80072b6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f023 0310 	bic.w	r3, r3, #16
 8007316:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007324:	61fb      	str	r3, [r7, #28]
 8007326:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	69b9      	ldr	r1, [r7, #24]
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	617b      	str	r3, [r7, #20]
   return(result);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e4      	bne.n	8007302 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800733e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f881 	bl	800744c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800734a:	e063      	b.n	8007414 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800734c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00e      	beq.n	8007376 <HAL_UART_IRQHandler+0x6c6>
 8007358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800735c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d008      	beq.n	8007376 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800736c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 f93f 	bl	80085f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007374:	e051      	b.n	800741a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800737a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737e:	2b00      	cmp	r3, #0
 8007380:	d014      	beq.n	80073ac <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738a:	2b00      	cmp	r3, #0
 800738c:	d105      	bne.n	800739a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800738e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d008      	beq.n	80073ac <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d03a      	beq.n	8007418 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
    }
    return;
 80073aa:	e035      	b.n	8007418 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d009      	beq.n	80073cc <HAL_UART_IRQHandler+0x71c>
 80073b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 f8e9 	bl	800859c <UART_EndTransmit_IT>
    return;
 80073ca:	e026      	b.n	800741a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80073cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d009      	beq.n	80073ec <HAL_UART_IRQHandler+0x73c>
 80073d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 f918 	bl	800861a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073ea:	e016      	b.n	800741a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80073ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d010      	beq.n	800741a <HAL_UART_IRQHandler+0x76a>
 80073f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	da0c      	bge.n	800741a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 f900 	bl	8008606 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007406:	e008      	b.n	800741a <HAL_UART_IRQHandler+0x76a>
      return;
 8007408:	bf00      	nop
 800740a:	e006      	b.n	800741a <HAL_UART_IRQHandler+0x76a>
    return;
 800740c:	bf00      	nop
 800740e:	e004      	b.n	800741a <HAL_UART_IRQHandler+0x76a>
      return;
 8007410:	bf00      	nop
 8007412:	e002      	b.n	800741a <HAL_UART_IRQHandler+0x76a>
      return;
 8007414:	bf00      	nop
 8007416:	e000      	b.n	800741a <HAL_UART_IRQHandler+0x76a>
    return;
 8007418:	bf00      	nop
  }
}
 800741a:	37e8      	adds	r7, #232	; 0xe8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	effffffe 	.word	0xeffffffe

08007424 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007468:	b092      	sub	sp, #72	; 0x48
 800746a:	af00      	add	r7, sp, #0
 800746c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	431a      	orrs	r2, r3
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	431a      	orrs	r2, r3
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	4313      	orrs	r3, r2
 800748a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4bbe      	ldr	r3, [pc, #760]	; (800778c <UART_SetConfig+0x328>)
 8007494:	4013      	ands	r3, r2
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	6812      	ldr	r2, [r2, #0]
 800749a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800749c:	430b      	orrs	r3, r1
 800749e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4ab3      	ldr	r2, [pc, #716]	; (8007790 <UART_SetConfig+0x32c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d004      	beq.n	80074d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074cc:	4313      	orrs	r3, r2
 80074ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	4baf      	ldr	r3, [pc, #700]	; (8007794 <UART_SetConfig+0x330>)
 80074d8:	4013      	ands	r3, r2
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	6812      	ldr	r2, [r2, #0]
 80074de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074e0:	430b      	orrs	r3, r1
 80074e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	f023 010f 	bic.w	r1, r3, #15
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4aa6      	ldr	r2, [pc, #664]	; (8007798 <UART_SetConfig+0x334>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d177      	bne.n	80075f4 <UART_SetConfig+0x190>
 8007504:	4ba5      	ldr	r3, [pc, #660]	; (800779c <UART_SetConfig+0x338>)
 8007506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007508:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800750c:	2b28      	cmp	r3, #40	; 0x28
 800750e:	d86d      	bhi.n	80075ec <UART_SetConfig+0x188>
 8007510:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <UART_SetConfig+0xb4>)
 8007512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007516:	bf00      	nop
 8007518:	080075bd 	.word	0x080075bd
 800751c:	080075ed 	.word	0x080075ed
 8007520:	080075ed 	.word	0x080075ed
 8007524:	080075ed 	.word	0x080075ed
 8007528:	080075ed 	.word	0x080075ed
 800752c:	080075ed 	.word	0x080075ed
 8007530:	080075ed 	.word	0x080075ed
 8007534:	080075ed 	.word	0x080075ed
 8007538:	080075c5 	.word	0x080075c5
 800753c:	080075ed 	.word	0x080075ed
 8007540:	080075ed 	.word	0x080075ed
 8007544:	080075ed 	.word	0x080075ed
 8007548:	080075ed 	.word	0x080075ed
 800754c:	080075ed 	.word	0x080075ed
 8007550:	080075ed 	.word	0x080075ed
 8007554:	080075ed 	.word	0x080075ed
 8007558:	080075cd 	.word	0x080075cd
 800755c:	080075ed 	.word	0x080075ed
 8007560:	080075ed 	.word	0x080075ed
 8007564:	080075ed 	.word	0x080075ed
 8007568:	080075ed 	.word	0x080075ed
 800756c:	080075ed 	.word	0x080075ed
 8007570:	080075ed 	.word	0x080075ed
 8007574:	080075ed 	.word	0x080075ed
 8007578:	080075d5 	.word	0x080075d5
 800757c:	080075ed 	.word	0x080075ed
 8007580:	080075ed 	.word	0x080075ed
 8007584:	080075ed 	.word	0x080075ed
 8007588:	080075ed 	.word	0x080075ed
 800758c:	080075ed 	.word	0x080075ed
 8007590:	080075ed 	.word	0x080075ed
 8007594:	080075ed 	.word	0x080075ed
 8007598:	080075dd 	.word	0x080075dd
 800759c:	080075ed 	.word	0x080075ed
 80075a0:	080075ed 	.word	0x080075ed
 80075a4:	080075ed 	.word	0x080075ed
 80075a8:	080075ed 	.word	0x080075ed
 80075ac:	080075ed 	.word	0x080075ed
 80075b0:	080075ed 	.word	0x080075ed
 80075b4:	080075ed 	.word	0x080075ed
 80075b8:	080075e5 	.word	0x080075e5
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075c2:	e326      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80075c4:	2304      	movs	r3, #4
 80075c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ca:	e322      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80075cc:	2308      	movs	r3, #8
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075d2:	e31e      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80075d4:	2310      	movs	r3, #16
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075da:	e31a      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80075dc:	2320      	movs	r3, #32
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e2:	e316      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80075e4:	2340      	movs	r3, #64	; 0x40
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ea:	e312      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80075ec:	2380      	movs	r3, #128	; 0x80
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f2:	e30e      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a69      	ldr	r2, [pc, #420]	; (80077a0 <UART_SetConfig+0x33c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d130      	bne.n	8007660 <UART_SetConfig+0x1fc>
 80075fe:	4b67      	ldr	r3, [pc, #412]	; (800779c <UART_SetConfig+0x338>)
 8007600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007602:	f003 0307 	and.w	r3, r3, #7
 8007606:	2b05      	cmp	r3, #5
 8007608:	d826      	bhi.n	8007658 <UART_SetConfig+0x1f4>
 800760a:	a201      	add	r2, pc, #4	; (adr r2, 8007610 <UART_SetConfig+0x1ac>)
 800760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007610:	08007629 	.word	0x08007629
 8007614:	08007631 	.word	0x08007631
 8007618:	08007639 	.word	0x08007639
 800761c:	08007641 	.word	0x08007641
 8007620:	08007649 	.word	0x08007649
 8007624:	08007651 	.word	0x08007651
 8007628:	2300      	movs	r3, #0
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762e:	e2f0      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007630:	2304      	movs	r3, #4
 8007632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007636:	e2ec      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007638:	2308      	movs	r3, #8
 800763a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800763e:	e2e8      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007640:	2310      	movs	r3, #16
 8007642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007646:	e2e4      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007648:	2320      	movs	r3, #32
 800764a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800764e:	e2e0      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007650:	2340      	movs	r3, #64	; 0x40
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007656:	e2dc      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007658:	2380      	movs	r3, #128	; 0x80
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765e:	e2d8      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a4f      	ldr	r2, [pc, #316]	; (80077a4 <UART_SetConfig+0x340>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d130      	bne.n	80076cc <UART_SetConfig+0x268>
 800766a:	4b4c      	ldr	r3, [pc, #304]	; (800779c <UART_SetConfig+0x338>)
 800766c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766e:	f003 0307 	and.w	r3, r3, #7
 8007672:	2b05      	cmp	r3, #5
 8007674:	d826      	bhi.n	80076c4 <UART_SetConfig+0x260>
 8007676:	a201      	add	r2, pc, #4	; (adr r2, 800767c <UART_SetConfig+0x218>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	08007695 	.word	0x08007695
 8007680:	0800769d 	.word	0x0800769d
 8007684:	080076a5 	.word	0x080076a5
 8007688:	080076ad 	.word	0x080076ad
 800768c:	080076b5 	.word	0x080076b5
 8007690:	080076bd 	.word	0x080076bd
 8007694:	2300      	movs	r3, #0
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800769a:	e2ba      	b.n	8007c12 <UART_SetConfig+0x7ae>
 800769c:	2304      	movs	r3, #4
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076a2:	e2b6      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80076a4:	2308      	movs	r3, #8
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076aa:	e2b2      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80076ac:	2310      	movs	r3, #16
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076b2:	e2ae      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80076b4:	2320      	movs	r3, #32
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ba:	e2aa      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80076bc:	2340      	movs	r3, #64	; 0x40
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076c2:	e2a6      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80076c4:	2380      	movs	r3, #128	; 0x80
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ca:	e2a2      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a35      	ldr	r2, [pc, #212]	; (80077a8 <UART_SetConfig+0x344>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d130      	bne.n	8007738 <UART_SetConfig+0x2d4>
 80076d6:	4b31      	ldr	r3, [pc, #196]	; (800779c <UART_SetConfig+0x338>)
 80076d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076da:	f003 0307 	and.w	r3, r3, #7
 80076de:	2b05      	cmp	r3, #5
 80076e0:	d826      	bhi.n	8007730 <UART_SetConfig+0x2cc>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <UART_SetConfig+0x284>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	08007701 	.word	0x08007701
 80076ec:	08007709 	.word	0x08007709
 80076f0:	08007711 	.word	0x08007711
 80076f4:	08007719 	.word	0x08007719
 80076f8:	08007721 	.word	0x08007721
 80076fc:	08007729 	.word	0x08007729
 8007700:	2300      	movs	r3, #0
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007706:	e284      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007708:	2304      	movs	r3, #4
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770e:	e280      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007710:	2308      	movs	r3, #8
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007716:	e27c      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007718:	2310      	movs	r3, #16
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771e:	e278      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007720:	2320      	movs	r3, #32
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007726:	e274      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007728:	2340      	movs	r3, #64	; 0x40
 800772a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800772e:	e270      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007730:	2380      	movs	r3, #128	; 0x80
 8007732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007736:	e26c      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a1b      	ldr	r2, [pc, #108]	; (80077ac <UART_SetConfig+0x348>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d142      	bne.n	80077c8 <UART_SetConfig+0x364>
 8007742:	4b16      	ldr	r3, [pc, #88]	; (800779c <UART_SetConfig+0x338>)
 8007744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	2b05      	cmp	r3, #5
 800774c:	d838      	bhi.n	80077c0 <UART_SetConfig+0x35c>
 800774e:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <UART_SetConfig+0x2f0>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	0800776d 	.word	0x0800776d
 8007758:	08007775 	.word	0x08007775
 800775c:	0800777d 	.word	0x0800777d
 8007760:	08007785 	.word	0x08007785
 8007764:	080077b1 	.word	0x080077b1
 8007768:	080077b9 	.word	0x080077b9
 800776c:	2300      	movs	r3, #0
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007772:	e24e      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007774:	2304      	movs	r3, #4
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777a:	e24a      	b.n	8007c12 <UART_SetConfig+0x7ae>
 800777c:	2308      	movs	r3, #8
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007782:	e246      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007784:	2310      	movs	r3, #16
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778a:	e242      	b.n	8007c12 <UART_SetConfig+0x7ae>
 800778c:	cfff69f3 	.word	0xcfff69f3
 8007790:	58000c00 	.word	0x58000c00
 8007794:	11fff4ff 	.word	0x11fff4ff
 8007798:	40011000 	.word	0x40011000
 800779c:	58024400 	.word	0x58024400
 80077a0:	40004400 	.word	0x40004400
 80077a4:	40004800 	.word	0x40004800
 80077a8:	40004c00 	.word	0x40004c00
 80077ac:	40005000 	.word	0x40005000
 80077b0:	2320      	movs	r3, #32
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b6:	e22c      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80077b8:	2340      	movs	r3, #64	; 0x40
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077be:	e228      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80077c0:	2380      	movs	r3, #128	; 0x80
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077c6:	e224      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4ab1      	ldr	r2, [pc, #708]	; (8007a94 <UART_SetConfig+0x630>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d176      	bne.n	80078c0 <UART_SetConfig+0x45c>
 80077d2:	4bb1      	ldr	r3, [pc, #708]	; (8007a98 <UART_SetConfig+0x634>)
 80077d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077da:	2b28      	cmp	r3, #40	; 0x28
 80077dc:	d86c      	bhi.n	80078b8 <UART_SetConfig+0x454>
 80077de:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <UART_SetConfig+0x380>)
 80077e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e4:	08007889 	.word	0x08007889
 80077e8:	080078b9 	.word	0x080078b9
 80077ec:	080078b9 	.word	0x080078b9
 80077f0:	080078b9 	.word	0x080078b9
 80077f4:	080078b9 	.word	0x080078b9
 80077f8:	080078b9 	.word	0x080078b9
 80077fc:	080078b9 	.word	0x080078b9
 8007800:	080078b9 	.word	0x080078b9
 8007804:	08007891 	.word	0x08007891
 8007808:	080078b9 	.word	0x080078b9
 800780c:	080078b9 	.word	0x080078b9
 8007810:	080078b9 	.word	0x080078b9
 8007814:	080078b9 	.word	0x080078b9
 8007818:	080078b9 	.word	0x080078b9
 800781c:	080078b9 	.word	0x080078b9
 8007820:	080078b9 	.word	0x080078b9
 8007824:	08007899 	.word	0x08007899
 8007828:	080078b9 	.word	0x080078b9
 800782c:	080078b9 	.word	0x080078b9
 8007830:	080078b9 	.word	0x080078b9
 8007834:	080078b9 	.word	0x080078b9
 8007838:	080078b9 	.word	0x080078b9
 800783c:	080078b9 	.word	0x080078b9
 8007840:	080078b9 	.word	0x080078b9
 8007844:	080078a1 	.word	0x080078a1
 8007848:	080078b9 	.word	0x080078b9
 800784c:	080078b9 	.word	0x080078b9
 8007850:	080078b9 	.word	0x080078b9
 8007854:	080078b9 	.word	0x080078b9
 8007858:	080078b9 	.word	0x080078b9
 800785c:	080078b9 	.word	0x080078b9
 8007860:	080078b9 	.word	0x080078b9
 8007864:	080078a9 	.word	0x080078a9
 8007868:	080078b9 	.word	0x080078b9
 800786c:	080078b9 	.word	0x080078b9
 8007870:	080078b9 	.word	0x080078b9
 8007874:	080078b9 	.word	0x080078b9
 8007878:	080078b9 	.word	0x080078b9
 800787c:	080078b9 	.word	0x080078b9
 8007880:	080078b9 	.word	0x080078b9
 8007884:	080078b1 	.word	0x080078b1
 8007888:	2301      	movs	r3, #1
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788e:	e1c0      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007890:	2304      	movs	r3, #4
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007896:	e1bc      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007898:	2308      	movs	r3, #8
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800789e:	e1b8      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80078a0:	2310      	movs	r3, #16
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078a6:	e1b4      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80078a8:	2320      	movs	r3, #32
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ae:	e1b0      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80078b0:	2340      	movs	r3, #64	; 0x40
 80078b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078b6:	e1ac      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80078b8:	2380      	movs	r3, #128	; 0x80
 80078ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078be:	e1a8      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a75      	ldr	r2, [pc, #468]	; (8007a9c <UART_SetConfig+0x638>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d130      	bne.n	800792c <UART_SetConfig+0x4c8>
 80078ca:	4b73      	ldr	r3, [pc, #460]	; (8007a98 <UART_SetConfig+0x634>)
 80078cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ce:	f003 0307 	and.w	r3, r3, #7
 80078d2:	2b05      	cmp	r3, #5
 80078d4:	d826      	bhi.n	8007924 <UART_SetConfig+0x4c0>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <UART_SetConfig+0x478>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	080078f5 	.word	0x080078f5
 80078e0:	080078fd 	.word	0x080078fd
 80078e4:	08007905 	.word	0x08007905
 80078e8:	0800790d 	.word	0x0800790d
 80078ec:	08007915 	.word	0x08007915
 80078f0:	0800791d 	.word	0x0800791d
 80078f4:	2300      	movs	r3, #0
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fa:	e18a      	b.n	8007c12 <UART_SetConfig+0x7ae>
 80078fc:	2304      	movs	r3, #4
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007902:	e186      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007904:	2308      	movs	r3, #8
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800790a:	e182      	b.n	8007c12 <UART_SetConfig+0x7ae>
 800790c:	2310      	movs	r3, #16
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007912:	e17e      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007914:	2320      	movs	r3, #32
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800791a:	e17a      	b.n	8007c12 <UART_SetConfig+0x7ae>
 800791c:	2340      	movs	r3, #64	; 0x40
 800791e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007922:	e176      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007924:	2380      	movs	r3, #128	; 0x80
 8007926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800792a:	e172      	b.n	8007c12 <UART_SetConfig+0x7ae>
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a5b      	ldr	r2, [pc, #364]	; (8007aa0 <UART_SetConfig+0x63c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d130      	bne.n	8007998 <UART_SetConfig+0x534>
 8007936:	4b58      	ldr	r3, [pc, #352]	; (8007a98 <UART_SetConfig+0x634>)
 8007938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793a:	f003 0307 	and.w	r3, r3, #7
 800793e:	2b05      	cmp	r3, #5
 8007940:	d826      	bhi.n	8007990 <UART_SetConfig+0x52c>
 8007942:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <UART_SetConfig+0x4e4>)
 8007944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007948:	08007961 	.word	0x08007961
 800794c:	08007969 	.word	0x08007969
 8007950:	08007971 	.word	0x08007971
 8007954:	08007979 	.word	0x08007979
 8007958:	08007981 	.word	0x08007981
 800795c:	08007989 	.word	0x08007989
 8007960:	2300      	movs	r3, #0
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007966:	e154      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007968:	2304      	movs	r3, #4
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800796e:	e150      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007970:	2308      	movs	r3, #8
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007976:	e14c      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007978:	2310      	movs	r3, #16
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800797e:	e148      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007980:	2320      	movs	r3, #32
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007986:	e144      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007988:	2340      	movs	r3, #64	; 0x40
 800798a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800798e:	e140      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007990:	2380      	movs	r3, #128	; 0x80
 8007992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007996:	e13c      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a41      	ldr	r2, [pc, #260]	; (8007aa4 <UART_SetConfig+0x640>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	f040 8082 	bne.w	8007aa8 <UART_SetConfig+0x644>
 80079a4:	4b3c      	ldr	r3, [pc, #240]	; (8007a98 <UART_SetConfig+0x634>)
 80079a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079ac:	2b28      	cmp	r3, #40	; 0x28
 80079ae:	d86d      	bhi.n	8007a8c <UART_SetConfig+0x628>
 80079b0:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <UART_SetConfig+0x554>)
 80079b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b6:	bf00      	nop
 80079b8:	08007a5d 	.word	0x08007a5d
 80079bc:	08007a8d 	.word	0x08007a8d
 80079c0:	08007a8d 	.word	0x08007a8d
 80079c4:	08007a8d 	.word	0x08007a8d
 80079c8:	08007a8d 	.word	0x08007a8d
 80079cc:	08007a8d 	.word	0x08007a8d
 80079d0:	08007a8d 	.word	0x08007a8d
 80079d4:	08007a8d 	.word	0x08007a8d
 80079d8:	08007a65 	.word	0x08007a65
 80079dc:	08007a8d 	.word	0x08007a8d
 80079e0:	08007a8d 	.word	0x08007a8d
 80079e4:	08007a8d 	.word	0x08007a8d
 80079e8:	08007a8d 	.word	0x08007a8d
 80079ec:	08007a8d 	.word	0x08007a8d
 80079f0:	08007a8d 	.word	0x08007a8d
 80079f4:	08007a8d 	.word	0x08007a8d
 80079f8:	08007a6d 	.word	0x08007a6d
 80079fc:	08007a8d 	.word	0x08007a8d
 8007a00:	08007a8d 	.word	0x08007a8d
 8007a04:	08007a8d 	.word	0x08007a8d
 8007a08:	08007a8d 	.word	0x08007a8d
 8007a0c:	08007a8d 	.word	0x08007a8d
 8007a10:	08007a8d 	.word	0x08007a8d
 8007a14:	08007a8d 	.word	0x08007a8d
 8007a18:	08007a75 	.word	0x08007a75
 8007a1c:	08007a8d 	.word	0x08007a8d
 8007a20:	08007a8d 	.word	0x08007a8d
 8007a24:	08007a8d 	.word	0x08007a8d
 8007a28:	08007a8d 	.word	0x08007a8d
 8007a2c:	08007a8d 	.word	0x08007a8d
 8007a30:	08007a8d 	.word	0x08007a8d
 8007a34:	08007a8d 	.word	0x08007a8d
 8007a38:	08007a7d 	.word	0x08007a7d
 8007a3c:	08007a8d 	.word	0x08007a8d
 8007a40:	08007a8d 	.word	0x08007a8d
 8007a44:	08007a8d 	.word	0x08007a8d
 8007a48:	08007a8d 	.word	0x08007a8d
 8007a4c:	08007a8d 	.word	0x08007a8d
 8007a50:	08007a8d 	.word	0x08007a8d
 8007a54:	08007a8d 	.word	0x08007a8d
 8007a58:	08007a85 	.word	0x08007a85
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a62:	e0d6      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007a64:	2304      	movs	r3, #4
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a6a:	e0d2      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007a6c:	2308      	movs	r3, #8
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a72:	e0ce      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007a74:	2310      	movs	r3, #16
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a7a:	e0ca      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007a7c:	2320      	movs	r3, #32
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a82:	e0c6      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007a84:	2340      	movs	r3, #64	; 0x40
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a8a:	e0c2      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007a8c:	2380      	movs	r3, #128	; 0x80
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a92:	e0be      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007a94:	40011400 	.word	0x40011400
 8007a98:	58024400 	.word	0x58024400
 8007a9c:	40007800 	.word	0x40007800
 8007aa0:	40007c00 	.word	0x40007c00
 8007aa4:	40011800 	.word	0x40011800
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4aad      	ldr	r2, [pc, #692]	; (8007d64 <UART_SetConfig+0x900>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d176      	bne.n	8007ba0 <UART_SetConfig+0x73c>
 8007ab2:	4bad      	ldr	r3, [pc, #692]	; (8007d68 <UART_SetConfig+0x904>)
 8007ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aba:	2b28      	cmp	r3, #40	; 0x28
 8007abc:	d86c      	bhi.n	8007b98 <UART_SetConfig+0x734>
 8007abe:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <UART_SetConfig+0x660>)
 8007ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac4:	08007b69 	.word	0x08007b69
 8007ac8:	08007b99 	.word	0x08007b99
 8007acc:	08007b99 	.word	0x08007b99
 8007ad0:	08007b99 	.word	0x08007b99
 8007ad4:	08007b99 	.word	0x08007b99
 8007ad8:	08007b99 	.word	0x08007b99
 8007adc:	08007b99 	.word	0x08007b99
 8007ae0:	08007b99 	.word	0x08007b99
 8007ae4:	08007b71 	.word	0x08007b71
 8007ae8:	08007b99 	.word	0x08007b99
 8007aec:	08007b99 	.word	0x08007b99
 8007af0:	08007b99 	.word	0x08007b99
 8007af4:	08007b99 	.word	0x08007b99
 8007af8:	08007b99 	.word	0x08007b99
 8007afc:	08007b99 	.word	0x08007b99
 8007b00:	08007b99 	.word	0x08007b99
 8007b04:	08007b79 	.word	0x08007b79
 8007b08:	08007b99 	.word	0x08007b99
 8007b0c:	08007b99 	.word	0x08007b99
 8007b10:	08007b99 	.word	0x08007b99
 8007b14:	08007b99 	.word	0x08007b99
 8007b18:	08007b99 	.word	0x08007b99
 8007b1c:	08007b99 	.word	0x08007b99
 8007b20:	08007b99 	.word	0x08007b99
 8007b24:	08007b81 	.word	0x08007b81
 8007b28:	08007b99 	.word	0x08007b99
 8007b2c:	08007b99 	.word	0x08007b99
 8007b30:	08007b99 	.word	0x08007b99
 8007b34:	08007b99 	.word	0x08007b99
 8007b38:	08007b99 	.word	0x08007b99
 8007b3c:	08007b99 	.word	0x08007b99
 8007b40:	08007b99 	.word	0x08007b99
 8007b44:	08007b89 	.word	0x08007b89
 8007b48:	08007b99 	.word	0x08007b99
 8007b4c:	08007b99 	.word	0x08007b99
 8007b50:	08007b99 	.word	0x08007b99
 8007b54:	08007b99 	.word	0x08007b99
 8007b58:	08007b99 	.word	0x08007b99
 8007b5c:	08007b99 	.word	0x08007b99
 8007b60:	08007b99 	.word	0x08007b99
 8007b64:	08007b91 	.word	0x08007b91
 8007b68:	2301      	movs	r3, #1
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b6e:	e050      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007b70:	2304      	movs	r3, #4
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b76:	e04c      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007b78:	2308      	movs	r3, #8
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b7e:	e048      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007b80:	2310      	movs	r3, #16
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b86:	e044      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007b88:	2320      	movs	r3, #32
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b8e:	e040      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007b90:	2340      	movs	r3, #64	; 0x40
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b96:	e03c      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007b98:	2380      	movs	r3, #128	; 0x80
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9e:	e038      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a71      	ldr	r2, [pc, #452]	; (8007d6c <UART_SetConfig+0x908>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d130      	bne.n	8007c0c <UART_SetConfig+0x7a8>
 8007baa:	4b6f      	ldr	r3, [pc, #444]	; (8007d68 <UART_SetConfig+0x904>)
 8007bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bae:	f003 0307 	and.w	r3, r3, #7
 8007bb2:	2b05      	cmp	r3, #5
 8007bb4:	d826      	bhi.n	8007c04 <UART_SetConfig+0x7a0>
 8007bb6:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <UART_SetConfig+0x758>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bd5 	.word	0x08007bd5
 8007bc0:	08007bdd 	.word	0x08007bdd
 8007bc4:	08007be5 	.word	0x08007be5
 8007bc8:	08007bed 	.word	0x08007bed
 8007bcc:	08007bf5 	.word	0x08007bf5
 8007bd0:	08007bfd 	.word	0x08007bfd
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bda:	e01a      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007bdc:	2304      	movs	r3, #4
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007be2:	e016      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007be4:	2308      	movs	r3, #8
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bea:	e012      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007bec:	2310      	movs	r3, #16
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf2:	e00e      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007bf4:	2320      	movs	r3, #32
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfa:	e00a      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007bfc:	2340      	movs	r3, #64	; 0x40
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c02:	e006      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007c04:	2380      	movs	r3, #128	; 0x80
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0a:	e002      	b.n	8007c12 <UART_SetConfig+0x7ae>
 8007c0c:	2380      	movs	r3, #128	; 0x80
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a55      	ldr	r2, [pc, #340]	; (8007d6c <UART_SetConfig+0x908>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	f040 80f8 	bne.w	8007e0e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c1e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c22:	2b20      	cmp	r3, #32
 8007c24:	dc46      	bgt.n	8007cb4 <UART_SetConfig+0x850>
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	db75      	blt.n	8007d16 <UART_SetConfig+0x8b2>
 8007c2a:	3b02      	subs	r3, #2
 8007c2c:	2b1e      	cmp	r3, #30
 8007c2e:	d872      	bhi.n	8007d16 <UART_SetConfig+0x8b2>
 8007c30:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <UART_SetConfig+0x7d4>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007cbb 	.word	0x08007cbb
 8007c3c:	08007d17 	.word	0x08007d17
 8007c40:	08007cc3 	.word	0x08007cc3
 8007c44:	08007d17 	.word	0x08007d17
 8007c48:	08007d17 	.word	0x08007d17
 8007c4c:	08007d17 	.word	0x08007d17
 8007c50:	08007cd3 	.word	0x08007cd3
 8007c54:	08007d17 	.word	0x08007d17
 8007c58:	08007d17 	.word	0x08007d17
 8007c5c:	08007d17 	.word	0x08007d17
 8007c60:	08007d17 	.word	0x08007d17
 8007c64:	08007d17 	.word	0x08007d17
 8007c68:	08007d17 	.word	0x08007d17
 8007c6c:	08007d17 	.word	0x08007d17
 8007c70:	08007ce3 	.word	0x08007ce3
 8007c74:	08007d17 	.word	0x08007d17
 8007c78:	08007d17 	.word	0x08007d17
 8007c7c:	08007d17 	.word	0x08007d17
 8007c80:	08007d17 	.word	0x08007d17
 8007c84:	08007d17 	.word	0x08007d17
 8007c88:	08007d17 	.word	0x08007d17
 8007c8c:	08007d17 	.word	0x08007d17
 8007c90:	08007d17 	.word	0x08007d17
 8007c94:	08007d17 	.word	0x08007d17
 8007c98:	08007d17 	.word	0x08007d17
 8007c9c:	08007d17 	.word	0x08007d17
 8007ca0:	08007d17 	.word	0x08007d17
 8007ca4:	08007d17 	.word	0x08007d17
 8007ca8:	08007d17 	.word	0x08007d17
 8007cac:	08007d17 	.word	0x08007d17
 8007cb0:	08007d09 	.word	0x08007d09
 8007cb4:	2b40      	cmp	r3, #64	; 0x40
 8007cb6:	d02a      	beq.n	8007d0e <UART_SetConfig+0x8aa>
 8007cb8:	e02d      	b.n	8007d16 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007cba:	f7fd fddd 	bl	8005878 <HAL_RCCEx_GetD3PCLK1Freq>
 8007cbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007cc0:	e02f      	b.n	8007d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fd fdec 	bl	80058a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd0:	e027      	b.n	8007d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cd2:	f107 0318 	add.w	r3, r7, #24
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fd ff38 	bl	8005b4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ce0:	e01f      	b.n	8007d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ce2:	4b21      	ldr	r3, [pc, #132]	; (8007d68 <UART_SetConfig+0x904>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0320 	and.w	r3, r3, #32
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d009      	beq.n	8007d02 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cee:	4b1e      	ldr	r3, [pc, #120]	; (8007d68 <UART_SetConfig+0x904>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	08db      	lsrs	r3, r3, #3
 8007cf4:	f003 0303 	and.w	r3, r3, #3
 8007cf8:	4a1d      	ldr	r2, [pc, #116]	; (8007d70 <UART_SetConfig+0x90c>)
 8007cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d00:	e00f      	b.n	8007d22 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007d02:	4b1b      	ldr	r3, [pc, #108]	; (8007d70 <UART_SetConfig+0x90c>)
 8007d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d06:	e00c      	b.n	8007d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d08:	4b1a      	ldr	r3, [pc, #104]	; (8007d74 <UART_SetConfig+0x910>)
 8007d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d0c:	e009      	b.n	8007d22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d14:	e005      	b.n	8007d22 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007d20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 81ee 	beq.w	8008106 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	4a12      	ldr	r2, [pc, #72]	; (8007d78 <UART_SetConfig+0x914>)
 8007d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d34:	461a      	mov	r2, r3
 8007d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d3c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	4613      	mov	r3, r2
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	4413      	add	r3, r2
 8007d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d305      	bcc.n	8007d5a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d910      	bls.n	8007d7c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007d60:	e1d1      	b.n	8008106 <UART_SetConfig+0xca2>
 8007d62:	bf00      	nop
 8007d64:	40011c00 	.word	0x40011c00
 8007d68:	58024400 	.word	0x58024400
 8007d6c:	58000c00 	.word	0x58000c00
 8007d70:	03d09000 	.word	0x03d09000
 8007d74:	003d0900 	.word	0x003d0900
 8007d78:	0800d078 	.word	0x0800d078
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d7e:	2200      	movs	r2, #0
 8007d80:	60bb      	str	r3, [r7, #8]
 8007d82:	60fa      	str	r2, [r7, #12]
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d88:	4ac0      	ldr	r2, [pc, #768]	; (800808c <UART_SetConfig+0xc28>)
 8007d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	2200      	movs	r2, #0
 8007d92:	603b      	str	r3, [r7, #0]
 8007d94:	607a      	str	r2, [r7, #4]
 8007d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d9e:	f7f8 fccb 	bl	8000738 <__aeabi_uldivmod>
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	4610      	mov	r0, r2
 8007da8:	4619      	mov	r1, r3
 8007daa:	f04f 0200 	mov.w	r2, #0
 8007dae:	f04f 0300 	mov.w	r3, #0
 8007db2:	020b      	lsls	r3, r1, #8
 8007db4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007db8:	0202      	lsls	r2, r0, #8
 8007dba:	6979      	ldr	r1, [r7, #20]
 8007dbc:	6849      	ldr	r1, [r1, #4]
 8007dbe:	0849      	lsrs	r1, r1, #1
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	eb12 0804 	adds.w	r8, r2, r4
 8007dca:	eb43 0905 	adc.w	r9, r3, r5
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	469a      	mov	sl, r3
 8007dd6:	4693      	mov	fp, r2
 8007dd8:	4652      	mov	r2, sl
 8007dda:	465b      	mov	r3, fp
 8007ddc:	4640      	mov	r0, r8
 8007dde:	4649      	mov	r1, r9
 8007de0:	f7f8 fcaa 	bl	8000738 <__aeabi_uldivmod>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4613      	mov	r3, r2
 8007dea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007df2:	d308      	bcc.n	8007e06 <UART_SetConfig+0x9a2>
 8007df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dfa:	d204      	bcs.n	8007e06 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e02:	60da      	str	r2, [r3, #12]
 8007e04:	e17f      	b.n	8008106 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007e0c:	e17b      	b.n	8008106 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e16:	f040 80bd 	bne.w	8007f94 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007e1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	dc48      	bgt.n	8007eb4 <UART_SetConfig+0xa50>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	db7b      	blt.n	8007f1e <UART_SetConfig+0xaba>
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	d879      	bhi.n	8007f1e <UART_SetConfig+0xaba>
 8007e2a:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <UART_SetConfig+0x9cc>)
 8007e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e30:	08007ebb 	.word	0x08007ebb
 8007e34:	08007ec3 	.word	0x08007ec3
 8007e38:	08007f1f 	.word	0x08007f1f
 8007e3c:	08007f1f 	.word	0x08007f1f
 8007e40:	08007ecb 	.word	0x08007ecb
 8007e44:	08007f1f 	.word	0x08007f1f
 8007e48:	08007f1f 	.word	0x08007f1f
 8007e4c:	08007f1f 	.word	0x08007f1f
 8007e50:	08007edb 	.word	0x08007edb
 8007e54:	08007f1f 	.word	0x08007f1f
 8007e58:	08007f1f 	.word	0x08007f1f
 8007e5c:	08007f1f 	.word	0x08007f1f
 8007e60:	08007f1f 	.word	0x08007f1f
 8007e64:	08007f1f 	.word	0x08007f1f
 8007e68:	08007f1f 	.word	0x08007f1f
 8007e6c:	08007f1f 	.word	0x08007f1f
 8007e70:	08007eeb 	.word	0x08007eeb
 8007e74:	08007f1f 	.word	0x08007f1f
 8007e78:	08007f1f 	.word	0x08007f1f
 8007e7c:	08007f1f 	.word	0x08007f1f
 8007e80:	08007f1f 	.word	0x08007f1f
 8007e84:	08007f1f 	.word	0x08007f1f
 8007e88:	08007f1f 	.word	0x08007f1f
 8007e8c:	08007f1f 	.word	0x08007f1f
 8007e90:	08007f1f 	.word	0x08007f1f
 8007e94:	08007f1f 	.word	0x08007f1f
 8007e98:	08007f1f 	.word	0x08007f1f
 8007e9c:	08007f1f 	.word	0x08007f1f
 8007ea0:	08007f1f 	.word	0x08007f1f
 8007ea4:	08007f1f 	.word	0x08007f1f
 8007ea8:	08007f1f 	.word	0x08007f1f
 8007eac:	08007f1f 	.word	0x08007f1f
 8007eb0:	08007f11 	.word	0x08007f11
 8007eb4:	2b40      	cmp	r3, #64	; 0x40
 8007eb6:	d02e      	beq.n	8007f16 <UART_SetConfig+0xab2>
 8007eb8:	e031      	b.n	8007f1e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eba:	f7fc fb11 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8007ebe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ec0:	e033      	b.n	8007f2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ec2:	f7fc fb23 	bl	800450c <HAL_RCC_GetPCLK2Freq>
 8007ec6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ec8:	e02f      	b.n	8007f2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fd fce8 	bl	80058a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ed8:	e027      	b.n	8007f2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eda:	f107 0318 	add.w	r3, r7, #24
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fd fe34 	bl	8005b4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ee8:	e01f      	b.n	8007f2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eea:	4b69      	ldr	r3, [pc, #420]	; (8008090 <UART_SetConfig+0xc2c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0320 	and.w	r3, r3, #32
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d009      	beq.n	8007f0a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ef6:	4b66      	ldr	r3, [pc, #408]	; (8008090 <UART_SetConfig+0xc2c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	08db      	lsrs	r3, r3, #3
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	4a64      	ldr	r2, [pc, #400]	; (8008094 <UART_SetConfig+0xc30>)
 8007f02:	fa22 f303 	lsr.w	r3, r2, r3
 8007f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f08:	e00f      	b.n	8007f2a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007f0a:	4b62      	ldr	r3, [pc, #392]	; (8008094 <UART_SetConfig+0xc30>)
 8007f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f0e:	e00c      	b.n	8007f2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f10:	4b61      	ldr	r3, [pc, #388]	; (8008098 <UART_SetConfig+0xc34>)
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f14:	e009      	b.n	8007f2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f1c:	e005      	b.n	8007f2a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007f28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 80ea 	beq.w	8008106 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	4a55      	ldr	r2, [pc, #340]	; (800808c <UART_SetConfig+0xc28>)
 8007f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f44:	005a      	lsls	r2, r3, #1
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	085b      	lsrs	r3, r3, #1
 8007f4c:	441a      	add	r2, r3
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f56:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	2b0f      	cmp	r3, #15
 8007f5c:	d916      	bls.n	8007f8c <UART_SetConfig+0xb28>
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f64:	d212      	bcs.n	8007f8c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	f023 030f 	bic.w	r3, r3, #15
 8007f6e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f72:	085b      	lsrs	r3, r3, #1
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007f88:	60da      	str	r2, [r3, #12]
 8007f8a:	e0bc      	b.n	8008106 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007f92:	e0b8      	b.n	8008106 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	dc4b      	bgt.n	8008034 <UART_SetConfig+0xbd0>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f2c0 8087 	blt.w	80080b0 <UART_SetConfig+0xc4c>
 8007fa2:	2b20      	cmp	r3, #32
 8007fa4:	f200 8084 	bhi.w	80080b0 <UART_SetConfig+0xc4c>
 8007fa8:	a201      	add	r2, pc, #4	; (adr r2, 8007fb0 <UART_SetConfig+0xb4c>)
 8007faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fae:	bf00      	nop
 8007fb0:	0800803b 	.word	0x0800803b
 8007fb4:	08008043 	.word	0x08008043
 8007fb8:	080080b1 	.word	0x080080b1
 8007fbc:	080080b1 	.word	0x080080b1
 8007fc0:	0800804b 	.word	0x0800804b
 8007fc4:	080080b1 	.word	0x080080b1
 8007fc8:	080080b1 	.word	0x080080b1
 8007fcc:	080080b1 	.word	0x080080b1
 8007fd0:	0800805b 	.word	0x0800805b
 8007fd4:	080080b1 	.word	0x080080b1
 8007fd8:	080080b1 	.word	0x080080b1
 8007fdc:	080080b1 	.word	0x080080b1
 8007fe0:	080080b1 	.word	0x080080b1
 8007fe4:	080080b1 	.word	0x080080b1
 8007fe8:	080080b1 	.word	0x080080b1
 8007fec:	080080b1 	.word	0x080080b1
 8007ff0:	0800806b 	.word	0x0800806b
 8007ff4:	080080b1 	.word	0x080080b1
 8007ff8:	080080b1 	.word	0x080080b1
 8007ffc:	080080b1 	.word	0x080080b1
 8008000:	080080b1 	.word	0x080080b1
 8008004:	080080b1 	.word	0x080080b1
 8008008:	080080b1 	.word	0x080080b1
 800800c:	080080b1 	.word	0x080080b1
 8008010:	080080b1 	.word	0x080080b1
 8008014:	080080b1 	.word	0x080080b1
 8008018:	080080b1 	.word	0x080080b1
 800801c:	080080b1 	.word	0x080080b1
 8008020:	080080b1 	.word	0x080080b1
 8008024:	080080b1 	.word	0x080080b1
 8008028:	080080b1 	.word	0x080080b1
 800802c:	080080b1 	.word	0x080080b1
 8008030:	080080a3 	.word	0x080080a3
 8008034:	2b40      	cmp	r3, #64	; 0x40
 8008036:	d037      	beq.n	80080a8 <UART_SetConfig+0xc44>
 8008038:	e03a      	b.n	80080b0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800803a:	f7fc fa51 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 800803e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008040:	e03c      	b.n	80080bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008042:	f7fc fa63 	bl	800450c <HAL_RCC_GetPCLK2Freq>
 8008046:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008048:	e038      	b.n	80080bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800804a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800804e:	4618      	mov	r0, r3
 8008050:	f7fd fc28 	bl	80058a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008058:	e030      	b.n	80080bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800805a:	f107 0318 	add.w	r3, r7, #24
 800805e:	4618      	mov	r0, r3
 8008060:	f7fd fd74 	bl	8005b4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008068:	e028      	b.n	80080bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800806a:	4b09      	ldr	r3, [pc, #36]	; (8008090 <UART_SetConfig+0xc2c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	2b00      	cmp	r3, #0
 8008074:	d012      	beq.n	800809c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008076:	4b06      	ldr	r3, [pc, #24]	; (8008090 <UART_SetConfig+0xc2c>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	08db      	lsrs	r3, r3, #3
 800807c:	f003 0303 	and.w	r3, r3, #3
 8008080:	4a04      	ldr	r2, [pc, #16]	; (8008094 <UART_SetConfig+0xc30>)
 8008082:	fa22 f303 	lsr.w	r3, r2, r3
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008088:	e018      	b.n	80080bc <UART_SetConfig+0xc58>
 800808a:	bf00      	nop
 800808c:	0800d078 	.word	0x0800d078
 8008090:	58024400 	.word	0x58024400
 8008094:	03d09000 	.word	0x03d09000
 8008098:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800809c:	4b24      	ldr	r3, [pc, #144]	; (8008130 <UART_SetConfig+0xccc>)
 800809e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a0:	e00c      	b.n	80080bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80080a2:	4b24      	ldr	r3, [pc, #144]	; (8008134 <UART_SetConfig+0xcd0>)
 80080a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a6:	e009      	b.n	80080bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080ae:	e005      	b.n	80080bc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80080ba:	bf00      	nop
    }

    if (pclk != 0U)
 80080bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d021      	beq.n	8008106 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	4a1c      	ldr	r2, [pc, #112]	; (8008138 <UART_SetConfig+0xcd4>)
 80080c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080cc:	461a      	mov	r2, r3
 80080ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	085b      	lsrs	r3, r3, #1
 80080da:	441a      	add	r2, r3
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e8:	2b0f      	cmp	r3, #15
 80080ea:	d909      	bls.n	8008100 <UART_SetConfig+0xc9c>
 80080ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f2:	d205      	bcs.n	8008100 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	60da      	str	r2, [r3, #12]
 80080fe:	e002      	b.n	8008106 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2201      	movs	r2, #1
 800810a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2201      	movs	r2, #1
 8008112:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2200      	movs	r2, #0
 800811a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	2200      	movs	r2, #0
 8008120:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008122:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008126:	4618      	mov	r0, r3
 8008128:	3748      	adds	r7, #72	; 0x48
 800812a:	46bd      	mov	sp, r7
 800812c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008130:	03d09000 	.word	0x03d09000
 8008134:	003d0900 	.word	0x003d0900
 8008138:	0800d078 	.word	0x0800d078

0800813c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ae:	f003 0308 	and.w	r3, r3, #8
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	f003 0310 	and.w	r3, r3, #16
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00a      	beq.n	80081ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00a      	beq.n	8008210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008218:	2b00      	cmp	r3, #0
 800821a:	d01a      	beq.n	8008252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800823a:	d10a      	bne.n	8008252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	430a      	orrs	r2, r1
 8008272:	605a      	str	r2, [r3, #4]
  }
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b098      	sub	sp, #96	; 0x60
 8008284:	af02      	add	r7, sp, #8
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008290:	f7f9 fcfa 	bl	8001c88 <HAL_GetTick>
 8008294:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0308 	and.w	r3, r3, #8
 80082a0:	2b08      	cmp	r3, #8
 80082a2:	d12f      	bne.n	8008304 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ac:	2200      	movs	r2, #0
 80082ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f88e 	bl	80083d4 <UART_WaitOnFlagUntilTimeout>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d022      	beq.n	8008304 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c6:	e853 3f00 	ldrex	r3, [r3]
 80082ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082d2:	653b      	str	r3, [r7, #80]	; 0x50
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	461a      	mov	r2, r3
 80082da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082dc:	647b      	str	r3, [r7, #68]	; 0x44
 80082de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e6      	bne.n	80082be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2220      	movs	r2, #32
 80082f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e063      	b.n	80083cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0304 	and.w	r3, r3, #4
 800830e:	2b04      	cmp	r3, #4
 8008310:	d149      	bne.n	80083a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008312:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800831a:	2200      	movs	r2, #0
 800831c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f857 	bl	80083d4 <UART_WaitOnFlagUntilTimeout>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d03c      	beq.n	80083a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	e853 3f00 	ldrex	r3, [r3]
 8008338:	623b      	str	r3, [r7, #32]
   return(result);
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008340:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	461a      	mov	r2, r3
 8008348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800834a:	633b      	str	r3, [r7, #48]	; 0x30
 800834c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008352:	e841 2300 	strex	r3, r2, [r1]
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e6      	bne.n	800832c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3308      	adds	r3, #8
 8008364:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	60fb      	str	r3, [r7, #12]
   return(result);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f023 0301 	bic.w	r3, r3, #1
 8008374:	64bb      	str	r3, [r7, #72]	; 0x48
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3308      	adds	r3, #8
 800837c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800837e:	61fa      	str	r2, [r7, #28]
 8008380:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008382:	69b9      	ldr	r1, [r7, #24]
 8008384:	69fa      	ldr	r2, [r7, #28]
 8008386:	e841 2300 	strex	r3, r2, [r1]
 800838a:	617b      	str	r3, [r7, #20]
   return(result);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1e5      	bne.n	800835e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2220      	movs	r2, #32
 8008396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e012      	b.n	80083cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2220      	movs	r2, #32
 80083aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2220      	movs	r2, #32
 80083b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3758      	adds	r7, #88	; 0x58
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	603b      	str	r3, [r7, #0]
 80083e0:	4613      	mov	r3, r2
 80083e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083e4:	e049      	b.n	800847a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ec:	d045      	beq.n	800847a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ee:	f7f9 fc4b 	bl	8001c88 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d302      	bcc.n	8008404 <UART_WaitOnFlagUntilTimeout+0x30>
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e048      	b.n	800849a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0304 	and.w	r3, r3, #4
 8008412:	2b00      	cmp	r3, #0
 8008414:	d031      	beq.n	800847a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	f003 0308 	and.w	r3, r3, #8
 8008420:	2b08      	cmp	r3, #8
 8008422:	d110      	bne.n	8008446 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2208      	movs	r2, #8
 800842a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 f839 	bl	80084a4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2208      	movs	r2, #8
 8008436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e029      	b.n	800849a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	69db      	ldr	r3, [r3, #28]
 800844c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008454:	d111      	bne.n	800847a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800845e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 f81f 	bl	80084a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2220      	movs	r2, #32
 800846a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e00f      	b.n	800849a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69da      	ldr	r2, [r3, #28]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	4013      	ands	r3, r2
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	429a      	cmp	r2, r3
 8008488:	bf0c      	ite	eq
 800848a:	2301      	moveq	r3, #1
 800848c:	2300      	movne	r3, #0
 800848e:	b2db      	uxtb	r3, r3
 8008490:	461a      	mov	r2, r3
 8008492:	79fb      	ldrb	r3, [r7, #7]
 8008494:	429a      	cmp	r2, r3
 8008496:	d0a6      	beq.n	80083e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
	...

080084a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b095      	sub	sp, #84	; 0x54
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b4:	e853 3f00 	ldrex	r3, [r3]
 80084b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ca:	643b      	str	r3, [r7, #64]	; 0x40
 80084cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084d2:	e841 2300 	strex	r3, r2, [r1]
 80084d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1e6      	bne.n	80084ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	3308      	adds	r3, #8
 80084e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	e853 3f00 	ldrex	r3, [r3]
 80084ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80084ee:	69fa      	ldr	r2, [r7, #28]
 80084f0:	4b1e      	ldr	r3, [pc, #120]	; (800856c <UART_EndRxTransfer+0xc8>)
 80084f2:	4013      	ands	r3, r2
 80084f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3308      	adds	r3, #8
 80084fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008500:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008506:	e841 2300 	strex	r3, r2, [r1]
 800850a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1e5      	bne.n	80084de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008516:	2b01      	cmp	r3, #1
 8008518:	d118      	bne.n	800854c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	e853 3f00 	ldrex	r3, [r3]
 8008526:	60bb      	str	r3, [r7, #8]
   return(result);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f023 0310 	bic.w	r3, r3, #16
 800852e:	647b      	str	r3, [r7, #68]	; 0x44
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	461a      	mov	r2, r3
 8008536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008538:	61bb      	str	r3, [r7, #24]
 800853a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853c:	6979      	ldr	r1, [r7, #20]
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	e841 2300 	strex	r3, r2, [r1]
 8008544:	613b      	str	r3, [r7, #16]
   return(result);
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e6      	bne.n	800851a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2220      	movs	r2, #32
 8008550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008560:	bf00      	nop
 8008562:	3754      	adds	r7, #84	; 0x54
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	effffffe 	.word	0xeffffffe

08008570 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f7fe ff52 	bl	8007438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008594:	bf00      	nop
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085b8:	61fb      	str	r3, [r7, #28]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	61bb      	str	r3, [r7, #24]
 80085c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6979      	ldr	r1, [r7, #20]
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	613b      	str	r3, [r7, #16]
   return(result);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e6      	bne.n	80085a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2220      	movs	r2, #32
 80085da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7fe ff1d 	bl	8007424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085ea:	bf00      	nop
 80085ec:	3720      	adds	r7, #32
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800860e:	bf00      	nop
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008622:	bf00      	nop
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800862e:	b480      	push	{r7}
 8008630:	b085      	sub	sp, #20
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800863c:	2b01      	cmp	r3, #1
 800863e:	d101      	bne.n	8008644 <HAL_UARTEx_DisableFifoMode+0x16>
 8008640:	2302      	movs	r3, #2
 8008642:	e027      	b.n	8008694 <HAL_UARTEx_DisableFifoMode+0x66>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2224      	movs	r2, #36	; 0x24
 8008650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 0201 	bic.w	r2, r2, #1
 800866a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008672:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2220      	movs	r2, #32
 8008686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d101      	bne.n	80086b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086b4:	2302      	movs	r3, #2
 80086b6:	e02d      	b.n	8008714 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2224      	movs	r2, #36	; 0x24
 80086c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f022 0201 	bic.w	r2, r2, #1
 80086de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	430a      	orrs	r2, r1
 80086f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f84f 	bl	8008798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2220      	movs	r2, #32
 8008706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008730:	2302      	movs	r3, #2
 8008732:	e02d      	b.n	8008790 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2224      	movs	r2, #36	; 0x24
 8008740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f022 0201 	bic.w	r2, r2, #1
 800875a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	430a      	orrs	r2, r1
 800876e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f811 	bl	8008798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2220      	movs	r2, #32
 8008782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d108      	bne.n	80087ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087b8:	e031      	b.n	800881e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087ba:	2310      	movs	r3, #16
 80087bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087be:	2310      	movs	r3, #16
 80087c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	0e5b      	lsrs	r3, r3, #25
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	f003 0307 	and.w	r3, r3, #7
 80087d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	0f5b      	lsrs	r3, r3, #29
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f003 0307 	and.w	r3, r3, #7
 80087e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	7b3a      	ldrb	r2, [r7, #12]
 80087e6:	4911      	ldr	r1, [pc, #68]	; (800882c <UARTEx_SetNbDataToProcess+0x94>)
 80087e8:	5c8a      	ldrb	r2, [r1, r2]
 80087ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087ee:	7b3a      	ldrb	r2, [r7, #12]
 80087f0:	490f      	ldr	r1, [pc, #60]	; (8008830 <UARTEx_SetNbDataToProcess+0x98>)
 80087f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	7b7a      	ldrb	r2, [r7, #13]
 8008804:	4909      	ldr	r1, [pc, #36]	; (800882c <UARTEx_SetNbDataToProcess+0x94>)
 8008806:	5c8a      	ldrb	r2, [r1, r2]
 8008808:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800880c:	7b7a      	ldrb	r2, [r7, #13]
 800880e:	4908      	ldr	r1, [pc, #32]	; (8008830 <UARTEx_SetNbDataToProcess+0x98>)
 8008810:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008812:	fb93 f3f2 	sdiv	r3, r3, r2
 8008816:	b29a      	uxth	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800881e:	bf00      	nop
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	0800d090 	.word	0x0800d090
 8008830:	0800d098 	.word	0x0800d098

08008834 <__errno>:
 8008834:	4b01      	ldr	r3, [pc, #4]	; (800883c <__errno+0x8>)
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	24000024 	.word	0x24000024

08008840 <__libc_init_array>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	4d0d      	ldr	r5, [pc, #52]	; (8008878 <__libc_init_array+0x38>)
 8008844:	4c0d      	ldr	r4, [pc, #52]	; (800887c <__libc_init_array+0x3c>)
 8008846:	1b64      	subs	r4, r4, r5
 8008848:	10a4      	asrs	r4, r4, #2
 800884a:	2600      	movs	r6, #0
 800884c:	42a6      	cmp	r6, r4
 800884e:	d109      	bne.n	8008864 <__libc_init_array+0x24>
 8008850:	4d0b      	ldr	r5, [pc, #44]	; (8008880 <__libc_init_array+0x40>)
 8008852:	4c0c      	ldr	r4, [pc, #48]	; (8008884 <__libc_init_array+0x44>)
 8008854:	f004 fbd4 	bl	800d000 <_init>
 8008858:	1b64      	subs	r4, r4, r5
 800885a:	10a4      	asrs	r4, r4, #2
 800885c:	2600      	movs	r6, #0
 800885e:	42a6      	cmp	r6, r4
 8008860:	d105      	bne.n	800886e <__libc_init_array+0x2e>
 8008862:	bd70      	pop	{r4, r5, r6, pc}
 8008864:	f855 3b04 	ldr.w	r3, [r5], #4
 8008868:	4798      	blx	r3
 800886a:	3601      	adds	r6, #1
 800886c:	e7ee      	b.n	800884c <__libc_init_array+0xc>
 800886e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008872:	4798      	blx	r3
 8008874:	3601      	adds	r6, #1
 8008876:	e7f2      	b.n	800885e <__libc_init_array+0x1e>
 8008878:	0800d5a8 	.word	0x0800d5a8
 800887c:	0800d5a8 	.word	0x0800d5a8
 8008880:	0800d5a8 	.word	0x0800d5a8
 8008884:	0800d5ac 	.word	0x0800d5ac

08008888 <memset>:
 8008888:	4402      	add	r2, r0
 800888a:	4603      	mov	r3, r0
 800888c:	4293      	cmp	r3, r2
 800888e:	d100      	bne.n	8008892 <memset+0xa>
 8008890:	4770      	bx	lr
 8008892:	f803 1b01 	strb.w	r1, [r3], #1
 8008896:	e7f9      	b.n	800888c <memset+0x4>

08008898 <__cvt>:
 8008898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800889a:	ed2d 8b02 	vpush	{d8}
 800889e:	eeb0 8b40 	vmov.f64	d8, d0
 80088a2:	b085      	sub	sp, #20
 80088a4:	4617      	mov	r7, r2
 80088a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80088a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80088aa:	ee18 2a90 	vmov	r2, s17
 80088ae:	f025 0520 	bic.w	r5, r5, #32
 80088b2:	2a00      	cmp	r2, #0
 80088b4:	bfb6      	itet	lt
 80088b6:	222d      	movlt	r2, #45	; 0x2d
 80088b8:	2200      	movge	r2, #0
 80088ba:	eeb1 8b40 	vneglt.f64	d8, d0
 80088be:	2d46      	cmp	r5, #70	; 0x46
 80088c0:	460c      	mov	r4, r1
 80088c2:	701a      	strb	r2, [r3, #0]
 80088c4:	d004      	beq.n	80088d0 <__cvt+0x38>
 80088c6:	2d45      	cmp	r5, #69	; 0x45
 80088c8:	d100      	bne.n	80088cc <__cvt+0x34>
 80088ca:	3401      	adds	r4, #1
 80088cc:	2102      	movs	r1, #2
 80088ce:	e000      	b.n	80088d2 <__cvt+0x3a>
 80088d0:	2103      	movs	r1, #3
 80088d2:	ab03      	add	r3, sp, #12
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	ab02      	add	r3, sp, #8
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	4622      	mov	r2, r4
 80088dc:	4633      	mov	r3, r6
 80088de:	eeb0 0b48 	vmov.f64	d0, d8
 80088e2:	f001 fd95 	bl	800a410 <_dtoa_r>
 80088e6:	2d47      	cmp	r5, #71	; 0x47
 80088e8:	d101      	bne.n	80088ee <__cvt+0x56>
 80088ea:	07fb      	lsls	r3, r7, #31
 80088ec:	d51a      	bpl.n	8008924 <__cvt+0x8c>
 80088ee:	2d46      	cmp	r5, #70	; 0x46
 80088f0:	eb00 0204 	add.w	r2, r0, r4
 80088f4:	d10c      	bne.n	8008910 <__cvt+0x78>
 80088f6:	7803      	ldrb	r3, [r0, #0]
 80088f8:	2b30      	cmp	r3, #48	; 0x30
 80088fa:	d107      	bne.n	800890c <__cvt+0x74>
 80088fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008904:	bf1c      	itt	ne
 8008906:	f1c4 0401 	rsbne	r4, r4, #1
 800890a:	6034      	strne	r4, [r6, #0]
 800890c:	6833      	ldr	r3, [r6, #0]
 800890e:	441a      	add	r2, r3
 8008910:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008918:	bf08      	it	eq
 800891a:	9203      	streq	r2, [sp, #12]
 800891c:	2130      	movs	r1, #48	; 0x30
 800891e:	9b03      	ldr	r3, [sp, #12]
 8008920:	4293      	cmp	r3, r2
 8008922:	d307      	bcc.n	8008934 <__cvt+0x9c>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008928:	1a1b      	subs	r3, r3, r0
 800892a:	6013      	str	r3, [r2, #0]
 800892c:	b005      	add	sp, #20
 800892e:	ecbd 8b02 	vpop	{d8}
 8008932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008934:	1c5c      	adds	r4, r3, #1
 8008936:	9403      	str	r4, [sp, #12]
 8008938:	7019      	strb	r1, [r3, #0]
 800893a:	e7f0      	b.n	800891e <__cvt+0x86>

0800893c <__exponent>:
 800893c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800893e:	4603      	mov	r3, r0
 8008940:	2900      	cmp	r1, #0
 8008942:	bfb8      	it	lt
 8008944:	4249      	neglt	r1, r1
 8008946:	f803 2b02 	strb.w	r2, [r3], #2
 800894a:	bfb4      	ite	lt
 800894c:	222d      	movlt	r2, #45	; 0x2d
 800894e:	222b      	movge	r2, #43	; 0x2b
 8008950:	2909      	cmp	r1, #9
 8008952:	7042      	strb	r2, [r0, #1]
 8008954:	dd2a      	ble.n	80089ac <__exponent+0x70>
 8008956:	f10d 0407 	add.w	r4, sp, #7
 800895a:	46a4      	mov	ip, r4
 800895c:	270a      	movs	r7, #10
 800895e:	46a6      	mov	lr, r4
 8008960:	460a      	mov	r2, r1
 8008962:	fb91 f6f7 	sdiv	r6, r1, r7
 8008966:	fb07 1516 	mls	r5, r7, r6, r1
 800896a:	3530      	adds	r5, #48	; 0x30
 800896c:	2a63      	cmp	r2, #99	; 0x63
 800896e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008972:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008976:	4631      	mov	r1, r6
 8008978:	dcf1      	bgt.n	800895e <__exponent+0x22>
 800897a:	3130      	adds	r1, #48	; 0x30
 800897c:	f1ae 0502 	sub.w	r5, lr, #2
 8008980:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008984:	1c44      	adds	r4, r0, #1
 8008986:	4629      	mov	r1, r5
 8008988:	4561      	cmp	r1, ip
 800898a:	d30a      	bcc.n	80089a2 <__exponent+0x66>
 800898c:	f10d 0209 	add.w	r2, sp, #9
 8008990:	eba2 020e 	sub.w	r2, r2, lr
 8008994:	4565      	cmp	r5, ip
 8008996:	bf88      	it	hi
 8008998:	2200      	movhi	r2, #0
 800899a:	4413      	add	r3, r2
 800899c:	1a18      	subs	r0, r3, r0
 800899e:	b003      	add	sp, #12
 80089a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80089aa:	e7ed      	b.n	8008988 <__exponent+0x4c>
 80089ac:	2330      	movs	r3, #48	; 0x30
 80089ae:	3130      	adds	r1, #48	; 0x30
 80089b0:	7083      	strb	r3, [r0, #2]
 80089b2:	70c1      	strb	r1, [r0, #3]
 80089b4:	1d03      	adds	r3, r0, #4
 80089b6:	e7f1      	b.n	800899c <__exponent+0x60>

080089b8 <_printf_float>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	b08b      	sub	sp, #44	; 0x2c
 80089be:	460c      	mov	r4, r1
 80089c0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80089c4:	4616      	mov	r6, r2
 80089c6:	461f      	mov	r7, r3
 80089c8:	4605      	mov	r5, r0
 80089ca:	f002 fe11 	bl	800b5f0 <_localeconv_r>
 80089ce:	f8d0 b000 	ldr.w	fp, [r0]
 80089d2:	4658      	mov	r0, fp
 80089d4:	f7f7 fc9c 	bl	8000310 <strlen>
 80089d8:	2300      	movs	r3, #0
 80089da:	9308      	str	r3, [sp, #32]
 80089dc:	f8d8 3000 	ldr.w	r3, [r8]
 80089e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80089e4:	6822      	ldr	r2, [r4, #0]
 80089e6:	3307      	adds	r3, #7
 80089e8:	f023 0307 	bic.w	r3, r3, #7
 80089ec:	f103 0108 	add.w	r1, r3, #8
 80089f0:	f8c8 1000 	str.w	r1, [r8]
 80089f4:	4682      	mov	sl, r0
 80089f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80089fe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008c60 <_printf_float+0x2a8>
 8008a02:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008a06:	eeb0 6bc0 	vabs.f64	d6, d0
 8008a0a:	eeb4 6b47 	vcmp.f64	d6, d7
 8008a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a12:	dd24      	ble.n	8008a5e <_printf_float+0xa6>
 8008a14:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a1c:	d502      	bpl.n	8008a24 <_printf_float+0x6c>
 8008a1e:	232d      	movs	r3, #45	; 0x2d
 8008a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a24:	4b90      	ldr	r3, [pc, #576]	; (8008c68 <_printf_float+0x2b0>)
 8008a26:	4891      	ldr	r0, [pc, #580]	; (8008c6c <_printf_float+0x2b4>)
 8008a28:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008a2c:	bf94      	ite	ls
 8008a2e:	4698      	movls	r8, r3
 8008a30:	4680      	movhi	r8, r0
 8008a32:	2303      	movs	r3, #3
 8008a34:	6123      	str	r3, [r4, #16]
 8008a36:	f022 0204 	bic.w	r2, r2, #4
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	6022      	str	r2, [r4, #0]
 8008a3e:	9304      	str	r3, [sp, #16]
 8008a40:	9700      	str	r7, [sp, #0]
 8008a42:	4633      	mov	r3, r6
 8008a44:	aa09      	add	r2, sp, #36	; 0x24
 8008a46:	4621      	mov	r1, r4
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f000 f9d3 	bl	8008df4 <_printf_common>
 8008a4e:	3001      	adds	r0, #1
 8008a50:	f040 808a 	bne.w	8008b68 <_printf_float+0x1b0>
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295
 8008a58:	b00b      	add	sp, #44	; 0x2c
 8008a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a5e:	eeb4 0b40 	vcmp.f64	d0, d0
 8008a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a66:	d709      	bvc.n	8008a7c <_printf_float+0xc4>
 8008a68:	ee10 3a90 	vmov	r3, s1
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	bfbc      	itt	lt
 8008a70:	232d      	movlt	r3, #45	; 0x2d
 8008a72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a76:	487e      	ldr	r0, [pc, #504]	; (8008c70 <_printf_float+0x2b8>)
 8008a78:	4b7e      	ldr	r3, [pc, #504]	; (8008c74 <_printf_float+0x2bc>)
 8008a7a:	e7d5      	b.n	8008a28 <_printf_float+0x70>
 8008a7c:	6863      	ldr	r3, [r4, #4]
 8008a7e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008a82:	9104      	str	r1, [sp, #16]
 8008a84:	1c59      	adds	r1, r3, #1
 8008a86:	d13c      	bne.n	8008b02 <_printf_float+0x14a>
 8008a88:	2306      	movs	r3, #6
 8008a8a:	6063      	str	r3, [r4, #4]
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	9303      	str	r3, [sp, #12]
 8008a90:	ab08      	add	r3, sp, #32
 8008a92:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008a96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a9a:	ab07      	add	r3, sp, #28
 8008a9c:	6861      	ldr	r1, [r4, #4]
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	6022      	str	r2, [r4, #0]
 8008aa2:	f10d 031b 	add.w	r3, sp, #27
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f7ff fef6 	bl	8008898 <__cvt>
 8008aac:	9b04      	ldr	r3, [sp, #16]
 8008aae:	9907      	ldr	r1, [sp, #28]
 8008ab0:	2b47      	cmp	r3, #71	; 0x47
 8008ab2:	4680      	mov	r8, r0
 8008ab4:	d108      	bne.n	8008ac8 <_printf_float+0x110>
 8008ab6:	1cc8      	adds	r0, r1, #3
 8008ab8:	db02      	blt.n	8008ac0 <_printf_float+0x108>
 8008aba:	6863      	ldr	r3, [r4, #4]
 8008abc:	4299      	cmp	r1, r3
 8008abe:	dd41      	ble.n	8008b44 <_printf_float+0x18c>
 8008ac0:	f1a9 0902 	sub.w	r9, r9, #2
 8008ac4:	fa5f f989 	uxtb.w	r9, r9
 8008ac8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008acc:	d820      	bhi.n	8008b10 <_printf_float+0x158>
 8008ace:	3901      	subs	r1, #1
 8008ad0:	464a      	mov	r2, r9
 8008ad2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ad6:	9107      	str	r1, [sp, #28]
 8008ad8:	f7ff ff30 	bl	800893c <__exponent>
 8008adc:	9a08      	ldr	r2, [sp, #32]
 8008ade:	9004      	str	r0, [sp, #16]
 8008ae0:	1813      	adds	r3, r2, r0
 8008ae2:	2a01      	cmp	r2, #1
 8008ae4:	6123      	str	r3, [r4, #16]
 8008ae6:	dc02      	bgt.n	8008aee <_printf_float+0x136>
 8008ae8:	6822      	ldr	r2, [r4, #0]
 8008aea:	07d2      	lsls	r2, r2, #31
 8008aec:	d501      	bpl.n	8008af2 <_printf_float+0x13a>
 8008aee:	3301      	adds	r3, #1
 8008af0:	6123      	str	r3, [r4, #16]
 8008af2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0a2      	beq.n	8008a40 <_printf_float+0x88>
 8008afa:	232d      	movs	r3, #45	; 0x2d
 8008afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b00:	e79e      	b.n	8008a40 <_printf_float+0x88>
 8008b02:	9904      	ldr	r1, [sp, #16]
 8008b04:	2947      	cmp	r1, #71	; 0x47
 8008b06:	d1c1      	bne.n	8008a8c <_printf_float+0xd4>
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1bf      	bne.n	8008a8c <_printf_float+0xd4>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e7bc      	b.n	8008a8a <_printf_float+0xd2>
 8008b10:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008b14:	d118      	bne.n	8008b48 <_printf_float+0x190>
 8008b16:	2900      	cmp	r1, #0
 8008b18:	6863      	ldr	r3, [r4, #4]
 8008b1a:	dd0b      	ble.n	8008b34 <_printf_float+0x17c>
 8008b1c:	6121      	str	r1, [r4, #16]
 8008b1e:	b913      	cbnz	r3, 8008b26 <_printf_float+0x16e>
 8008b20:	6822      	ldr	r2, [r4, #0]
 8008b22:	07d0      	lsls	r0, r2, #31
 8008b24:	d502      	bpl.n	8008b2c <_printf_float+0x174>
 8008b26:	3301      	adds	r3, #1
 8008b28:	440b      	add	r3, r1
 8008b2a:	6123      	str	r3, [r4, #16]
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b30:	9304      	str	r3, [sp, #16]
 8008b32:	e7de      	b.n	8008af2 <_printf_float+0x13a>
 8008b34:	b913      	cbnz	r3, 8008b3c <_printf_float+0x184>
 8008b36:	6822      	ldr	r2, [r4, #0]
 8008b38:	07d2      	lsls	r2, r2, #31
 8008b3a:	d501      	bpl.n	8008b40 <_printf_float+0x188>
 8008b3c:	3302      	adds	r3, #2
 8008b3e:	e7f4      	b.n	8008b2a <_printf_float+0x172>
 8008b40:	2301      	movs	r3, #1
 8008b42:	e7f2      	b.n	8008b2a <_printf_float+0x172>
 8008b44:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008b48:	9b08      	ldr	r3, [sp, #32]
 8008b4a:	4299      	cmp	r1, r3
 8008b4c:	db05      	blt.n	8008b5a <_printf_float+0x1a2>
 8008b4e:	6823      	ldr	r3, [r4, #0]
 8008b50:	6121      	str	r1, [r4, #16]
 8008b52:	07d8      	lsls	r0, r3, #31
 8008b54:	d5ea      	bpl.n	8008b2c <_printf_float+0x174>
 8008b56:	1c4b      	adds	r3, r1, #1
 8008b58:	e7e7      	b.n	8008b2a <_printf_float+0x172>
 8008b5a:	2900      	cmp	r1, #0
 8008b5c:	bfd4      	ite	le
 8008b5e:	f1c1 0202 	rsble	r2, r1, #2
 8008b62:	2201      	movgt	r2, #1
 8008b64:	4413      	add	r3, r2
 8008b66:	e7e0      	b.n	8008b2a <_printf_float+0x172>
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	055a      	lsls	r2, r3, #21
 8008b6c:	d407      	bmi.n	8008b7e <_printf_float+0x1c6>
 8008b6e:	6923      	ldr	r3, [r4, #16]
 8008b70:	4642      	mov	r2, r8
 8008b72:	4631      	mov	r1, r6
 8008b74:	4628      	mov	r0, r5
 8008b76:	47b8      	blx	r7
 8008b78:	3001      	adds	r0, #1
 8008b7a:	d12a      	bne.n	8008bd2 <_printf_float+0x21a>
 8008b7c:	e76a      	b.n	8008a54 <_printf_float+0x9c>
 8008b7e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b82:	f240 80e2 	bls.w	8008d4a <_printf_float+0x392>
 8008b86:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008b8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b92:	d133      	bne.n	8008bfc <_printf_float+0x244>
 8008b94:	4a38      	ldr	r2, [pc, #224]	; (8008c78 <_printf_float+0x2c0>)
 8008b96:	2301      	movs	r3, #1
 8008b98:	4631      	mov	r1, r6
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	47b8      	blx	r7
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	f43f af58 	beq.w	8008a54 <_printf_float+0x9c>
 8008ba4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	db02      	blt.n	8008bb2 <_printf_float+0x1fa>
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	07d8      	lsls	r0, r3, #31
 8008bb0:	d50f      	bpl.n	8008bd2 <_printf_float+0x21a>
 8008bb2:	4653      	mov	r3, sl
 8008bb4:	465a      	mov	r2, fp
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	f43f af49 	beq.w	8008a54 <_printf_float+0x9c>
 8008bc2:	f04f 0800 	mov.w	r8, #0
 8008bc6:	f104 091a 	add.w	r9, r4, #26
 8008bca:	9b08      	ldr	r3, [sp, #32]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	4543      	cmp	r3, r8
 8008bd0:	dc09      	bgt.n	8008be6 <_printf_float+0x22e>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	079b      	lsls	r3, r3, #30
 8008bd6:	f100 8108 	bmi.w	8008dea <_printf_float+0x432>
 8008bda:	68e0      	ldr	r0, [r4, #12]
 8008bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bde:	4298      	cmp	r0, r3
 8008be0:	bfb8      	it	lt
 8008be2:	4618      	movlt	r0, r3
 8008be4:	e738      	b.n	8008a58 <_printf_float+0xa0>
 8008be6:	2301      	movs	r3, #1
 8008be8:	464a      	mov	r2, r9
 8008bea:	4631      	mov	r1, r6
 8008bec:	4628      	mov	r0, r5
 8008bee:	47b8      	blx	r7
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	f43f af2f 	beq.w	8008a54 <_printf_float+0x9c>
 8008bf6:	f108 0801 	add.w	r8, r8, #1
 8008bfa:	e7e6      	b.n	8008bca <_printf_float+0x212>
 8008bfc:	9b07      	ldr	r3, [sp, #28]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	dc3c      	bgt.n	8008c7c <_printf_float+0x2c4>
 8008c02:	4a1d      	ldr	r2, [pc, #116]	; (8008c78 <_printf_float+0x2c0>)
 8008c04:	2301      	movs	r3, #1
 8008c06:	4631      	mov	r1, r6
 8008c08:	4628      	mov	r0, r5
 8008c0a:	47b8      	blx	r7
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	f43f af21 	beq.w	8008a54 <_printf_float+0x9c>
 8008c12:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	d102      	bne.n	8008c20 <_printf_float+0x268>
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	07d9      	lsls	r1, r3, #31
 8008c1e:	d5d8      	bpl.n	8008bd2 <_printf_float+0x21a>
 8008c20:	4653      	mov	r3, sl
 8008c22:	465a      	mov	r2, fp
 8008c24:	4631      	mov	r1, r6
 8008c26:	4628      	mov	r0, r5
 8008c28:	47b8      	blx	r7
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	f43f af12 	beq.w	8008a54 <_printf_float+0x9c>
 8008c30:	f04f 0900 	mov.w	r9, #0
 8008c34:	f104 0a1a 	add.w	sl, r4, #26
 8008c38:	9b07      	ldr	r3, [sp, #28]
 8008c3a:	425b      	negs	r3, r3
 8008c3c:	454b      	cmp	r3, r9
 8008c3e:	dc01      	bgt.n	8008c44 <_printf_float+0x28c>
 8008c40:	9b08      	ldr	r3, [sp, #32]
 8008c42:	e795      	b.n	8008b70 <_printf_float+0x1b8>
 8008c44:	2301      	movs	r3, #1
 8008c46:	4652      	mov	r2, sl
 8008c48:	4631      	mov	r1, r6
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	47b8      	blx	r7
 8008c4e:	3001      	adds	r0, #1
 8008c50:	f43f af00 	beq.w	8008a54 <_printf_float+0x9c>
 8008c54:	f109 0901 	add.w	r9, r9, #1
 8008c58:	e7ee      	b.n	8008c38 <_printf_float+0x280>
 8008c5a:	bf00      	nop
 8008c5c:	f3af 8000 	nop.w
 8008c60:	ffffffff 	.word	0xffffffff
 8008c64:	7fefffff 	.word	0x7fefffff
 8008c68:	0800d0a4 	.word	0x0800d0a4
 8008c6c:	0800d0a8 	.word	0x0800d0a8
 8008c70:	0800d0b0 	.word	0x0800d0b0
 8008c74:	0800d0ac 	.word	0x0800d0ac
 8008c78:	0800d0b4 	.word	0x0800d0b4
 8008c7c:	9a08      	ldr	r2, [sp, #32]
 8008c7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c80:	429a      	cmp	r2, r3
 8008c82:	bfa8      	it	ge
 8008c84:	461a      	movge	r2, r3
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	4691      	mov	r9, r2
 8008c8a:	dc38      	bgt.n	8008cfe <_printf_float+0x346>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	9305      	str	r3, [sp, #20]
 8008c90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c94:	f104 021a 	add.w	r2, r4, #26
 8008c98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c9a:	9905      	ldr	r1, [sp, #20]
 8008c9c:	9304      	str	r3, [sp, #16]
 8008c9e:	eba3 0309 	sub.w	r3, r3, r9
 8008ca2:	428b      	cmp	r3, r1
 8008ca4:	dc33      	bgt.n	8008d0e <_printf_float+0x356>
 8008ca6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	db3c      	blt.n	8008d28 <_printf_float+0x370>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	07da      	lsls	r2, r3, #31
 8008cb2:	d439      	bmi.n	8008d28 <_printf_float+0x370>
 8008cb4:	9b08      	ldr	r3, [sp, #32]
 8008cb6:	9a04      	ldr	r2, [sp, #16]
 8008cb8:	9907      	ldr	r1, [sp, #28]
 8008cba:	1a9a      	subs	r2, r3, r2
 8008cbc:	eba3 0901 	sub.w	r9, r3, r1
 8008cc0:	4591      	cmp	r9, r2
 8008cc2:	bfa8      	it	ge
 8008cc4:	4691      	movge	r9, r2
 8008cc6:	f1b9 0f00 	cmp.w	r9, #0
 8008cca:	dc35      	bgt.n	8008d38 <_printf_float+0x380>
 8008ccc:	f04f 0800 	mov.w	r8, #0
 8008cd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cd4:	f104 0a1a 	add.w	sl, r4, #26
 8008cd8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008cdc:	1a9b      	subs	r3, r3, r2
 8008cde:	eba3 0309 	sub.w	r3, r3, r9
 8008ce2:	4543      	cmp	r3, r8
 8008ce4:	f77f af75 	ble.w	8008bd2 <_printf_float+0x21a>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	4652      	mov	r2, sl
 8008cec:	4631      	mov	r1, r6
 8008cee:	4628      	mov	r0, r5
 8008cf0:	47b8      	blx	r7
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	f43f aeae 	beq.w	8008a54 <_printf_float+0x9c>
 8008cf8:	f108 0801 	add.w	r8, r8, #1
 8008cfc:	e7ec      	b.n	8008cd8 <_printf_float+0x320>
 8008cfe:	4613      	mov	r3, r2
 8008d00:	4631      	mov	r1, r6
 8008d02:	4642      	mov	r2, r8
 8008d04:	4628      	mov	r0, r5
 8008d06:	47b8      	blx	r7
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d1bf      	bne.n	8008c8c <_printf_float+0x2d4>
 8008d0c:	e6a2      	b.n	8008a54 <_printf_float+0x9c>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	4631      	mov	r1, r6
 8008d12:	4628      	mov	r0, r5
 8008d14:	9204      	str	r2, [sp, #16]
 8008d16:	47b8      	blx	r7
 8008d18:	3001      	adds	r0, #1
 8008d1a:	f43f ae9b 	beq.w	8008a54 <_printf_float+0x9c>
 8008d1e:	9b05      	ldr	r3, [sp, #20]
 8008d20:	9a04      	ldr	r2, [sp, #16]
 8008d22:	3301      	adds	r3, #1
 8008d24:	9305      	str	r3, [sp, #20]
 8008d26:	e7b7      	b.n	8008c98 <_printf_float+0x2e0>
 8008d28:	4653      	mov	r3, sl
 8008d2a:	465a      	mov	r2, fp
 8008d2c:	4631      	mov	r1, r6
 8008d2e:	4628      	mov	r0, r5
 8008d30:	47b8      	blx	r7
 8008d32:	3001      	adds	r0, #1
 8008d34:	d1be      	bne.n	8008cb4 <_printf_float+0x2fc>
 8008d36:	e68d      	b.n	8008a54 <_printf_float+0x9c>
 8008d38:	9a04      	ldr	r2, [sp, #16]
 8008d3a:	464b      	mov	r3, r9
 8008d3c:	4442      	add	r2, r8
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4628      	mov	r0, r5
 8008d42:	47b8      	blx	r7
 8008d44:	3001      	adds	r0, #1
 8008d46:	d1c1      	bne.n	8008ccc <_printf_float+0x314>
 8008d48:	e684      	b.n	8008a54 <_printf_float+0x9c>
 8008d4a:	9a08      	ldr	r2, [sp, #32]
 8008d4c:	2a01      	cmp	r2, #1
 8008d4e:	dc01      	bgt.n	8008d54 <_printf_float+0x39c>
 8008d50:	07db      	lsls	r3, r3, #31
 8008d52:	d537      	bpl.n	8008dc4 <_printf_float+0x40c>
 8008d54:	2301      	movs	r3, #1
 8008d56:	4642      	mov	r2, r8
 8008d58:	4631      	mov	r1, r6
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	47b8      	blx	r7
 8008d5e:	3001      	adds	r0, #1
 8008d60:	f43f ae78 	beq.w	8008a54 <_printf_float+0x9c>
 8008d64:	4653      	mov	r3, sl
 8008d66:	465a      	mov	r2, fp
 8008d68:	4631      	mov	r1, r6
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	47b8      	blx	r7
 8008d6e:	3001      	adds	r0, #1
 8008d70:	f43f ae70 	beq.w	8008a54 <_printf_float+0x9c>
 8008d74:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008d78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d80:	d01b      	beq.n	8008dba <_printf_float+0x402>
 8008d82:	9b08      	ldr	r3, [sp, #32]
 8008d84:	f108 0201 	add.w	r2, r8, #1
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	47b8      	blx	r7
 8008d90:	3001      	adds	r0, #1
 8008d92:	d10e      	bne.n	8008db2 <_printf_float+0x3fa>
 8008d94:	e65e      	b.n	8008a54 <_printf_float+0x9c>
 8008d96:	2301      	movs	r3, #1
 8008d98:	464a      	mov	r2, r9
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	47b8      	blx	r7
 8008da0:	3001      	adds	r0, #1
 8008da2:	f43f ae57 	beq.w	8008a54 <_printf_float+0x9c>
 8008da6:	f108 0801 	add.w	r8, r8, #1
 8008daa:	9b08      	ldr	r3, [sp, #32]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	4543      	cmp	r3, r8
 8008db0:	dcf1      	bgt.n	8008d96 <_printf_float+0x3de>
 8008db2:	9b04      	ldr	r3, [sp, #16]
 8008db4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008db8:	e6db      	b.n	8008b72 <_printf_float+0x1ba>
 8008dba:	f04f 0800 	mov.w	r8, #0
 8008dbe:	f104 091a 	add.w	r9, r4, #26
 8008dc2:	e7f2      	b.n	8008daa <_printf_float+0x3f2>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	4642      	mov	r2, r8
 8008dc8:	e7df      	b.n	8008d8a <_printf_float+0x3d2>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	464a      	mov	r2, r9
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	47b8      	blx	r7
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	f43f ae3d 	beq.w	8008a54 <_printf_float+0x9c>
 8008dda:	f108 0801 	add.w	r8, r8, #1
 8008dde:	68e3      	ldr	r3, [r4, #12]
 8008de0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008de2:	1a5b      	subs	r3, r3, r1
 8008de4:	4543      	cmp	r3, r8
 8008de6:	dcf0      	bgt.n	8008dca <_printf_float+0x412>
 8008de8:	e6f7      	b.n	8008bda <_printf_float+0x222>
 8008dea:	f04f 0800 	mov.w	r8, #0
 8008dee:	f104 0919 	add.w	r9, r4, #25
 8008df2:	e7f4      	b.n	8008dde <_printf_float+0x426>

08008df4 <_printf_common>:
 8008df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df8:	4616      	mov	r6, r2
 8008dfa:	4699      	mov	r9, r3
 8008dfc:	688a      	ldr	r2, [r1, #8]
 8008dfe:	690b      	ldr	r3, [r1, #16]
 8008e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e04:	4293      	cmp	r3, r2
 8008e06:	bfb8      	it	lt
 8008e08:	4613      	movlt	r3, r2
 8008e0a:	6033      	str	r3, [r6, #0]
 8008e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e10:	4607      	mov	r7, r0
 8008e12:	460c      	mov	r4, r1
 8008e14:	b10a      	cbz	r2, 8008e1a <_printf_common+0x26>
 8008e16:	3301      	adds	r3, #1
 8008e18:	6033      	str	r3, [r6, #0]
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	0699      	lsls	r1, r3, #26
 8008e1e:	bf42      	ittt	mi
 8008e20:	6833      	ldrmi	r3, [r6, #0]
 8008e22:	3302      	addmi	r3, #2
 8008e24:	6033      	strmi	r3, [r6, #0]
 8008e26:	6825      	ldr	r5, [r4, #0]
 8008e28:	f015 0506 	ands.w	r5, r5, #6
 8008e2c:	d106      	bne.n	8008e3c <_printf_common+0x48>
 8008e2e:	f104 0a19 	add.w	sl, r4, #25
 8008e32:	68e3      	ldr	r3, [r4, #12]
 8008e34:	6832      	ldr	r2, [r6, #0]
 8008e36:	1a9b      	subs	r3, r3, r2
 8008e38:	42ab      	cmp	r3, r5
 8008e3a:	dc26      	bgt.n	8008e8a <_printf_common+0x96>
 8008e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e40:	1e13      	subs	r3, r2, #0
 8008e42:	6822      	ldr	r2, [r4, #0]
 8008e44:	bf18      	it	ne
 8008e46:	2301      	movne	r3, #1
 8008e48:	0692      	lsls	r2, r2, #26
 8008e4a:	d42b      	bmi.n	8008ea4 <_printf_common+0xb0>
 8008e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e50:	4649      	mov	r1, r9
 8008e52:	4638      	mov	r0, r7
 8008e54:	47c0      	blx	r8
 8008e56:	3001      	adds	r0, #1
 8008e58:	d01e      	beq.n	8008e98 <_printf_common+0xa4>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	68e5      	ldr	r5, [r4, #12]
 8008e5e:	6832      	ldr	r2, [r6, #0]
 8008e60:	f003 0306 	and.w	r3, r3, #6
 8008e64:	2b04      	cmp	r3, #4
 8008e66:	bf08      	it	eq
 8008e68:	1aad      	subeq	r5, r5, r2
 8008e6a:	68a3      	ldr	r3, [r4, #8]
 8008e6c:	6922      	ldr	r2, [r4, #16]
 8008e6e:	bf0c      	ite	eq
 8008e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e74:	2500      	movne	r5, #0
 8008e76:	4293      	cmp	r3, r2
 8008e78:	bfc4      	itt	gt
 8008e7a:	1a9b      	subgt	r3, r3, r2
 8008e7c:	18ed      	addgt	r5, r5, r3
 8008e7e:	2600      	movs	r6, #0
 8008e80:	341a      	adds	r4, #26
 8008e82:	42b5      	cmp	r5, r6
 8008e84:	d11a      	bne.n	8008ebc <_printf_common+0xc8>
 8008e86:	2000      	movs	r0, #0
 8008e88:	e008      	b.n	8008e9c <_printf_common+0xa8>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	4652      	mov	r2, sl
 8008e8e:	4649      	mov	r1, r9
 8008e90:	4638      	mov	r0, r7
 8008e92:	47c0      	blx	r8
 8008e94:	3001      	adds	r0, #1
 8008e96:	d103      	bne.n	8008ea0 <_printf_common+0xac>
 8008e98:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea0:	3501      	adds	r5, #1
 8008ea2:	e7c6      	b.n	8008e32 <_printf_common+0x3e>
 8008ea4:	18e1      	adds	r1, r4, r3
 8008ea6:	1c5a      	adds	r2, r3, #1
 8008ea8:	2030      	movs	r0, #48	; 0x30
 8008eaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eae:	4422      	add	r2, r4
 8008eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008eb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008eb8:	3302      	adds	r3, #2
 8008eba:	e7c7      	b.n	8008e4c <_printf_common+0x58>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	4649      	mov	r1, r9
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	47c0      	blx	r8
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	d0e6      	beq.n	8008e98 <_printf_common+0xa4>
 8008eca:	3601      	adds	r6, #1
 8008ecc:	e7d9      	b.n	8008e82 <_printf_common+0x8e>
	...

08008ed0 <_printf_i>:
 8008ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed4:	7e0f      	ldrb	r7, [r1, #24]
 8008ed6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ed8:	2f78      	cmp	r7, #120	; 0x78
 8008eda:	4691      	mov	r9, r2
 8008edc:	4680      	mov	r8, r0
 8008ede:	460c      	mov	r4, r1
 8008ee0:	469a      	mov	sl, r3
 8008ee2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ee6:	d807      	bhi.n	8008ef8 <_printf_i+0x28>
 8008ee8:	2f62      	cmp	r7, #98	; 0x62
 8008eea:	d80a      	bhi.n	8008f02 <_printf_i+0x32>
 8008eec:	2f00      	cmp	r7, #0
 8008eee:	f000 80d8 	beq.w	80090a2 <_printf_i+0x1d2>
 8008ef2:	2f58      	cmp	r7, #88	; 0x58
 8008ef4:	f000 80a3 	beq.w	800903e <_printf_i+0x16e>
 8008ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008efc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f00:	e03a      	b.n	8008f78 <_printf_i+0xa8>
 8008f02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f06:	2b15      	cmp	r3, #21
 8008f08:	d8f6      	bhi.n	8008ef8 <_printf_i+0x28>
 8008f0a:	a101      	add	r1, pc, #4	; (adr r1, 8008f10 <_printf_i+0x40>)
 8008f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f10:	08008f69 	.word	0x08008f69
 8008f14:	08008f7d 	.word	0x08008f7d
 8008f18:	08008ef9 	.word	0x08008ef9
 8008f1c:	08008ef9 	.word	0x08008ef9
 8008f20:	08008ef9 	.word	0x08008ef9
 8008f24:	08008ef9 	.word	0x08008ef9
 8008f28:	08008f7d 	.word	0x08008f7d
 8008f2c:	08008ef9 	.word	0x08008ef9
 8008f30:	08008ef9 	.word	0x08008ef9
 8008f34:	08008ef9 	.word	0x08008ef9
 8008f38:	08008ef9 	.word	0x08008ef9
 8008f3c:	08009089 	.word	0x08009089
 8008f40:	08008fad 	.word	0x08008fad
 8008f44:	0800906b 	.word	0x0800906b
 8008f48:	08008ef9 	.word	0x08008ef9
 8008f4c:	08008ef9 	.word	0x08008ef9
 8008f50:	080090ab 	.word	0x080090ab
 8008f54:	08008ef9 	.word	0x08008ef9
 8008f58:	08008fad 	.word	0x08008fad
 8008f5c:	08008ef9 	.word	0x08008ef9
 8008f60:	08008ef9 	.word	0x08008ef9
 8008f64:	08009073 	.word	0x08009073
 8008f68:	682b      	ldr	r3, [r5, #0]
 8008f6a:	1d1a      	adds	r2, r3, #4
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	602a      	str	r2, [r5, #0]
 8008f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e0a3      	b.n	80090c4 <_printf_i+0x1f4>
 8008f7c:	6820      	ldr	r0, [r4, #0]
 8008f7e:	6829      	ldr	r1, [r5, #0]
 8008f80:	0606      	lsls	r6, r0, #24
 8008f82:	f101 0304 	add.w	r3, r1, #4
 8008f86:	d50a      	bpl.n	8008f9e <_printf_i+0xce>
 8008f88:	680e      	ldr	r6, [r1, #0]
 8008f8a:	602b      	str	r3, [r5, #0]
 8008f8c:	2e00      	cmp	r6, #0
 8008f8e:	da03      	bge.n	8008f98 <_printf_i+0xc8>
 8008f90:	232d      	movs	r3, #45	; 0x2d
 8008f92:	4276      	negs	r6, r6
 8008f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f98:	485e      	ldr	r0, [pc, #376]	; (8009114 <_printf_i+0x244>)
 8008f9a:	230a      	movs	r3, #10
 8008f9c:	e019      	b.n	8008fd2 <_printf_i+0x102>
 8008f9e:	680e      	ldr	r6, [r1, #0]
 8008fa0:	602b      	str	r3, [r5, #0]
 8008fa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fa6:	bf18      	it	ne
 8008fa8:	b236      	sxthne	r6, r6
 8008faa:	e7ef      	b.n	8008f8c <_printf_i+0xbc>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	6820      	ldr	r0, [r4, #0]
 8008fb0:	1d19      	adds	r1, r3, #4
 8008fb2:	6029      	str	r1, [r5, #0]
 8008fb4:	0601      	lsls	r1, r0, #24
 8008fb6:	d501      	bpl.n	8008fbc <_printf_i+0xec>
 8008fb8:	681e      	ldr	r6, [r3, #0]
 8008fba:	e002      	b.n	8008fc2 <_printf_i+0xf2>
 8008fbc:	0646      	lsls	r6, r0, #25
 8008fbe:	d5fb      	bpl.n	8008fb8 <_printf_i+0xe8>
 8008fc0:	881e      	ldrh	r6, [r3, #0]
 8008fc2:	4854      	ldr	r0, [pc, #336]	; (8009114 <_printf_i+0x244>)
 8008fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8008fc6:	bf0c      	ite	eq
 8008fc8:	2308      	moveq	r3, #8
 8008fca:	230a      	movne	r3, #10
 8008fcc:	2100      	movs	r1, #0
 8008fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fd2:	6865      	ldr	r5, [r4, #4]
 8008fd4:	60a5      	str	r5, [r4, #8]
 8008fd6:	2d00      	cmp	r5, #0
 8008fd8:	bfa2      	ittt	ge
 8008fda:	6821      	ldrge	r1, [r4, #0]
 8008fdc:	f021 0104 	bicge.w	r1, r1, #4
 8008fe0:	6021      	strge	r1, [r4, #0]
 8008fe2:	b90e      	cbnz	r6, 8008fe8 <_printf_i+0x118>
 8008fe4:	2d00      	cmp	r5, #0
 8008fe6:	d04d      	beq.n	8009084 <_printf_i+0x1b4>
 8008fe8:	4615      	mov	r5, r2
 8008fea:	fbb6 f1f3 	udiv	r1, r6, r3
 8008fee:	fb03 6711 	mls	r7, r3, r1, r6
 8008ff2:	5dc7      	ldrb	r7, [r0, r7]
 8008ff4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ff8:	4637      	mov	r7, r6
 8008ffa:	42bb      	cmp	r3, r7
 8008ffc:	460e      	mov	r6, r1
 8008ffe:	d9f4      	bls.n	8008fea <_printf_i+0x11a>
 8009000:	2b08      	cmp	r3, #8
 8009002:	d10b      	bne.n	800901c <_printf_i+0x14c>
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	07de      	lsls	r6, r3, #31
 8009008:	d508      	bpl.n	800901c <_printf_i+0x14c>
 800900a:	6923      	ldr	r3, [r4, #16]
 800900c:	6861      	ldr	r1, [r4, #4]
 800900e:	4299      	cmp	r1, r3
 8009010:	bfde      	ittt	le
 8009012:	2330      	movle	r3, #48	; 0x30
 8009014:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009018:	f105 35ff 	addle.w	r5, r5, #4294967295
 800901c:	1b52      	subs	r2, r2, r5
 800901e:	6122      	str	r2, [r4, #16]
 8009020:	f8cd a000 	str.w	sl, [sp]
 8009024:	464b      	mov	r3, r9
 8009026:	aa03      	add	r2, sp, #12
 8009028:	4621      	mov	r1, r4
 800902a:	4640      	mov	r0, r8
 800902c:	f7ff fee2 	bl	8008df4 <_printf_common>
 8009030:	3001      	adds	r0, #1
 8009032:	d14c      	bne.n	80090ce <_printf_i+0x1fe>
 8009034:	f04f 30ff 	mov.w	r0, #4294967295
 8009038:	b004      	add	sp, #16
 800903a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800903e:	4835      	ldr	r0, [pc, #212]	; (8009114 <_printf_i+0x244>)
 8009040:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009044:	6829      	ldr	r1, [r5, #0]
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	f851 6b04 	ldr.w	r6, [r1], #4
 800904c:	6029      	str	r1, [r5, #0]
 800904e:	061d      	lsls	r5, r3, #24
 8009050:	d514      	bpl.n	800907c <_printf_i+0x1ac>
 8009052:	07df      	lsls	r7, r3, #31
 8009054:	bf44      	itt	mi
 8009056:	f043 0320 	orrmi.w	r3, r3, #32
 800905a:	6023      	strmi	r3, [r4, #0]
 800905c:	b91e      	cbnz	r6, 8009066 <_printf_i+0x196>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	f023 0320 	bic.w	r3, r3, #32
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	2310      	movs	r3, #16
 8009068:	e7b0      	b.n	8008fcc <_printf_i+0xfc>
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	f043 0320 	orr.w	r3, r3, #32
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	2378      	movs	r3, #120	; 0x78
 8009074:	4828      	ldr	r0, [pc, #160]	; (8009118 <_printf_i+0x248>)
 8009076:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800907a:	e7e3      	b.n	8009044 <_printf_i+0x174>
 800907c:	0659      	lsls	r1, r3, #25
 800907e:	bf48      	it	mi
 8009080:	b2b6      	uxthmi	r6, r6
 8009082:	e7e6      	b.n	8009052 <_printf_i+0x182>
 8009084:	4615      	mov	r5, r2
 8009086:	e7bb      	b.n	8009000 <_printf_i+0x130>
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	6826      	ldr	r6, [r4, #0]
 800908c:	6961      	ldr	r1, [r4, #20]
 800908e:	1d18      	adds	r0, r3, #4
 8009090:	6028      	str	r0, [r5, #0]
 8009092:	0635      	lsls	r5, r6, #24
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	d501      	bpl.n	800909c <_printf_i+0x1cc>
 8009098:	6019      	str	r1, [r3, #0]
 800909a:	e002      	b.n	80090a2 <_printf_i+0x1d2>
 800909c:	0670      	lsls	r0, r6, #25
 800909e:	d5fb      	bpl.n	8009098 <_printf_i+0x1c8>
 80090a0:	8019      	strh	r1, [r3, #0]
 80090a2:	2300      	movs	r3, #0
 80090a4:	6123      	str	r3, [r4, #16]
 80090a6:	4615      	mov	r5, r2
 80090a8:	e7ba      	b.n	8009020 <_printf_i+0x150>
 80090aa:	682b      	ldr	r3, [r5, #0]
 80090ac:	1d1a      	adds	r2, r3, #4
 80090ae:	602a      	str	r2, [r5, #0]
 80090b0:	681d      	ldr	r5, [r3, #0]
 80090b2:	6862      	ldr	r2, [r4, #4]
 80090b4:	2100      	movs	r1, #0
 80090b6:	4628      	mov	r0, r5
 80090b8:	f7f7 f932 	bl	8000320 <memchr>
 80090bc:	b108      	cbz	r0, 80090c2 <_printf_i+0x1f2>
 80090be:	1b40      	subs	r0, r0, r5
 80090c0:	6060      	str	r0, [r4, #4]
 80090c2:	6863      	ldr	r3, [r4, #4]
 80090c4:	6123      	str	r3, [r4, #16]
 80090c6:	2300      	movs	r3, #0
 80090c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090cc:	e7a8      	b.n	8009020 <_printf_i+0x150>
 80090ce:	6923      	ldr	r3, [r4, #16]
 80090d0:	462a      	mov	r2, r5
 80090d2:	4649      	mov	r1, r9
 80090d4:	4640      	mov	r0, r8
 80090d6:	47d0      	blx	sl
 80090d8:	3001      	adds	r0, #1
 80090da:	d0ab      	beq.n	8009034 <_printf_i+0x164>
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	079b      	lsls	r3, r3, #30
 80090e0:	d413      	bmi.n	800910a <_printf_i+0x23a>
 80090e2:	68e0      	ldr	r0, [r4, #12]
 80090e4:	9b03      	ldr	r3, [sp, #12]
 80090e6:	4298      	cmp	r0, r3
 80090e8:	bfb8      	it	lt
 80090ea:	4618      	movlt	r0, r3
 80090ec:	e7a4      	b.n	8009038 <_printf_i+0x168>
 80090ee:	2301      	movs	r3, #1
 80090f0:	4632      	mov	r2, r6
 80090f2:	4649      	mov	r1, r9
 80090f4:	4640      	mov	r0, r8
 80090f6:	47d0      	blx	sl
 80090f8:	3001      	adds	r0, #1
 80090fa:	d09b      	beq.n	8009034 <_printf_i+0x164>
 80090fc:	3501      	adds	r5, #1
 80090fe:	68e3      	ldr	r3, [r4, #12]
 8009100:	9903      	ldr	r1, [sp, #12]
 8009102:	1a5b      	subs	r3, r3, r1
 8009104:	42ab      	cmp	r3, r5
 8009106:	dcf2      	bgt.n	80090ee <_printf_i+0x21e>
 8009108:	e7eb      	b.n	80090e2 <_printf_i+0x212>
 800910a:	2500      	movs	r5, #0
 800910c:	f104 0619 	add.w	r6, r4, #25
 8009110:	e7f5      	b.n	80090fe <_printf_i+0x22e>
 8009112:	bf00      	nop
 8009114:	0800d0b6 	.word	0x0800d0b6
 8009118:	0800d0c7 	.word	0x0800d0c7

0800911c <_scanf_float>:
 800911c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009120:	b087      	sub	sp, #28
 8009122:	4617      	mov	r7, r2
 8009124:	9303      	str	r3, [sp, #12]
 8009126:	688b      	ldr	r3, [r1, #8]
 8009128:	1e5a      	subs	r2, r3, #1
 800912a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800912e:	bf83      	ittte	hi
 8009130:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009134:	195b      	addhi	r3, r3, r5
 8009136:	9302      	strhi	r3, [sp, #8]
 8009138:	2300      	movls	r3, #0
 800913a:	bf86      	itte	hi
 800913c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009140:	608b      	strhi	r3, [r1, #8]
 8009142:	9302      	strls	r3, [sp, #8]
 8009144:	680b      	ldr	r3, [r1, #0]
 8009146:	468b      	mov	fp, r1
 8009148:	2500      	movs	r5, #0
 800914a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800914e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009152:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009156:	4680      	mov	r8, r0
 8009158:	460c      	mov	r4, r1
 800915a:	465e      	mov	r6, fp
 800915c:	46aa      	mov	sl, r5
 800915e:	46a9      	mov	r9, r5
 8009160:	9501      	str	r5, [sp, #4]
 8009162:	68a2      	ldr	r2, [r4, #8]
 8009164:	b152      	cbz	r2, 800917c <_scanf_float+0x60>
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b4e      	cmp	r3, #78	; 0x4e
 800916c:	d864      	bhi.n	8009238 <_scanf_float+0x11c>
 800916e:	2b40      	cmp	r3, #64	; 0x40
 8009170:	d83c      	bhi.n	80091ec <_scanf_float+0xd0>
 8009172:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009176:	b2c8      	uxtb	r0, r1
 8009178:	280e      	cmp	r0, #14
 800917a:	d93a      	bls.n	80091f2 <_scanf_float+0xd6>
 800917c:	f1b9 0f00 	cmp.w	r9, #0
 8009180:	d003      	beq.n	800918a <_scanf_float+0x6e>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800918e:	f1ba 0f01 	cmp.w	sl, #1
 8009192:	f200 8113 	bhi.w	80093bc <_scanf_float+0x2a0>
 8009196:	455e      	cmp	r6, fp
 8009198:	f200 8105 	bhi.w	80093a6 <_scanf_float+0x28a>
 800919c:	2501      	movs	r5, #1
 800919e:	4628      	mov	r0, r5
 80091a0:	b007      	add	sp, #28
 80091a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80091aa:	2a0d      	cmp	r2, #13
 80091ac:	d8e6      	bhi.n	800917c <_scanf_float+0x60>
 80091ae:	a101      	add	r1, pc, #4	; (adr r1, 80091b4 <_scanf_float+0x98>)
 80091b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80091b4:	080092f3 	.word	0x080092f3
 80091b8:	0800917d 	.word	0x0800917d
 80091bc:	0800917d 	.word	0x0800917d
 80091c0:	0800917d 	.word	0x0800917d
 80091c4:	08009353 	.word	0x08009353
 80091c8:	0800932b 	.word	0x0800932b
 80091cc:	0800917d 	.word	0x0800917d
 80091d0:	0800917d 	.word	0x0800917d
 80091d4:	08009301 	.word	0x08009301
 80091d8:	0800917d 	.word	0x0800917d
 80091dc:	0800917d 	.word	0x0800917d
 80091e0:	0800917d 	.word	0x0800917d
 80091e4:	0800917d 	.word	0x0800917d
 80091e8:	080092b9 	.word	0x080092b9
 80091ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80091f0:	e7db      	b.n	80091aa <_scanf_float+0x8e>
 80091f2:	290e      	cmp	r1, #14
 80091f4:	d8c2      	bhi.n	800917c <_scanf_float+0x60>
 80091f6:	a001      	add	r0, pc, #4	; (adr r0, 80091fc <_scanf_float+0xe0>)
 80091f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80091fc:	080092ab 	.word	0x080092ab
 8009200:	0800917d 	.word	0x0800917d
 8009204:	080092ab 	.word	0x080092ab
 8009208:	0800933f 	.word	0x0800933f
 800920c:	0800917d 	.word	0x0800917d
 8009210:	08009259 	.word	0x08009259
 8009214:	08009295 	.word	0x08009295
 8009218:	08009295 	.word	0x08009295
 800921c:	08009295 	.word	0x08009295
 8009220:	08009295 	.word	0x08009295
 8009224:	08009295 	.word	0x08009295
 8009228:	08009295 	.word	0x08009295
 800922c:	08009295 	.word	0x08009295
 8009230:	08009295 	.word	0x08009295
 8009234:	08009295 	.word	0x08009295
 8009238:	2b6e      	cmp	r3, #110	; 0x6e
 800923a:	d809      	bhi.n	8009250 <_scanf_float+0x134>
 800923c:	2b60      	cmp	r3, #96	; 0x60
 800923e:	d8b2      	bhi.n	80091a6 <_scanf_float+0x8a>
 8009240:	2b54      	cmp	r3, #84	; 0x54
 8009242:	d077      	beq.n	8009334 <_scanf_float+0x218>
 8009244:	2b59      	cmp	r3, #89	; 0x59
 8009246:	d199      	bne.n	800917c <_scanf_float+0x60>
 8009248:	2d07      	cmp	r5, #7
 800924a:	d197      	bne.n	800917c <_scanf_float+0x60>
 800924c:	2508      	movs	r5, #8
 800924e:	e029      	b.n	80092a4 <_scanf_float+0x188>
 8009250:	2b74      	cmp	r3, #116	; 0x74
 8009252:	d06f      	beq.n	8009334 <_scanf_float+0x218>
 8009254:	2b79      	cmp	r3, #121	; 0x79
 8009256:	e7f6      	b.n	8009246 <_scanf_float+0x12a>
 8009258:	6821      	ldr	r1, [r4, #0]
 800925a:	05c8      	lsls	r0, r1, #23
 800925c:	d51a      	bpl.n	8009294 <_scanf_float+0x178>
 800925e:	9b02      	ldr	r3, [sp, #8]
 8009260:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009264:	6021      	str	r1, [r4, #0]
 8009266:	f109 0901 	add.w	r9, r9, #1
 800926a:	b11b      	cbz	r3, 8009274 <_scanf_float+0x158>
 800926c:	3b01      	subs	r3, #1
 800926e:	3201      	adds	r2, #1
 8009270:	9302      	str	r3, [sp, #8]
 8009272:	60a2      	str	r2, [r4, #8]
 8009274:	68a3      	ldr	r3, [r4, #8]
 8009276:	3b01      	subs	r3, #1
 8009278:	60a3      	str	r3, [r4, #8]
 800927a:	6923      	ldr	r3, [r4, #16]
 800927c:	3301      	adds	r3, #1
 800927e:	6123      	str	r3, [r4, #16]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	3b01      	subs	r3, #1
 8009284:	2b00      	cmp	r3, #0
 8009286:	607b      	str	r3, [r7, #4]
 8009288:	f340 8084 	ble.w	8009394 <_scanf_float+0x278>
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	3301      	adds	r3, #1
 8009290:	603b      	str	r3, [r7, #0]
 8009292:	e766      	b.n	8009162 <_scanf_float+0x46>
 8009294:	eb1a 0f05 	cmn.w	sl, r5
 8009298:	f47f af70 	bne.w	800917c <_scanf_float+0x60>
 800929c:	6822      	ldr	r2, [r4, #0]
 800929e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80092a2:	6022      	str	r2, [r4, #0]
 80092a4:	f806 3b01 	strb.w	r3, [r6], #1
 80092a8:	e7e4      	b.n	8009274 <_scanf_float+0x158>
 80092aa:	6822      	ldr	r2, [r4, #0]
 80092ac:	0610      	lsls	r0, r2, #24
 80092ae:	f57f af65 	bpl.w	800917c <_scanf_float+0x60>
 80092b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092b6:	e7f4      	b.n	80092a2 <_scanf_float+0x186>
 80092b8:	f1ba 0f00 	cmp.w	sl, #0
 80092bc:	d10e      	bne.n	80092dc <_scanf_float+0x1c0>
 80092be:	f1b9 0f00 	cmp.w	r9, #0
 80092c2:	d10e      	bne.n	80092e2 <_scanf_float+0x1c6>
 80092c4:	6822      	ldr	r2, [r4, #0]
 80092c6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80092ca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80092ce:	d108      	bne.n	80092e2 <_scanf_float+0x1c6>
 80092d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80092d4:	6022      	str	r2, [r4, #0]
 80092d6:	f04f 0a01 	mov.w	sl, #1
 80092da:	e7e3      	b.n	80092a4 <_scanf_float+0x188>
 80092dc:	f1ba 0f02 	cmp.w	sl, #2
 80092e0:	d055      	beq.n	800938e <_scanf_float+0x272>
 80092e2:	2d01      	cmp	r5, #1
 80092e4:	d002      	beq.n	80092ec <_scanf_float+0x1d0>
 80092e6:	2d04      	cmp	r5, #4
 80092e8:	f47f af48 	bne.w	800917c <_scanf_float+0x60>
 80092ec:	3501      	adds	r5, #1
 80092ee:	b2ed      	uxtb	r5, r5
 80092f0:	e7d8      	b.n	80092a4 <_scanf_float+0x188>
 80092f2:	f1ba 0f01 	cmp.w	sl, #1
 80092f6:	f47f af41 	bne.w	800917c <_scanf_float+0x60>
 80092fa:	f04f 0a02 	mov.w	sl, #2
 80092fe:	e7d1      	b.n	80092a4 <_scanf_float+0x188>
 8009300:	b97d      	cbnz	r5, 8009322 <_scanf_float+0x206>
 8009302:	f1b9 0f00 	cmp.w	r9, #0
 8009306:	f47f af3c 	bne.w	8009182 <_scanf_float+0x66>
 800930a:	6822      	ldr	r2, [r4, #0]
 800930c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009310:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009314:	f47f af39 	bne.w	800918a <_scanf_float+0x6e>
 8009318:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800931c:	6022      	str	r2, [r4, #0]
 800931e:	2501      	movs	r5, #1
 8009320:	e7c0      	b.n	80092a4 <_scanf_float+0x188>
 8009322:	2d03      	cmp	r5, #3
 8009324:	d0e2      	beq.n	80092ec <_scanf_float+0x1d0>
 8009326:	2d05      	cmp	r5, #5
 8009328:	e7de      	b.n	80092e8 <_scanf_float+0x1cc>
 800932a:	2d02      	cmp	r5, #2
 800932c:	f47f af26 	bne.w	800917c <_scanf_float+0x60>
 8009330:	2503      	movs	r5, #3
 8009332:	e7b7      	b.n	80092a4 <_scanf_float+0x188>
 8009334:	2d06      	cmp	r5, #6
 8009336:	f47f af21 	bne.w	800917c <_scanf_float+0x60>
 800933a:	2507      	movs	r5, #7
 800933c:	e7b2      	b.n	80092a4 <_scanf_float+0x188>
 800933e:	6822      	ldr	r2, [r4, #0]
 8009340:	0591      	lsls	r1, r2, #22
 8009342:	f57f af1b 	bpl.w	800917c <_scanf_float+0x60>
 8009346:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800934a:	6022      	str	r2, [r4, #0]
 800934c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009350:	e7a8      	b.n	80092a4 <_scanf_float+0x188>
 8009352:	6822      	ldr	r2, [r4, #0]
 8009354:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009358:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800935c:	d006      	beq.n	800936c <_scanf_float+0x250>
 800935e:	0550      	lsls	r0, r2, #21
 8009360:	f57f af0c 	bpl.w	800917c <_scanf_float+0x60>
 8009364:	f1b9 0f00 	cmp.w	r9, #0
 8009368:	f43f af0f 	beq.w	800918a <_scanf_float+0x6e>
 800936c:	0591      	lsls	r1, r2, #22
 800936e:	bf58      	it	pl
 8009370:	9901      	ldrpl	r1, [sp, #4]
 8009372:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009376:	bf58      	it	pl
 8009378:	eba9 0101 	subpl.w	r1, r9, r1
 800937c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009380:	bf58      	it	pl
 8009382:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009386:	6022      	str	r2, [r4, #0]
 8009388:	f04f 0900 	mov.w	r9, #0
 800938c:	e78a      	b.n	80092a4 <_scanf_float+0x188>
 800938e:	f04f 0a03 	mov.w	sl, #3
 8009392:	e787      	b.n	80092a4 <_scanf_float+0x188>
 8009394:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009398:	4639      	mov	r1, r7
 800939a:	4640      	mov	r0, r8
 800939c:	4798      	blx	r3
 800939e:	2800      	cmp	r0, #0
 80093a0:	f43f aedf 	beq.w	8009162 <_scanf_float+0x46>
 80093a4:	e6ea      	b.n	800917c <_scanf_float+0x60>
 80093a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093ae:	463a      	mov	r2, r7
 80093b0:	4640      	mov	r0, r8
 80093b2:	4798      	blx	r3
 80093b4:	6923      	ldr	r3, [r4, #16]
 80093b6:	3b01      	subs	r3, #1
 80093b8:	6123      	str	r3, [r4, #16]
 80093ba:	e6ec      	b.n	8009196 <_scanf_float+0x7a>
 80093bc:	1e6b      	subs	r3, r5, #1
 80093be:	2b06      	cmp	r3, #6
 80093c0:	d825      	bhi.n	800940e <_scanf_float+0x2f2>
 80093c2:	2d02      	cmp	r5, #2
 80093c4:	d836      	bhi.n	8009434 <_scanf_float+0x318>
 80093c6:	455e      	cmp	r6, fp
 80093c8:	f67f aee8 	bls.w	800919c <_scanf_float+0x80>
 80093cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093d4:	463a      	mov	r2, r7
 80093d6:	4640      	mov	r0, r8
 80093d8:	4798      	blx	r3
 80093da:	6923      	ldr	r3, [r4, #16]
 80093dc:	3b01      	subs	r3, #1
 80093de:	6123      	str	r3, [r4, #16]
 80093e0:	e7f1      	b.n	80093c6 <_scanf_float+0x2aa>
 80093e2:	9802      	ldr	r0, [sp, #8]
 80093e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093e8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80093ec:	9002      	str	r0, [sp, #8]
 80093ee:	463a      	mov	r2, r7
 80093f0:	4640      	mov	r0, r8
 80093f2:	4798      	blx	r3
 80093f4:	6923      	ldr	r3, [r4, #16]
 80093f6:	3b01      	subs	r3, #1
 80093f8:	6123      	str	r3, [r4, #16]
 80093fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093fe:	fa5f fa8a 	uxtb.w	sl, sl
 8009402:	f1ba 0f02 	cmp.w	sl, #2
 8009406:	d1ec      	bne.n	80093e2 <_scanf_float+0x2c6>
 8009408:	3d03      	subs	r5, #3
 800940a:	b2ed      	uxtb	r5, r5
 800940c:	1b76      	subs	r6, r6, r5
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	05da      	lsls	r2, r3, #23
 8009412:	d52f      	bpl.n	8009474 <_scanf_float+0x358>
 8009414:	055b      	lsls	r3, r3, #21
 8009416:	d510      	bpl.n	800943a <_scanf_float+0x31e>
 8009418:	455e      	cmp	r6, fp
 800941a:	f67f aebf 	bls.w	800919c <_scanf_float+0x80>
 800941e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009422:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009426:	463a      	mov	r2, r7
 8009428:	4640      	mov	r0, r8
 800942a:	4798      	blx	r3
 800942c:	6923      	ldr	r3, [r4, #16]
 800942e:	3b01      	subs	r3, #1
 8009430:	6123      	str	r3, [r4, #16]
 8009432:	e7f1      	b.n	8009418 <_scanf_float+0x2fc>
 8009434:	46aa      	mov	sl, r5
 8009436:	9602      	str	r6, [sp, #8]
 8009438:	e7df      	b.n	80093fa <_scanf_float+0x2de>
 800943a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800943e:	6923      	ldr	r3, [r4, #16]
 8009440:	2965      	cmp	r1, #101	; 0x65
 8009442:	f103 33ff 	add.w	r3, r3, #4294967295
 8009446:	f106 35ff 	add.w	r5, r6, #4294967295
 800944a:	6123      	str	r3, [r4, #16]
 800944c:	d00c      	beq.n	8009468 <_scanf_float+0x34c>
 800944e:	2945      	cmp	r1, #69	; 0x45
 8009450:	d00a      	beq.n	8009468 <_scanf_float+0x34c>
 8009452:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009456:	463a      	mov	r2, r7
 8009458:	4640      	mov	r0, r8
 800945a:	4798      	blx	r3
 800945c:	6923      	ldr	r3, [r4, #16]
 800945e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009462:	3b01      	subs	r3, #1
 8009464:	1eb5      	subs	r5, r6, #2
 8009466:	6123      	str	r3, [r4, #16]
 8009468:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800946c:	463a      	mov	r2, r7
 800946e:	4640      	mov	r0, r8
 8009470:	4798      	blx	r3
 8009472:	462e      	mov	r6, r5
 8009474:	6825      	ldr	r5, [r4, #0]
 8009476:	f015 0510 	ands.w	r5, r5, #16
 800947a:	d14e      	bne.n	800951a <_scanf_float+0x3fe>
 800947c:	7035      	strb	r5, [r6, #0]
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009488:	d119      	bne.n	80094be <_scanf_float+0x3a2>
 800948a:	9b01      	ldr	r3, [sp, #4]
 800948c:	454b      	cmp	r3, r9
 800948e:	eba3 0209 	sub.w	r2, r3, r9
 8009492:	d121      	bne.n	80094d8 <_scanf_float+0x3bc>
 8009494:	2200      	movs	r2, #0
 8009496:	4659      	mov	r1, fp
 8009498:	4640      	mov	r0, r8
 800949a:	f000 fe83 	bl	800a1a4 <_strtod_r>
 800949e:	6822      	ldr	r2, [r4, #0]
 80094a0:	9b03      	ldr	r3, [sp, #12]
 80094a2:	f012 0f02 	tst.w	r2, #2
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	d021      	beq.n	80094ee <_scanf_float+0x3d2>
 80094aa:	9903      	ldr	r1, [sp, #12]
 80094ac:	1d1a      	adds	r2, r3, #4
 80094ae:	600a      	str	r2, [r1, #0]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	ed83 0b00 	vstr	d0, [r3]
 80094b6:	68e3      	ldr	r3, [r4, #12]
 80094b8:	3301      	adds	r3, #1
 80094ba:	60e3      	str	r3, [r4, #12]
 80094bc:	e66f      	b.n	800919e <_scanf_float+0x82>
 80094be:	9b04      	ldr	r3, [sp, #16]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d0e7      	beq.n	8009494 <_scanf_float+0x378>
 80094c4:	9905      	ldr	r1, [sp, #20]
 80094c6:	230a      	movs	r3, #10
 80094c8:	462a      	mov	r2, r5
 80094ca:	3101      	adds	r1, #1
 80094cc:	4640      	mov	r0, r8
 80094ce:	f000 fef1 	bl	800a2b4 <_strtol_r>
 80094d2:	9b04      	ldr	r3, [sp, #16]
 80094d4:	9e05      	ldr	r6, [sp, #20]
 80094d6:	1ac2      	subs	r2, r0, r3
 80094d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80094dc:	429e      	cmp	r6, r3
 80094de:	bf28      	it	cs
 80094e0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80094e4:	490e      	ldr	r1, [pc, #56]	; (8009520 <_scanf_float+0x404>)
 80094e6:	4630      	mov	r0, r6
 80094e8:	f000 f862 	bl	80095b0 <siprintf>
 80094ec:	e7d2      	b.n	8009494 <_scanf_float+0x378>
 80094ee:	9903      	ldr	r1, [sp, #12]
 80094f0:	f012 0f04 	tst.w	r2, #4
 80094f4:	f103 0204 	add.w	r2, r3, #4
 80094f8:	600a      	str	r2, [r1, #0]
 80094fa:	d1d9      	bne.n	80094b0 <_scanf_float+0x394>
 80094fc:	eeb4 0b40 	vcmp.f64	d0, d0
 8009500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009504:	681e      	ldr	r6, [r3, #0]
 8009506:	d705      	bvc.n	8009514 <_scanf_float+0x3f8>
 8009508:	4806      	ldr	r0, [pc, #24]	; (8009524 <_scanf_float+0x408>)
 800950a:	f000 f84b 	bl	80095a4 <nanf>
 800950e:	ed86 0a00 	vstr	s0, [r6]
 8009512:	e7d0      	b.n	80094b6 <_scanf_float+0x39a>
 8009514:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009518:	e7f9      	b.n	800950e <_scanf_float+0x3f2>
 800951a:	2500      	movs	r5, #0
 800951c:	e63f      	b.n	800919e <_scanf_float+0x82>
 800951e:	bf00      	nop
 8009520:	0800d0d8 	.word	0x0800d0d8
 8009524:	0800d1db 	.word	0x0800d1db

08009528 <rand>:
 8009528:	4b16      	ldr	r3, [pc, #88]	; (8009584 <rand+0x5c>)
 800952a:	b510      	push	{r4, lr}
 800952c:	681c      	ldr	r4, [r3, #0]
 800952e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009530:	b9b3      	cbnz	r3, 8009560 <rand+0x38>
 8009532:	2018      	movs	r0, #24
 8009534:	f002 f860 	bl	800b5f8 <malloc>
 8009538:	63a0      	str	r0, [r4, #56]	; 0x38
 800953a:	b928      	cbnz	r0, 8009548 <rand+0x20>
 800953c:	4602      	mov	r2, r0
 800953e:	4b12      	ldr	r3, [pc, #72]	; (8009588 <rand+0x60>)
 8009540:	4812      	ldr	r0, [pc, #72]	; (800958c <rand+0x64>)
 8009542:	214e      	movs	r1, #78	; 0x4e
 8009544:	f000 feb8 	bl	800a2b8 <__assert_func>
 8009548:	4a11      	ldr	r2, [pc, #68]	; (8009590 <rand+0x68>)
 800954a:	4b12      	ldr	r3, [pc, #72]	; (8009594 <rand+0x6c>)
 800954c:	e9c0 2300 	strd	r2, r3, [r0]
 8009550:	4b11      	ldr	r3, [pc, #68]	; (8009598 <rand+0x70>)
 8009552:	6083      	str	r3, [r0, #8]
 8009554:	230b      	movs	r3, #11
 8009556:	8183      	strh	r3, [r0, #12]
 8009558:	2201      	movs	r2, #1
 800955a:	2300      	movs	r3, #0
 800955c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009560:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009562:	4a0e      	ldr	r2, [pc, #56]	; (800959c <rand+0x74>)
 8009564:	6920      	ldr	r0, [r4, #16]
 8009566:	6963      	ldr	r3, [r4, #20]
 8009568:	490d      	ldr	r1, [pc, #52]	; (80095a0 <rand+0x78>)
 800956a:	4342      	muls	r2, r0
 800956c:	fb01 2203 	mla	r2, r1, r3, r2
 8009570:	fba0 0101 	umull	r0, r1, r0, r1
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	eb42 0001 	adc.w	r0, r2, r1
 800957a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800957e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009582:	bd10      	pop	{r4, pc}
 8009584:	24000024 	.word	0x24000024
 8009588:	0800d0dd 	.word	0x0800d0dd
 800958c:	0800d0f4 	.word	0x0800d0f4
 8009590:	abcd330e 	.word	0xabcd330e
 8009594:	e66d1234 	.word	0xe66d1234
 8009598:	0005deec 	.word	0x0005deec
 800959c:	5851f42d 	.word	0x5851f42d
 80095a0:	4c957f2d 	.word	0x4c957f2d

080095a4 <nanf>:
 80095a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80095ac <nanf+0x8>
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	7fc00000 	.word	0x7fc00000

080095b0 <siprintf>:
 80095b0:	b40e      	push	{r1, r2, r3}
 80095b2:	b500      	push	{lr}
 80095b4:	b09c      	sub	sp, #112	; 0x70
 80095b6:	ab1d      	add	r3, sp, #116	; 0x74
 80095b8:	9002      	str	r0, [sp, #8]
 80095ba:	9006      	str	r0, [sp, #24]
 80095bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095c0:	4809      	ldr	r0, [pc, #36]	; (80095e8 <siprintf+0x38>)
 80095c2:	9107      	str	r1, [sp, #28]
 80095c4:	9104      	str	r1, [sp, #16]
 80095c6:	4909      	ldr	r1, [pc, #36]	; (80095ec <siprintf+0x3c>)
 80095c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095cc:	9105      	str	r1, [sp, #20]
 80095ce:	6800      	ldr	r0, [r0, #0]
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	a902      	add	r1, sp, #8
 80095d4:	f002 fe48 	bl	800c268 <_svfiprintf_r>
 80095d8:	9b02      	ldr	r3, [sp, #8]
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]
 80095de:	b01c      	add	sp, #112	; 0x70
 80095e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095e4:	b003      	add	sp, #12
 80095e6:	4770      	bx	lr
 80095e8:	24000024 	.word	0x24000024
 80095ec:	ffff0208 	.word	0xffff0208

080095f0 <strcpy>:
 80095f0:	4603      	mov	r3, r0
 80095f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095f6:	f803 2b01 	strb.w	r2, [r3], #1
 80095fa:	2a00      	cmp	r2, #0
 80095fc:	d1f9      	bne.n	80095f2 <strcpy+0x2>
 80095fe:	4770      	bx	lr

08009600 <sulp>:
 8009600:	b570      	push	{r4, r5, r6, lr}
 8009602:	4604      	mov	r4, r0
 8009604:	460d      	mov	r5, r1
 8009606:	4616      	mov	r6, r2
 8009608:	ec45 4b10 	vmov	d0, r4, r5
 800960c:	f002 fb8e 	bl	800bd2c <__ulp>
 8009610:	b17e      	cbz	r6, 8009632 <sulp+0x32>
 8009612:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009616:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800961a:	2b00      	cmp	r3, #0
 800961c:	dd09      	ble.n	8009632 <sulp+0x32>
 800961e:	051b      	lsls	r3, r3, #20
 8009620:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009624:	2000      	movs	r0, #0
 8009626:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800962a:	ec41 0b17 	vmov	d7, r0, r1
 800962e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009632:	bd70      	pop	{r4, r5, r6, pc}
 8009634:	0000      	movs	r0, r0
	...

08009638 <_strtod_l>:
 8009638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963c:	ed2d 8b0e 	vpush	{d8-d14}
 8009640:	b097      	sub	sp, #92	; 0x5c
 8009642:	461f      	mov	r7, r3
 8009644:	2300      	movs	r3, #0
 8009646:	9312      	str	r3, [sp, #72]	; 0x48
 8009648:	4ba1      	ldr	r3, [pc, #644]	; (80098d0 <_strtod_l+0x298>)
 800964a:	920d      	str	r2, [sp, #52]	; 0x34
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	9307      	str	r3, [sp, #28]
 8009650:	4604      	mov	r4, r0
 8009652:	4618      	mov	r0, r3
 8009654:	468b      	mov	fp, r1
 8009656:	f7f6 fe5b 	bl	8000310 <strlen>
 800965a:	f04f 0800 	mov.w	r8, #0
 800965e:	4605      	mov	r5, r0
 8009660:	f04f 0900 	mov.w	r9, #0
 8009664:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009668:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800966a:	7813      	ldrb	r3, [r2, #0]
 800966c:	2b2b      	cmp	r3, #43	; 0x2b
 800966e:	d04d      	beq.n	800970c <_strtod_l+0xd4>
 8009670:	d83a      	bhi.n	80096e8 <_strtod_l+0xb0>
 8009672:	2b0d      	cmp	r3, #13
 8009674:	d833      	bhi.n	80096de <_strtod_l+0xa6>
 8009676:	2b08      	cmp	r3, #8
 8009678:	d833      	bhi.n	80096e2 <_strtod_l+0xaa>
 800967a:	2b00      	cmp	r3, #0
 800967c:	d03d      	beq.n	80096fa <_strtod_l+0xc2>
 800967e:	2300      	movs	r3, #0
 8009680:	9308      	str	r3, [sp, #32]
 8009682:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8009684:	7833      	ldrb	r3, [r6, #0]
 8009686:	2b30      	cmp	r3, #48	; 0x30
 8009688:	f040 80b0 	bne.w	80097ec <_strtod_l+0x1b4>
 800968c:	7873      	ldrb	r3, [r6, #1]
 800968e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009692:	2b58      	cmp	r3, #88	; 0x58
 8009694:	d167      	bne.n	8009766 <_strtod_l+0x12e>
 8009696:	9b08      	ldr	r3, [sp, #32]
 8009698:	9301      	str	r3, [sp, #4]
 800969a:	ab12      	add	r3, sp, #72	; 0x48
 800969c:	9702      	str	r7, [sp, #8]
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	4a8c      	ldr	r2, [pc, #560]	; (80098d4 <_strtod_l+0x29c>)
 80096a2:	ab13      	add	r3, sp, #76	; 0x4c
 80096a4:	a911      	add	r1, sp, #68	; 0x44
 80096a6:	4620      	mov	r0, r4
 80096a8:	f001 fc9a 	bl	800afe0 <__gethex>
 80096ac:	f010 0507 	ands.w	r5, r0, #7
 80096b0:	4607      	mov	r7, r0
 80096b2:	d005      	beq.n	80096c0 <_strtod_l+0x88>
 80096b4:	2d06      	cmp	r5, #6
 80096b6:	d12b      	bne.n	8009710 <_strtod_l+0xd8>
 80096b8:	3601      	adds	r6, #1
 80096ba:	2300      	movs	r3, #0
 80096bc:	9611      	str	r6, [sp, #68]	; 0x44
 80096be:	9308      	str	r3, [sp, #32]
 80096c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f040 854e 	bne.w	800a164 <_strtod_l+0xb2c>
 80096c8:	9b08      	ldr	r3, [sp, #32]
 80096ca:	b1e3      	cbz	r3, 8009706 <_strtod_l+0xce>
 80096cc:	ec49 8b17 	vmov	d7, r8, r9
 80096d0:	eeb1 0b47 	vneg.f64	d0, d7
 80096d4:	b017      	add	sp, #92	; 0x5c
 80096d6:	ecbd 8b0e 	vpop	{d8-d14}
 80096da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096de:	2b20      	cmp	r3, #32
 80096e0:	d1cd      	bne.n	800967e <_strtod_l+0x46>
 80096e2:	3201      	adds	r2, #1
 80096e4:	9211      	str	r2, [sp, #68]	; 0x44
 80096e6:	e7bf      	b.n	8009668 <_strtod_l+0x30>
 80096e8:	2b2d      	cmp	r3, #45	; 0x2d
 80096ea:	d1c8      	bne.n	800967e <_strtod_l+0x46>
 80096ec:	2301      	movs	r3, #1
 80096ee:	9308      	str	r3, [sp, #32]
 80096f0:	1c53      	adds	r3, r2, #1
 80096f2:	9311      	str	r3, [sp, #68]	; 0x44
 80096f4:	7853      	ldrb	r3, [r2, #1]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1c3      	bne.n	8009682 <_strtod_l+0x4a>
 80096fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096fc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009700:	2b00      	cmp	r3, #0
 8009702:	f040 852d 	bne.w	800a160 <_strtod_l+0xb28>
 8009706:	ec49 8b10 	vmov	d0, r8, r9
 800970a:	e7e3      	b.n	80096d4 <_strtod_l+0x9c>
 800970c:	2300      	movs	r3, #0
 800970e:	e7ee      	b.n	80096ee <_strtod_l+0xb6>
 8009710:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009712:	b13a      	cbz	r2, 8009724 <_strtod_l+0xec>
 8009714:	2135      	movs	r1, #53	; 0x35
 8009716:	a814      	add	r0, sp, #80	; 0x50
 8009718:	f002 fc10 	bl	800bf3c <__copybits>
 800971c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800971e:	4620      	mov	r0, r4
 8009720:	f001 ffd2 	bl	800b6c8 <_Bfree>
 8009724:	3d01      	subs	r5, #1
 8009726:	2d04      	cmp	r5, #4
 8009728:	d806      	bhi.n	8009738 <_strtod_l+0x100>
 800972a:	e8df f005 	tbb	[pc, r5]
 800972e:	030a      	.short	0x030a
 8009730:	1714      	.short	0x1714
 8009732:	0a          	.byte	0x0a
 8009733:	00          	.byte	0x00
 8009734:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8009738:	073f      	lsls	r7, r7, #28
 800973a:	d5c1      	bpl.n	80096c0 <_strtod_l+0x88>
 800973c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009740:	e7be      	b.n	80096c0 <_strtod_l+0x88>
 8009742:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8009746:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009748:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800974c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009750:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009754:	e7f0      	b.n	8009738 <_strtod_l+0x100>
 8009756:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80098d8 <_strtod_l+0x2a0>
 800975a:	e7ed      	b.n	8009738 <_strtod_l+0x100>
 800975c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009760:	f04f 38ff 	mov.w	r8, #4294967295
 8009764:	e7e8      	b.n	8009738 <_strtod_l+0x100>
 8009766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	9211      	str	r2, [sp, #68]	; 0x44
 800976c:	785b      	ldrb	r3, [r3, #1]
 800976e:	2b30      	cmp	r3, #48	; 0x30
 8009770:	d0f9      	beq.n	8009766 <_strtod_l+0x12e>
 8009772:	2b00      	cmp	r3, #0
 8009774:	d0a4      	beq.n	80096c0 <_strtod_l+0x88>
 8009776:	2301      	movs	r3, #1
 8009778:	f04f 0a00 	mov.w	sl, #0
 800977c:	9304      	str	r3, [sp, #16]
 800977e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009780:	930a      	str	r3, [sp, #40]	; 0x28
 8009782:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009786:	f8cd a018 	str.w	sl, [sp, #24]
 800978a:	220a      	movs	r2, #10
 800978c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800978e:	7807      	ldrb	r7, [r0, #0]
 8009790:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009794:	b2d9      	uxtb	r1, r3
 8009796:	2909      	cmp	r1, #9
 8009798:	d92a      	bls.n	80097f0 <_strtod_l+0x1b8>
 800979a:	9907      	ldr	r1, [sp, #28]
 800979c:	462a      	mov	r2, r5
 800979e:	f002 ffd7 	bl	800c750 <strncmp>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d033      	beq.n	800980e <_strtod_l+0x1d6>
 80097a6:	2000      	movs	r0, #0
 80097a8:	9b06      	ldr	r3, [sp, #24]
 80097aa:	463a      	mov	r2, r7
 80097ac:	4601      	mov	r1, r0
 80097ae:	4607      	mov	r7, r0
 80097b0:	2a65      	cmp	r2, #101	; 0x65
 80097b2:	d001      	beq.n	80097b8 <_strtod_l+0x180>
 80097b4:	2a45      	cmp	r2, #69	; 0x45
 80097b6:	d117      	bne.n	80097e8 <_strtod_l+0x1b0>
 80097b8:	b91b      	cbnz	r3, 80097c2 <_strtod_l+0x18a>
 80097ba:	9b04      	ldr	r3, [sp, #16]
 80097bc:	4303      	orrs	r3, r0
 80097be:	d09c      	beq.n	80096fa <_strtod_l+0xc2>
 80097c0:	2300      	movs	r3, #0
 80097c2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80097c6:	f10b 0201 	add.w	r2, fp, #1
 80097ca:	9211      	str	r2, [sp, #68]	; 0x44
 80097cc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80097d0:	2a2b      	cmp	r2, #43	; 0x2b
 80097d2:	d071      	beq.n	80098b8 <_strtod_l+0x280>
 80097d4:	2a2d      	cmp	r2, #45	; 0x2d
 80097d6:	d077      	beq.n	80098c8 <_strtod_l+0x290>
 80097d8:	f04f 0e00 	mov.w	lr, #0
 80097dc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80097e0:	2d09      	cmp	r5, #9
 80097e2:	d97f      	bls.n	80098e4 <_strtod_l+0x2ac>
 80097e4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80097e8:	2500      	movs	r5, #0
 80097ea:	e09b      	b.n	8009924 <_strtod_l+0x2ec>
 80097ec:	2300      	movs	r3, #0
 80097ee:	e7c3      	b.n	8009778 <_strtod_l+0x140>
 80097f0:	9906      	ldr	r1, [sp, #24]
 80097f2:	2908      	cmp	r1, #8
 80097f4:	bfdd      	ittte	le
 80097f6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80097f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80097fc:	9309      	strle	r3, [sp, #36]	; 0x24
 80097fe:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009802:	9b06      	ldr	r3, [sp, #24]
 8009804:	3001      	adds	r0, #1
 8009806:	3301      	adds	r3, #1
 8009808:	9306      	str	r3, [sp, #24]
 800980a:	9011      	str	r0, [sp, #68]	; 0x44
 800980c:	e7be      	b.n	800978c <_strtod_l+0x154>
 800980e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009810:	195a      	adds	r2, r3, r5
 8009812:	9211      	str	r2, [sp, #68]	; 0x44
 8009814:	5d5a      	ldrb	r2, [r3, r5]
 8009816:	9b06      	ldr	r3, [sp, #24]
 8009818:	b3a3      	cbz	r3, 8009884 <_strtod_l+0x24c>
 800981a:	4607      	mov	r7, r0
 800981c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009820:	2909      	cmp	r1, #9
 8009822:	d912      	bls.n	800984a <_strtod_l+0x212>
 8009824:	2101      	movs	r1, #1
 8009826:	e7c3      	b.n	80097b0 <_strtod_l+0x178>
 8009828:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	9211      	str	r2, [sp, #68]	; 0x44
 800982e:	785a      	ldrb	r2, [r3, #1]
 8009830:	3001      	adds	r0, #1
 8009832:	2a30      	cmp	r2, #48	; 0x30
 8009834:	d0f8      	beq.n	8009828 <_strtod_l+0x1f0>
 8009836:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800983a:	2b08      	cmp	r3, #8
 800983c:	f200 8497 	bhi.w	800a16e <_strtod_l+0xb36>
 8009840:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009842:	930a      	str	r3, [sp, #40]	; 0x28
 8009844:	4607      	mov	r7, r0
 8009846:	2000      	movs	r0, #0
 8009848:	4603      	mov	r3, r0
 800984a:	3a30      	subs	r2, #48	; 0x30
 800984c:	f100 0101 	add.w	r1, r0, #1
 8009850:	d012      	beq.n	8009878 <_strtod_l+0x240>
 8009852:	440f      	add	r7, r1
 8009854:	eb00 0c03 	add.w	ip, r0, r3
 8009858:	4619      	mov	r1, r3
 800985a:	250a      	movs	r5, #10
 800985c:	4561      	cmp	r1, ip
 800985e:	d113      	bne.n	8009888 <_strtod_l+0x250>
 8009860:	1819      	adds	r1, r3, r0
 8009862:	2908      	cmp	r1, #8
 8009864:	f103 0301 	add.w	r3, r3, #1
 8009868:	4403      	add	r3, r0
 800986a:	dc1c      	bgt.n	80098a6 <_strtod_l+0x26e>
 800986c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800986e:	210a      	movs	r1, #10
 8009870:	fb01 2200 	mla	r2, r1, r0, r2
 8009874:	9209      	str	r2, [sp, #36]	; 0x24
 8009876:	2100      	movs	r1, #0
 8009878:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800987a:	1c50      	adds	r0, r2, #1
 800987c:	9011      	str	r0, [sp, #68]	; 0x44
 800987e:	7852      	ldrb	r2, [r2, #1]
 8009880:	4608      	mov	r0, r1
 8009882:	e7cb      	b.n	800981c <_strtod_l+0x1e4>
 8009884:	9806      	ldr	r0, [sp, #24]
 8009886:	e7d4      	b.n	8009832 <_strtod_l+0x1fa>
 8009888:	2908      	cmp	r1, #8
 800988a:	dc04      	bgt.n	8009896 <_strtod_l+0x25e>
 800988c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800988e:	436e      	muls	r6, r5
 8009890:	9609      	str	r6, [sp, #36]	; 0x24
 8009892:	3101      	adds	r1, #1
 8009894:	e7e2      	b.n	800985c <_strtod_l+0x224>
 8009896:	f101 0e01 	add.w	lr, r1, #1
 800989a:	f1be 0f10 	cmp.w	lr, #16
 800989e:	bfd8      	it	le
 80098a0:	fb05 fa0a 	mulle.w	sl, r5, sl
 80098a4:	e7f5      	b.n	8009892 <_strtod_l+0x25a>
 80098a6:	2b10      	cmp	r3, #16
 80098a8:	bfdc      	itt	le
 80098aa:	210a      	movle	r1, #10
 80098ac:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80098b0:	e7e1      	b.n	8009876 <_strtod_l+0x23e>
 80098b2:	2700      	movs	r7, #0
 80098b4:	2101      	movs	r1, #1
 80098b6:	e780      	b.n	80097ba <_strtod_l+0x182>
 80098b8:	f04f 0e00 	mov.w	lr, #0
 80098bc:	f10b 0202 	add.w	r2, fp, #2
 80098c0:	9211      	str	r2, [sp, #68]	; 0x44
 80098c2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80098c6:	e789      	b.n	80097dc <_strtod_l+0x1a4>
 80098c8:	f04f 0e01 	mov.w	lr, #1
 80098cc:	e7f6      	b.n	80098bc <_strtod_l+0x284>
 80098ce:	bf00      	nop
 80098d0:	0800d3bc 	.word	0x0800d3bc
 80098d4:	0800d150 	.word	0x0800d150
 80098d8:	7ff00000 	.word	0x7ff00000
 80098dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80098de:	1c55      	adds	r5, r2, #1
 80098e0:	9511      	str	r5, [sp, #68]	; 0x44
 80098e2:	7852      	ldrb	r2, [r2, #1]
 80098e4:	2a30      	cmp	r2, #48	; 0x30
 80098e6:	d0f9      	beq.n	80098dc <_strtod_l+0x2a4>
 80098e8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80098ec:	2d08      	cmp	r5, #8
 80098ee:	f63f af7b 	bhi.w	80097e8 <_strtod_l+0x1b0>
 80098f2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80098f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80098f8:	9207      	str	r2, [sp, #28]
 80098fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80098fc:	1c55      	adds	r5, r2, #1
 80098fe:	9511      	str	r5, [sp, #68]	; 0x44
 8009900:	7852      	ldrb	r2, [r2, #1]
 8009902:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009906:	2e09      	cmp	r6, #9
 8009908:	d937      	bls.n	800997a <_strtod_l+0x342>
 800990a:	9e07      	ldr	r6, [sp, #28]
 800990c:	1bad      	subs	r5, r5, r6
 800990e:	2d08      	cmp	r5, #8
 8009910:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009914:	dc02      	bgt.n	800991c <_strtod_l+0x2e4>
 8009916:	4565      	cmp	r5, ip
 8009918:	bfa8      	it	ge
 800991a:	4665      	movge	r5, ip
 800991c:	f1be 0f00 	cmp.w	lr, #0
 8009920:	d000      	beq.n	8009924 <_strtod_l+0x2ec>
 8009922:	426d      	negs	r5, r5
 8009924:	2b00      	cmp	r3, #0
 8009926:	d14d      	bne.n	80099c4 <_strtod_l+0x38c>
 8009928:	9b04      	ldr	r3, [sp, #16]
 800992a:	4303      	orrs	r3, r0
 800992c:	f47f aec8 	bne.w	80096c0 <_strtod_l+0x88>
 8009930:	2900      	cmp	r1, #0
 8009932:	f47f aee2 	bne.w	80096fa <_strtod_l+0xc2>
 8009936:	2a69      	cmp	r2, #105	; 0x69
 8009938:	d027      	beq.n	800998a <_strtod_l+0x352>
 800993a:	dc24      	bgt.n	8009986 <_strtod_l+0x34e>
 800993c:	2a49      	cmp	r2, #73	; 0x49
 800993e:	d024      	beq.n	800998a <_strtod_l+0x352>
 8009940:	2a4e      	cmp	r2, #78	; 0x4e
 8009942:	f47f aeda 	bne.w	80096fa <_strtod_l+0xc2>
 8009946:	4996      	ldr	r1, [pc, #600]	; (8009ba0 <_strtod_l+0x568>)
 8009948:	a811      	add	r0, sp, #68	; 0x44
 800994a:	f001 fda1 	bl	800b490 <__match>
 800994e:	2800      	cmp	r0, #0
 8009950:	f43f aed3 	beq.w	80096fa <_strtod_l+0xc2>
 8009954:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	2b28      	cmp	r3, #40	; 0x28
 800995a:	d12d      	bne.n	80099b8 <_strtod_l+0x380>
 800995c:	4991      	ldr	r1, [pc, #580]	; (8009ba4 <_strtod_l+0x56c>)
 800995e:	aa14      	add	r2, sp, #80	; 0x50
 8009960:	a811      	add	r0, sp, #68	; 0x44
 8009962:	f001 fda9 	bl	800b4b8 <__hexnan>
 8009966:	2805      	cmp	r0, #5
 8009968:	d126      	bne.n	80099b8 <_strtod_l+0x380>
 800996a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800996c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009970:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009974:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009978:	e6a2      	b.n	80096c0 <_strtod_l+0x88>
 800997a:	250a      	movs	r5, #10
 800997c:	fb05 250c 	mla	r5, r5, ip, r2
 8009980:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8009984:	e7b9      	b.n	80098fa <_strtod_l+0x2c2>
 8009986:	2a6e      	cmp	r2, #110	; 0x6e
 8009988:	e7db      	b.n	8009942 <_strtod_l+0x30a>
 800998a:	4987      	ldr	r1, [pc, #540]	; (8009ba8 <_strtod_l+0x570>)
 800998c:	a811      	add	r0, sp, #68	; 0x44
 800998e:	f001 fd7f 	bl	800b490 <__match>
 8009992:	2800      	cmp	r0, #0
 8009994:	f43f aeb1 	beq.w	80096fa <_strtod_l+0xc2>
 8009998:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800999a:	4984      	ldr	r1, [pc, #528]	; (8009bac <_strtod_l+0x574>)
 800999c:	3b01      	subs	r3, #1
 800999e:	a811      	add	r0, sp, #68	; 0x44
 80099a0:	9311      	str	r3, [sp, #68]	; 0x44
 80099a2:	f001 fd75 	bl	800b490 <__match>
 80099a6:	b910      	cbnz	r0, 80099ae <_strtod_l+0x376>
 80099a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099aa:	3301      	adds	r3, #1
 80099ac:	9311      	str	r3, [sp, #68]	; 0x44
 80099ae:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8009bc0 <_strtod_l+0x588>
 80099b2:	f04f 0800 	mov.w	r8, #0
 80099b6:	e683      	b.n	80096c0 <_strtod_l+0x88>
 80099b8:	487d      	ldr	r0, [pc, #500]	; (8009bb0 <_strtod_l+0x578>)
 80099ba:	f002 feb1 	bl	800c720 <nan>
 80099be:	ec59 8b10 	vmov	r8, r9, d0
 80099c2:	e67d      	b.n	80096c0 <_strtod_l+0x88>
 80099c4:	1bea      	subs	r2, r5, r7
 80099c6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80099ca:	9207      	str	r2, [sp, #28]
 80099cc:	9a06      	ldr	r2, [sp, #24]
 80099ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80099d2:	2a00      	cmp	r2, #0
 80099d4:	bf08      	it	eq
 80099d6:	461a      	moveq	r2, r3
 80099d8:	2b10      	cmp	r3, #16
 80099da:	9206      	str	r2, [sp, #24]
 80099dc:	461a      	mov	r2, r3
 80099de:	bfa8      	it	ge
 80099e0:	2210      	movge	r2, #16
 80099e2:	2b09      	cmp	r3, #9
 80099e4:	ec59 8b17 	vmov	r8, r9, d7
 80099e8:	dd0c      	ble.n	8009a04 <_strtod_l+0x3cc>
 80099ea:	4972      	ldr	r1, [pc, #456]	; (8009bb4 <_strtod_l+0x57c>)
 80099ec:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80099f0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80099f4:	ee06 aa90 	vmov	s13, sl
 80099f8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80099fc:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009a00:	ec59 8b16 	vmov	r8, r9, d6
 8009a04:	2b0f      	cmp	r3, #15
 8009a06:	dc36      	bgt.n	8009a76 <_strtod_l+0x43e>
 8009a08:	9907      	ldr	r1, [sp, #28]
 8009a0a:	2900      	cmp	r1, #0
 8009a0c:	f43f ae58 	beq.w	80096c0 <_strtod_l+0x88>
 8009a10:	dd23      	ble.n	8009a5a <_strtod_l+0x422>
 8009a12:	2916      	cmp	r1, #22
 8009a14:	dc0b      	bgt.n	8009a2e <_strtod_l+0x3f6>
 8009a16:	4b67      	ldr	r3, [pc, #412]	; (8009bb4 <_strtod_l+0x57c>)
 8009a18:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009a1c:	ed93 7b00 	vldr	d7, [r3]
 8009a20:	ec49 8b16 	vmov	d6, r8, r9
 8009a24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a28:	ec59 8b17 	vmov	r8, r9, d7
 8009a2c:	e648      	b.n	80096c0 <_strtod_l+0x88>
 8009a2e:	9807      	ldr	r0, [sp, #28]
 8009a30:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8009a34:	4281      	cmp	r1, r0
 8009a36:	db1e      	blt.n	8009a76 <_strtod_l+0x43e>
 8009a38:	4a5e      	ldr	r2, [pc, #376]	; (8009bb4 <_strtod_l+0x57c>)
 8009a3a:	f1c3 030f 	rsb	r3, r3, #15
 8009a3e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009a42:	ed91 7b00 	vldr	d7, [r1]
 8009a46:	ec49 8b16 	vmov	d6, r8, r9
 8009a4a:	1ac3      	subs	r3, r0, r3
 8009a4c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009a50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a54:	ed92 6b00 	vldr	d6, [r2]
 8009a58:	e7e4      	b.n	8009a24 <_strtod_l+0x3ec>
 8009a5a:	9907      	ldr	r1, [sp, #28]
 8009a5c:	3116      	adds	r1, #22
 8009a5e:	db0a      	blt.n	8009a76 <_strtod_l+0x43e>
 8009a60:	4b54      	ldr	r3, [pc, #336]	; (8009bb4 <_strtod_l+0x57c>)
 8009a62:	1b7d      	subs	r5, r7, r5
 8009a64:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009a68:	ed95 7b00 	vldr	d7, [r5]
 8009a6c:	ec49 8b16 	vmov	d6, r8, r9
 8009a70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a74:	e7d8      	b.n	8009a28 <_strtod_l+0x3f0>
 8009a76:	9907      	ldr	r1, [sp, #28]
 8009a78:	1a9a      	subs	r2, r3, r2
 8009a7a:	440a      	add	r2, r1
 8009a7c:	2a00      	cmp	r2, #0
 8009a7e:	dd6f      	ble.n	8009b60 <_strtod_l+0x528>
 8009a80:	f012 000f 	ands.w	r0, r2, #15
 8009a84:	d00a      	beq.n	8009a9c <_strtod_l+0x464>
 8009a86:	494b      	ldr	r1, [pc, #300]	; (8009bb4 <_strtod_l+0x57c>)
 8009a88:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009a8c:	ed91 7b00 	vldr	d7, [r1]
 8009a90:	ec49 8b16 	vmov	d6, r8, r9
 8009a94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a98:	ec59 8b17 	vmov	r8, r9, d7
 8009a9c:	f032 020f 	bics.w	r2, r2, #15
 8009aa0:	d04f      	beq.n	8009b42 <_strtod_l+0x50a>
 8009aa2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8009aa6:	dd22      	ble.n	8009aee <_strtod_l+0x4b6>
 8009aa8:	2500      	movs	r5, #0
 8009aaa:	462e      	mov	r6, r5
 8009aac:	9506      	str	r5, [sp, #24]
 8009aae:	462f      	mov	r7, r5
 8009ab0:	2322      	movs	r3, #34	; 0x22
 8009ab2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8009bc0 <_strtod_l+0x588>
 8009ab6:	6023      	str	r3, [r4, #0]
 8009ab8:	f04f 0800 	mov.w	r8, #0
 8009abc:	9b06      	ldr	r3, [sp, #24]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f43f adfe 	beq.w	80096c0 <_strtod_l+0x88>
 8009ac4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f001 fdfe 	bl	800b6c8 <_Bfree>
 8009acc:	4639      	mov	r1, r7
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f001 fdfa 	bl	800b6c8 <_Bfree>
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f001 fdf6 	bl	800b6c8 <_Bfree>
 8009adc:	9906      	ldr	r1, [sp, #24]
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f001 fdf2 	bl	800b6c8 <_Bfree>
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f001 fdee 	bl	800b6c8 <_Bfree>
 8009aec:	e5e8      	b.n	80096c0 <_strtod_l+0x88>
 8009aee:	2000      	movs	r0, #0
 8009af0:	ec49 8b17 	vmov	d7, r8, r9
 8009af4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8009bb8 <_strtod_l+0x580>
 8009af8:	1112      	asrs	r2, r2, #4
 8009afa:	4601      	mov	r1, r0
 8009afc:	2a01      	cmp	r2, #1
 8009afe:	dc23      	bgt.n	8009b48 <_strtod_l+0x510>
 8009b00:	b108      	cbz	r0, 8009b06 <_strtod_l+0x4ce>
 8009b02:	ec59 8b17 	vmov	r8, r9, d7
 8009b06:	4a2c      	ldr	r2, [pc, #176]	; (8009bb8 <_strtod_l+0x580>)
 8009b08:	482c      	ldr	r0, [pc, #176]	; (8009bbc <_strtod_l+0x584>)
 8009b0a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009b0e:	ed92 7b00 	vldr	d7, [r2]
 8009b12:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009b16:	ec49 8b16 	vmov	d6, r8, r9
 8009b1a:	4a29      	ldr	r2, [pc, #164]	; (8009bc0 <_strtod_l+0x588>)
 8009b1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b20:	ee17 1a90 	vmov	r1, s15
 8009b24:	400a      	ands	r2, r1
 8009b26:	4282      	cmp	r2, r0
 8009b28:	ec59 8b17 	vmov	r8, r9, d7
 8009b2c:	d8bc      	bhi.n	8009aa8 <_strtod_l+0x470>
 8009b2e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009b32:	4282      	cmp	r2, r0
 8009b34:	bf86      	itte	hi
 8009b36:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009bc4 <_strtod_l+0x58c>
 8009b3a:	f04f 38ff 	movhi.w	r8, #4294967295
 8009b3e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8009b42:	2200      	movs	r2, #0
 8009b44:	9204      	str	r2, [sp, #16]
 8009b46:	e078      	b.n	8009c3a <_strtod_l+0x602>
 8009b48:	07d6      	lsls	r6, r2, #31
 8009b4a:	d504      	bpl.n	8009b56 <_strtod_l+0x51e>
 8009b4c:	ed9c 6b00 	vldr	d6, [ip]
 8009b50:	2001      	movs	r0, #1
 8009b52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b56:	3101      	adds	r1, #1
 8009b58:	1052      	asrs	r2, r2, #1
 8009b5a:	f10c 0c08 	add.w	ip, ip, #8
 8009b5e:	e7cd      	b.n	8009afc <_strtod_l+0x4c4>
 8009b60:	d0ef      	beq.n	8009b42 <_strtod_l+0x50a>
 8009b62:	4252      	negs	r2, r2
 8009b64:	f012 000f 	ands.w	r0, r2, #15
 8009b68:	d00a      	beq.n	8009b80 <_strtod_l+0x548>
 8009b6a:	4912      	ldr	r1, [pc, #72]	; (8009bb4 <_strtod_l+0x57c>)
 8009b6c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009b70:	ed91 7b00 	vldr	d7, [r1]
 8009b74:	ec49 8b16 	vmov	d6, r8, r9
 8009b78:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009b7c:	ec59 8b17 	vmov	r8, r9, d7
 8009b80:	1112      	asrs	r2, r2, #4
 8009b82:	d0de      	beq.n	8009b42 <_strtod_l+0x50a>
 8009b84:	2a1f      	cmp	r2, #31
 8009b86:	dd1f      	ble.n	8009bc8 <_strtod_l+0x590>
 8009b88:	2500      	movs	r5, #0
 8009b8a:	462e      	mov	r6, r5
 8009b8c:	9506      	str	r5, [sp, #24]
 8009b8e:	462f      	mov	r7, r5
 8009b90:	2322      	movs	r3, #34	; 0x22
 8009b92:	f04f 0800 	mov.w	r8, #0
 8009b96:	f04f 0900 	mov.w	r9, #0
 8009b9a:	6023      	str	r3, [r4, #0]
 8009b9c:	e78e      	b.n	8009abc <_strtod_l+0x484>
 8009b9e:	bf00      	nop
 8009ba0:	0800d0b1 	.word	0x0800d0b1
 8009ba4:	0800d164 	.word	0x0800d164
 8009ba8:	0800d0a9 	.word	0x0800d0a9
 8009bac:	0800d2e0 	.word	0x0800d2e0
 8009bb0:	0800d1db 	.word	0x0800d1db
 8009bb4:	0800d458 	.word	0x0800d458
 8009bb8:	0800d430 	.word	0x0800d430
 8009bbc:	7ca00000 	.word	0x7ca00000
 8009bc0:	7ff00000 	.word	0x7ff00000
 8009bc4:	7fefffff 	.word	0x7fefffff
 8009bc8:	f012 0110 	ands.w	r1, r2, #16
 8009bcc:	bf18      	it	ne
 8009bce:	216a      	movne	r1, #106	; 0x6a
 8009bd0:	9104      	str	r1, [sp, #16]
 8009bd2:	ec49 8b17 	vmov	d7, r8, r9
 8009bd6:	49be      	ldr	r1, [pc, #760]	; (8009ed0 <_strtod_l+0x898>)
 8009bd8:	2000      	movs	r0, #0
 8009bda:	07d6      	lsls	r6, r2, #31
 8009bdc:	d504      	bpl.n	8009be8 <_strtod_l+0x5b0>
 8009bde:	ed91 6b00 	vldr	d6, [r1]
 8009be2:	2001      	movs	r0, #1
 8009be4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009be8:	1052      	asrs	r2, r2, #1
 8009bea:	f101 0108 	add.w	r1, r1, #8
 8009bee:	d1f4      	bne.n	8009bda <_strtod_l+0x5a2>
 8009bf0:	b108      	cbz	r0, 8009bf6 <_strtod_l+0x5be>
 8009bf2:	ec59 8b17 	vmov	r8, r9, d7
 8009bf6:	9a04      	ldr	r2, [sp, #16]
 8009bf8:	b1c2      	cbz	r2, 8009c2c <_strtod_l+0x5f4>
 8009bfa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8009bfe:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8009c02:	2a00      	cmp	r2, #0
 8009c04:	4648      	mov	r0, r9
 8009c06:	dd11      	ble.n	8009c2c <_strtod_l+0x5f4>
 8009c08:	2a1f      	cmp	r2, #31
 8009c0a:	f340 812e 	ble.w	8009e6a <_strtod_l+0x832>
 8009c0e:	2a34      	cmp	r2, #52	; 0x34
 8009c10:	bfde      	ittt	le
 8009c12:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8009c16:	f04f 32ff 	movle.w	r2, #4294967295
 8009c1a:	fa02 f101 	lslle.w	r1, r2, r1
 8009c1e:	f04f 0800 	mov.w	r8, #0
 8009c22:	bfcc      	ite	gt
 8009c24:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009c28:	ea01 0900 	andle.w	r9, r1, r0
 8009c2c:	ec49 8b17 	vmov	d7, r8, r9
 8009c30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c38:	d0a6      	beq.n	8009b88 <_strtod_l+0x550>
 8009c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c3c:	9200      	str	r2, [sp, #0]
 8009c3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009c40:	9a06      	ldr	r2, [sp, #24]
 8009c42:	4620      	mov	r0, r4
 8009c44:	f001 fda8 	bl	800b798 <__s2b>
 8009c48:	9006      	str	r0, [sp, #24]
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	f43f af2c 	beq.w	8009aa8 <_strtod_l+0x470>
 8009c50:	9b07      	ldr	r3, [sp, #28]
 8009c52:	1b7d      	subs	r5, r7, r5
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	bfb4      	ite	lt
 8009c58:	462b      	movlt	r3, r5
 8009c5a:	2300      	movge	r3, #0
 8009c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c5e:	9b07      	ldr	r3, [sp, #28]
 8009c60:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8009eb0 <_strtod_l+0x878>
 8009c64:	ed9f ab94 	vldr	d10, [pc, #592]	; 8009eb8 <_strtod_l+0x880>
 8009c68:	ed9f bb95 	vldr	d11, [pc, #596]	; 8009ec0 <_strtod_l+0x888>
 8009c6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c70:	2500      	movs	r5, #0
 8009c72:	930c      	str	r3, [sp, #48]	; 0x30
 8009c74:	462e      	mov	r6, r5
 8009c76:	9b06      	ldr	r3, [sp, #24]
 8009c78:	4620      	mov	r0, r4
 8009c7a:	6859      	ldr	r1, [r3, #4]
 8009c7c:	f001 fce4 	bl	800b648 <_Balloc>
 8009c80:	4607      	mov	r7, r0
 8009c82:	2800      	cmp	r0, #0
 8009c84:	f43f af14 	beq.w	8009ab0 <_strtod_l+0x478>
 8009c88:	9b06      	ldr	r3, [sp, #24]
 8009c8a:	691a      	ldr	r2, [r3, #16]
 8009c8c:	3202      	adds	r2, #2
 8009c8e:	f103 010c 	add.w	r1, r3, #12
 8009c92:	0092      	lsls	r2, r2, #2
 8009c94:	300c      	adds	r0, #12
 8009c96:	f001 fcc9 	bl	800b62c <memcpy>
 8009c9a:	ec49 8b10 	vmov	d0, r8, r9
 8009c9e:	aa14      	add	r2, sp, #80	; 0x50
 8009ca0:	a913      	add	r1, sp, #76	; 0x4c
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f002 f8be 	bl	800be24 <__d2b>
 8009ca8:	ec49 8b18 	vmov	d8, r8, r9
 8009cac:	9012      	str	r0, [sp, #72]	; 0x48
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f43f aefe 	beq.w	8009ab0 <_strtod_l+0x478>
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f001 fe08 	bl	800b8cc <__i2b>
 8009cbc:	4606      	mov	r6, r0
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	f43f aef6 	beq.w	8009ab0 <_strtod_l+0x478>
 8009cc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cc6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	bfab      	itete	ge
 8009ccc:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8009cce:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009cd0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8009cd4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8009cd8:	bfac      	ite	ge
 8009cda:	eb03 0b02 	addge.w	fp, r3, r2
 8009cde:	eba2 0a03 	sublt.w	sl, r2, r3
 8009ce2:	9a04      	ldr	r2, [sp, #16]
 8009ce4:	1a9b      	subs	r3, r3, r2
 8009ce6:	440b      	add	r3, r1
 8009ce8:	4a7a      	ldr	r2, [pc, #488]	; (8009ed4 <_strtod_l+0x89c>)
 8009cea:	3b01      	subs	r3, #1
 8009cec:	4293      	cmp	r3, r2
 8009cee:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009cf2:	f280 80cd 	bge.w	8009e90 <_strtod_l+0x858>
 8009cf6:	1ad2      	subs	r2, r2, r3
 8009cf8:	2a1f      	cmp	r2, #31
 8009cfa:	eba1 0102 	sub.w	r1, r1, r2
 8009cfe:	f04f 0001 	mov.w	r0, #1
 8009d02:	f300 80b9 	bgt.w	8009e78 <_strtod_l+0x840>
 8009d06:	fa00 f302 	lsl.w	r3, r0, r2
 8009d0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d10:	eb0b 0301 	add.w	r3, fp, r1
 8009d14:	9a04      	ldr	r2, [sp, #16]
 8009d16:	459b      	cmp	fp, r3
 8009d18:	448a      	add	sl, r1
 8009d1a:	4492      	add	sl, r2
 8009d1c:	465a      	mov	r2, fp
 8009d1e:	bfa8      	it	ge
 8009d20:	461a      	movge	r2, r3
 8009d22:	4552      	cmp	r2, sl
 8009d24:	bfa8      	it	ge
 8009d26:	4652      	movge	r2, sl
 8009d28:	2a00      	cmp	r2, #0
 8009d2a:	bfc2      	ittt	gt
 8009d2c:	1a9b      	subgt	r3, r3, r2
 8009d2e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8009d32:	ebab 0b02 	subgt.w	fp, fp, r2
 8009d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d38:	2a00      	cmp	r2, #0
 8009d3a:	dd18      	ble.n	8009d6e <_strtod_l+0x736>
 8009d3c:	4631      	mov	r1, r6
 8009d3e:	4620      	mov	r0, r4
 8009d40:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d42:	f001 fe83 	bl	800ba4c <__pow5mult>
 8009d46:	4606      	mov	r6, r0
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	f43f aeb1 	beq.w	8009ab0 <_strtod_l+0x478>
 8009d4e:	4601      	mov	r1, r0
 8009d50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d52:	4620      	mov	r0, r4
 8009d54:	f001 fdd0 	bl	800b8f8 <__multiply>
 8009d58:	900e      	str	r0, [sp, #56]	; 0x38
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	f43f aea8 	beq.w	8009ab0 <_strtod_l+0x478>
 8009d60:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009d62:	4620      	mov	r0, r4
 8009d64:	f001 fcb0 	bl	800b6c8 <_Bfree>
 8009d68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d6c:	9212      	str	r2, [sp, #72]	; 0x48
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f300 8093 	bgt.w	8009e9a <_strtod_l+0x862>
 8009d74:	9b07      	ldr	r3, [sp, #28]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	dd08      	ble.n	8009d8c <_strtod_l+0x754>
 8009d7a:	4639      	mov	r1, r7
 8009d7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f001 fe64 	bl	800ba4c <__pow5mult>
 8009d84:	4607      	mov	r7, r0
 8009d86:	2800      	cmp	r0, #0
 8009d88:	f43f ae92 	beq.w	8009ab0 <_strtod_l+0x478>
 8009d8c:	f1ba 0f00 	cmp.w	sl, #0
 8009d90:	dd08      	ble.n	8009da4 <_strtod_l+0x76c>
 8009d92:	4639      	mov	r1, r7
 8009d94:	4652      	mov	r2, sl
 8009d96:	4620      	mov	r0, r4
 8009d98:	f001 feb2 	bl	800bb00 <__lshift>
 8009d9c:	4607      	mov	r7, r0
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	f43f ae86 	beq.w	8009ab0 <_strtod_l+0x478>
 8009da4:	f1bb 0f00 	cmp.w	fp, #0
 8009da8:	dd08      	ble.n	8009dbc <_strtod_l+0x784>
 8009daa:	4631      	mov	r1, r6
 8009dac:	465a      	mov	r2, fp
 8009dae:	4620      	mov	r0, r4
 8009db0:	f001 fea6 	bl	800bb00 <__lshift>
 8009db4:	4606      	mov	r6, r0
 8009db6:	2800      	cmp	r0, #0
 8009db8:	f43f ae7a 	beq.w	8009ab0 <_strtod_l+0x478>
 8009dbc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009dbe:	463a      	mov	r2, r7
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f001 ff29 	bl	800bc18 <__mdiff>
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	f43f ae71 	beq.w	8009ab0 <_strtod_l+0x478>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009dd4:	60c3      	str	r3, [r0, #12]
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	f001 ff02 	bl	800bbe0 <__mcmp>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	da7d      	bge.n	8009edc <_strtod_l+0x8a4>
 8009de0:	ea5a 0308 	orrs.w	r3, sl, r8
 8009de4:	f040 80a3 	bne.w	8009f2e <_strtod_l+0x8f6>
 8009de8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f040 809e 	bne.w	8009f2e <_strtod_l+0x8f6>
 8009df2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009df6:	0d1b      	lsrs	r3, r3, #20
 8009df8:	051b      	lsls	r3, r3, #20
 8009dfa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009dfe:	f240 8096 	bls.w	8009f2e <_strtod_l+0x8f6>
 8009e02:	696b      	ldr	r3, [r5, #20]
 8009e04:	b91b      	cbnz	r3, 8009e0e <_strtod_l+0x7d6>
 8009e06:	692b      	ldr	r3, [r5, #16]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	f340 8090 	ble.w	8009f2e <_strtod_l+0x8f6>
 8009e0e:	4629      	mov	r1, r5
 8009e10:	2201      	movs	r2, #1
 8009e12:	4620      	mov	r0, r4
 8009e14:	f001 fe74 	bl	800bb00 <__lshift>
 8009e18:	4631      	mov	r1, r6
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	f001 fee0 	bl	800bbe0 <__mcmp>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	f340 8084 	ble.w	8009f2e <_strtod_l+0x8f6>
 8009e26:	9904      	ldr	r1, [sp, #16]
 8009e28:	4a2b      	ldr	r2, [pc, #172]	; (8009ed8 <_strtod_l+0x8a0>)
 8009e2a:	464b      	mov	r3, r9
 8009e2c:	2900      	cmp	r1, #0
 8009e2e:	f000 809d 	beq.w	8009f6c <_strtod_l+0x934>
 8009e32:	ea02 0109 	and.w	r1, r2, r9
 8009e36:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009e3a:	f300 8097 	bgt.w	8009f6c <_strtod_l+0x934>
 8009e3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009e42:	f77f aea5 	ble.w	8009b90 <_strtod_l+0x558>
 8009e46:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009ec8 <_strtod_l+0x890>
 8009e4a:	ec49 8b16 	vmov	d6, r8, r9
 8009e4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009e52:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009e56:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	bf08      	it	eq
 8009e5e:	2322      	moveq	r3, #34	; 0x22
 8009e60:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009e64:	bf08      	it	eq
 8009e66:	6023      	streq	r3, [r4, #0]
 8009e68:	e62c      	b.n	8009ac4 <_strtod_l+0x48c>
 8009e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8009e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8009e72:	ea02 0808 	and.w	r8, r2, r8
 8009e76:	e6d9      	b.n	8009c2c <_strtod_l+0x5f4>
 8009e78:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009e7c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009e80:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009e84:	33e2      	adds	r3, #226	; 0xe2
 8009e86:	fa00 f303 	lsl.w	r3, r0, r3
 8009e8a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8009e8e:	e73f      	b.n	8009d10 <_strtod_l+0x6d8>
 8009e90:	2200      	movs	r2, #0
 8009e92:	2301      	movs	r3, #1
 8009e94:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009e98:	e73a      	b.n	8009d10 <_strtod_l+0x6d8>
 8009e9a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f001 fe2e 	bl	800bb00 <__lshift>
 8009ea4:	9012      	str	r0, [sp, #72]	; 0x48
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	f47f af64 	bne.w	8009d74 <_strtod_l+0x73c>
 8009eac:	e600      	b.n	8009ab0 <_strtod_l+0x478>
 8009eae:	bf00      	nop
 8009eb0:	94a03595 	.word	0x94a03595
 8009eb4:	3fcfffff 	.word	0x3fcfffff
 8009eb8:	94a03595 	.word	0x94a03595
 8009ebc:	3fdfffff 	.word	0x3fdfffff
 8009ec0:	35afe535 	.word	0x35afe535
 8009ec4:	3fe00000 	.word	0x3fe00000
 8009ec8:	00000000 	.word	0x00000000
 8009ecc:	39500000 	.word	0x39500000
 8009ed0:	0800d178 	.word	0x0800d178
 8009ed4:	fffffc02 	.word	0xfffffc02
 8009ed8:	7ff00000 	.word	0x7ff00000
 8009edc:	46cb      	mov	fp, r9
 8009ede:	d15f      	bne.n	8009fa0 <_strtod_l+0x968>
 8009ee0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ee4:	f1ba 0f00 	cmp.w	sl, #0
 8009ee8:	d02a      	beq.n	8009f40 <_strtod_l+0x908>
 8009eea:	4aa7      	ldr	r2, [pc, #668]	; (800a188 <_strtod_l+0xb50>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d12b      	bne.n	8009f48 <_strtod_l+0x910>
 8009ef0:	9b04      	ldr	r3, [sp, #16]
 8009ef2:	4642      	mov	r2, r8
 8009ef4:	b1fb      	cbz	r3, 8009f36 <_strtod_l+0x8fe>
 8009ef6:	4ba5      	ldr	r3, [pc, #660]	; (800a18c <_strtod_l+0xb54>)
 8009ef8:	ea09 0303 	and.w	r3, r9, r3
 8009efc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009f00:	f04f 31ff 	mov.w	r1, #4294967295
 8009f04:	d81a      	bhi.n	8009f3c <_strtod_l+0x904>
 8009f06:	0d1b      	lsrs	r3, r3, #20
 8009f08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d119      	bne.n	8009f48 <_strtod_l+0x910>
 8009f14:	4b9e      	ldr	r3, [pc, #632]	; (800a190 <_strtod_l+0xb58>)
 8009f16:	459b      	cmp	fp, r3
 8009f18:	d102      	bne.n	8009f20 <_strtod_l+0x8e8>
 8009f1a:	3201      	adds	r2, #1
 8009f1c:	f43f adc8 	beq.w	8009ab0 <_strtod_l+0x478>
 8009f20:	4b9a      	ldr	r3, [pc, #616]	; (800a18c <_strtod_l+0xb54>)
 8009f22:	ea0b 0303 	and.w	r3, fp, r3
 8009f26:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009f2a:	f04f 0800 	mov.w	r8, #0
 8009f2e:	9b04      	ldr	r3, [sp, #16]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d188      	bne.n	8009e46 <_strtod_l+0x80e>
 8009f34:	e5c6      	b.n	8009ac4 <_strtod_l+0x48c>
 8009f36:	f04f 33ff 	mov.w	r3, #4294967295
 8009f3a:	e7e9      	b.n	8009f10 <_strtod_l+0x8d8>
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	e7e7      	b.n	8009f10 <_strtod_l+0x8d8>
 8009f40:	ea53 0308 	orrs.w	r3, r3, r8
 8009f44:	f43f af6f 	beq.w	8009e26 <_strtod_l+0x7ee>
 8009f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f4a:	b1cb      	cbz	r3, 8009f80 <_strtod_l+0x948>
 8009f4c:	ea13 0f0b 	tst.w	r3, fp
 8009f50:	d0ed      	beq.n	8009f2e <_strtod_l+0x8f6>
 8009f52:	9a04      	ldr	r2, [sp, #16]
 8009f54:	4640      	mov	r0, r8
 8009f56:	4649      	mov	r1, r9
 8009f58:	f1ba 0f00 	cmp.w	sl, #0
 8009f5c:	d014      	beq.n	8009f88 <_strtod_l+0x950>
 8009f5e:	f7ff fb4f 	bl	8009600 <sulp>
 8009f62:	ee38 7b00 	vadd.f64	d7, d8, d0
 8009f66:	ec59 8b17 	vmov	r8, r9, d7
 8009f6a:	e7e0      	b.n	8009f2e <_strtod_l+0x8f6>
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009f72:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009f76:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009f7a:	f04f 38ff 	mov.w	r8, #4294967295
 8009f7e:	e7d6      	b.n	8009f2e <_strtod_l+0x8f6>
 8009f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f82:	ea13 0f08 	tst.w	r3, r8
 8009f86:	e7e3      	b.n	8009f50 <_strtod_l+0x918>
 8009f88:	f7ff fb3a 	bl	8009600 <sulp>
 8009f8c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009f90:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f98:	ec59 8b10 	vmov	r8, r9, d0
 8009f9c:	d1c7      	bne.n	8009f2e <_strtod_l+0x8f6>
 8009f9e:	e5f7      	b.n	8009b90 <_strtod_l+0x558>
 8009fa0:	4631      	mov	r1, r6
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	f001 ff9a 	bl	800bedc <__ratio>
 8009fa8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009fac:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb4:	d865      	bhi.n	800a082 <_strtod_l+0xa4a>
 8009fb6:	f1ba 0f00 	cmp.w	sl, #0
 8009fba:	d042      	beq.n	800a042 <_strtod_l+0xa0a>
 8009fbc:	4b75      	ldr	r3, [pc, #468]	; (800a194 <_strtod_l+0xb5c>)
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009fc4:	4871      	ldr	r0, [pc, #452]	; (800a18c <_strtod_l+0xb54>)
 8009fc6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800a1a0 <_strtod_l+0xb68>
 8009fca:	ea0b 0100 	and.w	r1, fp, r0
 8009fce:	4561      	cmp	r1, ip
 8009fd0:	f040 808e 	bne.w	800a0f0 <_strtod_l+0xab8>
 8009fd4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009fd8:	ec49 8b10 	vmov	d0, r8, r9
 8009fdc:	ec43 2b1c 	vmov	d12, r2, r3
 8009fe0:	910a      	str	r1, [sp, #40]	; 0x28
 8009fe2:	f001 fea3 	bl	800bd2c <__ulp>
 8009fe6:	ec49 8b1e 	vmov	d14, r8, r9
 8009fea:	4868      	ldr	r0, [pc, #416]	; (800a18c <_strtod_l+0xb54>)
 8009fec:	eeac eb00 	vfma.f64	d14, d12, d0
 8009ff0:	ee1e 3a90 	vmov	r3, s29
 8009ff4:	4a68      	ldr	r2, [pc, #416]	; (800a198 <_strtod_l+0xb60>)
 8009ff6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009ff8:	4018      	ands	r0, r3
 8009ffa:	4290      	cmp	r0, r2
 8009ffc:	ec59 8b1e 	vmov	r8, r9, d14
 800a000:	d94e      	bls.n	800a0a0 <_strtod_l+0xa68>
 800a002:	ee18 3a90 	vmov	r3, s17
 800a006:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d104      	bne.n	800a018 <_strtod_l+0x9e0>
 800a00e:	ee18 3a10 	vmov	r3, s16
 800a012:	3301      	adds	r3, #1
 800a014:	f43f ad4c 	beq.w	8009ab0 <_strtod_l+0x478>
 800a018:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800a190 <_strtod_l+0xb58>
 800a01c:	f04f 38ff 	mov.w	r8, #4294967295
 800a020:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a022:	4620      	mov	r0, r4
 800a024:	f001 fb50 	bl	800b6c8 <_Bfree>
 800a028:	4639      	mov	r1, r7
 800a02a:	4620      	mov	r0, r4
 800a02c:	f001 fb4c 	bl	800b6c8 <_Bfree>
 800a030:	4631      	mov	r1, r6
 800a032:	4620      	mov	r0, r4
 800a034:	f001 fb48 	bl	800b6c8 <_Bfree>
 800a038:	4629      	mov	r1, r5
 800a03a:	4620      	mov	r0, r4
 800a03c:	f001 fb44 	bl	800b6c8 <_Bfree>
 800a040:	e619      	b.n	8009c76 <_strtod_l+0x63e>
 800a042:	f1b8 0f00 	cmp.w	r8, #0
 800a046:	d112      	bne.n	800a06e <_strtod_l+0xa36>
 800a048:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a04c:	b9b3      	cbnz	r3, 800a07c <_strtod_l+0xa44>
 800a04e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a052:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a05a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800a05e:	bf58      	it	pl
 800a060:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800a064:	eeb1 7b4d 	vneg.f64	d7, d13
 800a068:	ec53 2b17 	vmov	r2, r3, d7
 800a06c:	e7aa      	b.n	8009fc4 <_strtod_l+0x98c>
 800a06e:	f1b8 0f01 	cmp.w	r8, #1
 800a072:	d103      	bne.n	800a07c <_strtod_l+0xa44>
 800a074:	f1b9 0f00 	cmp.w	r9, #0
 800a078:	f43f ad8a 	beq.w	8009b90 <_strtod_l+0x558>
 800a07c:	4b47      	ldr	r3, [pc, #284]	; (800a19c <_strtod_l+0xb64>)
 800a07e:	2200      	movs	r2, #0
 800a080:	e79e      	b.n	8009fc0 <_strtod_l+0x988>
 800a082:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800a086:	ee20 db0d 	vmul.f64	d13, d0, d13
 800a08a:	f1ba 0f00 	cmp.w	sl, #0
 800a08e:	d104      	bne.n	800a09a <_strtod_l+0xa62>
 800a090:	eeb1 7b4d 	vneg.f64	d7, d13
 800a094:	ec53 2b17 	vmov	r2, r3, d7
 800a098:	e794      	b.n	8009fc4 <_strtod_l+0x98c>
 800a09a:	eeb0 7b4d 	vmov.f64	d7, d13
 800a09e:	e7f9      	b.n	800a094 <_strtod_l+0xa5c>
 800a0a0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a0a4:	9b04      	ldr	r3, [sp, #16]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1ba      	bne.n	800a020 <_strtod_l+0x9e8>
 800a0aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0ae:	0d1b      	lsrs	r3, r3, #20
 800a0b0:	051b      	lsls	r3, r3, #20
 800a0b2:	4299      	cmp	r1, r3
 800a0b4:	d1b4      	bne.n	800a020 <_strtod_l+0x9e8>
 800a0b6:	ec51 0b1d 	vmov	r0, r1, d13
 800a0ba:	f7f6 fb55 	bl	8000768 <__aeabi_d2lz>
 800a0be:	f7f6 fb0d 	bl	80006dc <__aeabi_l2d>
 800a0c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0c6:	ec41 0b17 	vmov	d7, r0, r1
 800a0ca:	ea43 0308 	orr.w	r3, r3, r8
 800a0ce:	ea53 030a 	orrs.w	r3, r3, sl
 800a0d2:	ee3d db47 	vsub.f64	d13, d13, d7
 800a0d6:	d03c      	beq.n	800a152 <_strtod_l+0xb1a>
 800a0d8:	eeb4 dbca 	vcmpe.f64	d13, d10
 800a0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e0:	f53f acf0 	bmi.w	8009ac4 <_strtod_l+0x48c>
 800a0e4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800a0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ec:	dd98      	ble.n	800a020 <_strtod_l+0x9e8>
 800a0ee:	e4e9      	b.n	8009ac4 <_strtod_l+0x48c>
 800a0f0:	9804      	ldr	r0, [sp, #16]
 800a0f2:	b1f0      	cbz	r0, 800a132 <_strtod_l+0xafa>
 800a0f4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800a0f8:	d81b      	bhi.n	800a132 <_strtod_l+0xafa>
 800a0fa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a180 <_strtod_l+0xb48>
 800a0fe:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800a102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a106:	d811      	bhi.n	800a12c <_strtod_l+0xaf4>
 800a108:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800a10c:	ee1d 3a10 	vmov	r3, s26
 800a110:	2b01      	cmp	r3, #1
 800a112:	bf38      	it	cc
 800a114:	2301      	movcc	r3, #1
 800a116:	ee0d 3a10 	vmov	s26, r3
 800a11a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800a11e:	f1ba 0f00 	cmp.w	sl, #0
 800a122:	d113      	bne.n	800a14c <_strtod_l+0xb14>
 800a124:	eeb1 7b4d 	vneg.f64	d7, d13
 800a128:	ec53 2b17 	vmov	r2, r3, d7
 800a12c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800a130:	1a43      	subs	r3, r0, r1
 800a132:	eeb0 0b48 	vmov.f64	d0, d8
 800a136:	ec43 2b1c 	vmov	d12, r2, r3
 800a13a:	910a      	str	r1, [sp, #40]	; 0x28
 800a13c:	f001 fdf6 	bl	800bd2c <__ulp>
 800a140:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a142:	eeac 8b00 	vfma.f64	d8, d12, d0
 800a146:	ec59 8b18 	vmov	r8, r9, d8
 800a14a:	e7ab      	b.n	800a0a4 <_strtod_l+0xa6c>
 800a14c:	eeb0 7b4d 	vmov.f64	d7, d13
 800a150:	e7ea      	b.n	800a128 <_strtod_l+0xaf0>
 800a152:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800a156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a15a:	f57f af61 	bpl.w	800a020 <_strtod_l+0x9e8>
 800a15e:	e4b1      	b.n	8009ac4 <_strtod_l+0x48c>
 800a160:	2300      	movs	r3, #0
 800a162:	9308      	str	r3, [sp, #32]
 800a164:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a168:	6013      	str	r3, [r2, #0]
 800a16a:	f7ff baad 	b.w	80096c8 <_strtod_l+0x90>
 800a16e:	2a65      	cmp	r2, #101	; 0x65
 800a170:	f43f ab9f 	beq.w	80098b2 <_strtod_l+0x27a>
 800a174:	2a45      	cmp	r2, #69	; 0x45
 800a176:	f43f ab9c 	beq.w	80098b2 <_strtod_l+0x27a>
 800a17a:	2101      	movs	r1, #1
 800a17c:	f7ff bbd4 	b.w	8009928 <_strtod_l+0x2f0>
 800a180:	ffc00000 	.word	0xffc00000
 800a184:	41dfffff 	.word	0x41dfffff
 800a188:	000fffff 	.word	0x000fffff
 800a18c:	7ff00000 	.word	0x7ff00000
 800a190:	7fefffff 	.word	0x7fefffff
 800a194:	3ff00000 	.word	0x3ff00000
 800a198:	7c9fffff 	.word	0x7c9fffff
 800a19c:	bff00000 	.word	0xbff00000
 800a1a0:	7fe00000 	.word	0x7fe00000

0800a1a4 <_strtod_r>:
 800a1a4:	4b01      	ldr	r3, [pc, #4]	; (800a1ac <_strtod_r+0x8>)
 800a1a6:	f7ff ba47 	b.w	8009638 <_strtod_l>
 800a1aa:	bf00      	nop
 800a1ac:	2400008c 	.word	0x2400008c

0800a1b0 <_strtol_l.constprop.0>:
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b6:	d001      	beq.n	800a1bc <_strtol_l.constprop.0+0xc>
 800a1b8:	2b24      	cmp	r3, #36	; 0x24
 800a1ba:	d906      	bls.n	800a1ca <_strtol_l.constprop.0+0x1a>
 800a1bc:	f7fe fb3a 	bl	8008834 <__errno>
 800a1c0:	2316      	movs	r3, #22
 800a1c2:	6003      	str	r3, [r0, #0]
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a2b0 <_strtol_l.constprop.0+0x100>
 800a1ce:	460d      	mov	r5, r1
 800a1d0:	462e      	mov	r6, r5
 800a1d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a1da:	f017 0708 	ands.w	r7, r7, #8
 800a1de:	d1f7      	bne.n	800a1d0 <_strtol_l.constprop.0+0x20>
 800a1e0:	2c2d      	cmp	r4, #45	; 0x2d
 800a1e2:	d132      	bne.n	800a24a <_strtol_l.constprop.0+0x9a>
 800a1e4:	782c      	ldrb	r4, [r5, #0]
 800a1e6:	2701      	movs	r7, #1
 800a1e8:	1cb5      	adds	r5, r6, #2
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d05b      	beq.n	800a2a6 <_strtol_l.constprop.0+0xf6>
 800a1ee:	2b10      	cmp	r3, #16
 800a1f0:	d109      	bne.n	800a206 <_strtol_l.constprop.0+0x56>
 800a1f2:	2c30      	cmp	r4, #48	; 0x30
 800a1f4:	d107      	bne.n	800a206 <_strtol_l.constprop.0+0x56>
 800a1f6:	782c      	ldrb	r4, [r5, #0]
 800a1f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a1fc:	2c58      	cmp	r4, #88	; 0x58
 800a1fe:	d14d      	bne.n	800a29c <_strtol_l.constprop.0+0xec>
 800a200:	786c      	ldrb	r4, [r5, #1]
 800a202:	2310      	movs	r3, #16
 800a204:	3502      	adds	r5, #2
 800a206:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a20a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a20e:	f04f 0c00 	mov.w	ip, #0
 800a212:	fbb8 f9f3 	udiv	r9, r8, r3
 800a216:	4666      	mov	r6, ip
 800a218:	fb03 8a19 	mls	sl, r3, r9, r8
 800a21c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a220:	f1be 0f09 	cmp.w	lr, #9
 800a224:	d816      	bhi.n	800a254 <_strtol_l.constprop.0+0xa4>
 800a226:	4674      	mov	r4, lr
 800a228:	42a3      	cmp	r3, r4
 800a22a:	dd24      	ble.n	800a276 <_strtol_l.constprop.0+0xc6>
 800a22c:	f1bc 0f00 	cmp.w	ip, #0
 800a230:	db1e      	blt.n	800a270 <_strtol_l.constprop.0+0xc0>
 800a232:	45b1      	cmp	r9, r6
 800a234:	d31c      	bcc.n	800a270 <_strtol_l.constprop.0+0xc0>
 800a236:	d101      	bne.n	800a23c <_strtol_l.constprop.0+0x8c>
 800a238:	45a2      	cmp	sl, r4
 800a23a:	db19      	blt.n	800a270 <_strtol_l.constprop.0+0xc0>
 800a23c:	fb06 4603 	mla	r6, r6, r3, r4
 800a240:	f04f 0c01 	mov.w	ip, #1
 800a244:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a248:	e7e8      	b.n	800a21c <_strtol_l.constprop.0+0x6c>
 800a24a:	2c2b      	cmp	r4, #43	; 0x2b
 800a24c:	bf04      	itt	eq
 800a24e:	782c      	ldrbeq	r4, [r5, #0]
 800a250:	1cb5      	addeq	r5, r6, #2
 800a252:	e7ca      	b.n	800a1ea <_strtol_l.constprop.0+0x3a>
 800a254:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a258:	f1be 0f19 	cmp.w	lr, #25
 800a25c:	d801      	bhi.n	800a262 <_strtol_l.constprop.0+0xb2>
 800a25e:	3c37      	subs	r4, #55	; 0x37
 800a260:	e7e2      	b.n	800a228 <_strtol_l.constprop.0+0x78>
 800a262:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a266:	f1be 0f19 	cmp.w	lr, #25
 800a26a:	d804      	bhi.n	800a276 <_strtol_l.constprop.0+0xc6>
 800a26c:	3c57      	subs	r4, #87	; 0x57
 800a26e:	e7db      	b.n	800a228 <_strtol_l.constprop.0+0x78>
 800a270:	f04f 3cff 	mov.w	ip, #4294967295
 800a274:	e7e6      	b.n	800a244 <_strtol_l.constprop.0+0x94>
 800a276:	f1bc 0f00 	cmp.w	ip, #0
 800a27a:	da05      	bge.n	800a288 <_strtol_l.constprop.0+0xd8>
 800a27c:	2322      	movs	r3, #34	; 0x22
 800a27e:	6003      	str	r3, [r0, #0]
 800a280:	4646      	mov	r6, r8
 800a282:	b942      	cbnz	r2, 800a296 <_strtol_l.constprop.0+0xe6>
 800a284:	4630      	mov	r0, r6
 800a286:	e79e      	b.n	800a1c6 <_strtol_l.constprop.0+0x16>
 800a288:	b107      	cbz	r7, 800a28c <_strtol_l.constprop.0+0xdc>
 800a28a:	4276      	negs	r6, r6
 800a28c:	2a00      	cmp	r2, #0
 800a28e:	d0f9      	beq.n	800a284 <_strtol_l.constprop.0+0xd4>
 800a290:	f1bc 0f00 	cmp.w	ip, #0
 800a294:	d000      	beq.n	800a298 <_strtol_l.constprop.0+0xe8>
 800a296:	1e69      	subs	r1, r5, #1
 800a298:	6011      	str	r1, [r2, #0]
 800a29a:	e7f3      	b.n	800a284 <_strtol_l.constprop.0+0xd4>
 800a29c:	2430      	movs	r4, #48	; 0x30
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1b1      	bne.n	800a206 <_strtol_l.constprop.0+0x56>
 800a2a2:	2308      	movs	r3, #8
 800a2a4:	e7af      	b.n	800a206 <_strtol_l.constprop.0+0x56>
 800a2a6:	2c30      	cmp	r4, #48	; 0x30
 800a2a8:	d0a5      	beq.n	800a1f6 <_strtol_l.constprop.0+0x46>
 800a2aa:	230a      	movs	r3, #10
 800a2ac:	e7ab      	b.n	800a206 <_strtol_l.constprop.0+0x56>
 800a2ae:	bf00      	nop
 800a2b0:	0800d1dd 	.word	0x0800d1dd

0800a2b4 <_strtol_r>:
 800a2b4:	f7ff bf7c 	b.w	800a1b0 <_strtol_l.constprop.0>

0800a2b8 <__assert_func>:
 800a2b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2ba:	4614      	mov	r4, r2
 800a2bc:	461a      	mov	r2, r3
 800a2be:	4b09      	ldr	r3, [pc, #36]	; (800a2e4 <__assert_func+0x2c>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	68d8      	ldr	r0, [r3, #12]
 800a2c6:	b14c      	cbz	r4, 800a2dc <__assert_func+0x24>
 800a2c8:	4b07      	ldr	r3, [pc, #28]	; (800a2e8 <__assert_func+0x30>)
 800a2ca:	9100      	str	r1, [sp, #0]
 800a2cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2d0:	4906      	ldr	r1, [pc, #24]	; (800a2ec <__assert_func+0x34>)
 800a2d2:	462b      	mov	r3, r5
 800a2d4:	f000 fe0a 	bl	800aeec <fiprintf>
 800a2d8:	f002 fb1c 	bl	800c914 <abort>
 800a2dc:	4b04      	ldr	r3, [pc, #16]	; (800a2f0 <__assert_func+0x38>)
 800a2de:	461c      	mov	r4, r3
 800a2e0:	e7f3      	b.n	800a2ca <__assert_func+0x12>
 800a2e2:	bf00      	nop
 800a2e4:	24000024 	.word	0x24000024
 800a2e8:	0800d1a0 	.word	0x0800d1a0
 800a2ec:	0800d1ad 	.word	0x0800d1ad
 800a2f0:	0800d1db 	.word	0x0800d1db

0800a2f4 <quorem>:
 800a2f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f8:	6903      	ldr	r3, [r0, #16]
 800a2fa:	690c      	ldr	r4, [r1, #16]
 800a2fc:	42a3      	cmp	r3, r4
 800a2fe:	4607      	mov	r7, r0
 800a300:	f2c0 8081 	blt.w	800a406 <quorem+0x112>
 800a304:	3c01      	subs	r4, #1
 800a306:	f101 0814 	add.w	r8, r1, #20
 800a30a:	f100 0514 	add.w	r5, r0, #20
 800a30e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a312:	9301      	str	r3, [sp, #4]
 800a314:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a318:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a31c:	3301      	adds	r3, #1
 800a31e:	429a      	cmp	r2, r3
 800a320:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a324:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a328:	fbb2 f6f3 	udiv	r6, r2, r3
 800a32c:	d331      	bcc.n	800a392 <quorem+0x9e>
 800a32e:	f04f 0e00 	mov.w	lr, #0
 800a332:	4640      	mov	r0, r8
 800a334:	46ac      	mov	ip, r5
 800a336:	46f2      	mov	sl, lr
 800a338:	f850 2b04 	ldr.w	r2, [r0], #4
 800a33c:	b293      	uxth	r3, r2
 800a33e:	fb06 e303 	mla	r3, r6, r3, lr
 800a342:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a346:	b29b      	uxth	r3, r3
 800a348:	ebaa 0303 	sub.w	r3, sl, r3
 800a34c:	f8dc a000 	ldr.w	sl, [ip]
 800a350:	0c12      	lsrs	r2, r2, #16
 800a352:	fa13 f38a 	uxtah	r3, r3, sl
 800a356:	fb06 e202 	mla	r2, r6, r2, lr
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	9b00      	ldr	r3, [sp, #0]
 800a35e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a362:	b292      	uxth	r2, r2
 800a364:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a368:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a36c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a370:	4581      	cmp	r9, r0
 800a372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a376:	f84c 3b04 	str.w	r3, [ip], #4
 800a37a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a37e:	d2db      	bcs.n	800a338 <quorem+0x44>
 800a380:	f855 300b 	ldr.w	r3, [r5, fp]
 800a384:	b92b      	cbnz	r3, 800a392 <quorem+0x9e>
 800a386:	9b01      	ldr	r3, [sp, #4]
 800a388:	3b04      	subs	r3, #4
 800a38a:	429d      	cmp	r5, r3
 800a38c:	461a      	mov	r2, r3
 800a38e:	d32e      	bcc.n	800a3ee <quorem+0xfa>
 800a390:	613c      	str	r4, [r7, #16]
 800a392:	4638      	mov	r0, r7
 800a394:	f001 fc24 	bl	800bbe0 <__mcmp>
 800a398:	2800      	cmp	r0, #0
 800a39a:	db24      	blt.n	800a3e6 <quorem+0xf2>
 800a39c:	3601      	adds	r6, #1
 800a39e:	4628      	mov	r0, r5
 800a3a0:	f04f 0c00 	mov.w	ip, #0
 800a3a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a3a8:	f8d0 e000 	ldr.w	lr, [r0]
 800a3ac:	b293      	uxth	r3, r2
 800a3ae:	ebac 0303 	sub.w	r3, ip, r3
 800a3b2:	0c12      	lsrs	r2, r2, #16
 800a3b4:	fa13 f38e 	uxtah	r3, r3, lr
 800a3b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3c6:	45c1      	cmp	r9, r8
 800a3c8:	f840 3b04 	str.w	r3, [r0], #4
 800a3cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3d0:	d2e8      	bcs.n	800a3a4 <quorem+0xb0>
 800a3d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3da:	b922      	cbnz	r2, 800a3e6 <quorem+0xf2>
 800a3dc:	3b04      	subs	r3, #4
 800a3de:	429d      	cmp	r5, r3
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	d30a      	bcc.n	800a3fa <quorem+0x106>
 800a3e4:	613c      	str	r4, [r7, #16]
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	b003      	add	sp, #12
 800a3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ee:	6812      	ldr	r2, [r2, #0]
 800a3f0:	3b04      	subs	r3, #4
 800a3f2:	2a00      	cmp	r2, #0
 800a3f4:	d1cc      	bne.n	800a390 <quorem+0x9c>
 800a3f6:	3c01      	subs	r4, #1
 800a3f8:	e7c7      	b.n	800a38a <quorem+0x96>
 800a3fa:	6812      	ldr	r2, [r2, #0]
 800a3fc:	3b04      	subs	r3, #4
 800a3fe:	2a00      	cmp	r2, #0
 800a400:	d1f0      	bne.n	800a3e4 <quorem+0xf0>
 800a402:	3c01      	subs	r4, #1
 800a404:	e7eb      	b.n	800a3de <quorem+0xea>
 800a406:	2000      	movs	r0, #0
 800a408:	e7ee      	b.n	800a3e8 <quorem+0xf4>
 800a40a:	0000      	movs	r0, r0
 800a40c:	0000      	movs	r0, r0
	...

0800a410 <_dtoa_r>:
 800a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	ed2d 8b02 	vpush	{d8}
 800a418:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a41a:	b091      	sub	sp, #68	; 0x44
 800a41c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a420:	ec59 8b10 	vmov	r8, r9, d0
 800a424:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a426:	9106      	str	r1, [sp, #24]
 800a428:	4606      	mov	r6, r0
 800a42a:	9208      	str	r2, [sp, #32]
 800a42c:	930c      	str	r3, [sp, #48]	; 0x30
 800a42e:	b975      	cbnz	r5, 800a44e <_dtoa_r+0x3e>
 800a430:	2010      	movs	r0, #16
 800a432:	f001 f8e1 	bl	800b5f8 <malloc>
 800a436:	4602      	mov	r2, r0
 800a438:	6270      	str	r0, [r6, #36]	; 0x24
 800a43a:	b920      	cbnz	r0, 800a446 <_dtoa_r+0x36>
 800a43c:	4baa      	ldr	r3, [pc, #680]	; (800a6e8 <_dtoa_r+0x2d8>)
 800a43e:	21ea      	movs	r1, #234	; 0xea
 800a440:	48aa      	ldr	r0, [pc, #680]	; (800a6ec <_dtoa_r+0x2dc>)
 800a442:	f7ff ff39 	bl	800a2b8 <__assert_func>
 800a446:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a44a:	6005      	str	r5, [r0, #0]
 800a44c:	60c5      	str	r5, [r0, #12]
 800a44e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a450:	6819      	ldr	r1, [r3, #0]
 800a452:	b151      	cbz	r1, 800a46a <_dtoa_r+0x5a>
 800a454:	685a      	ldr	r2, [r3, #4]
 800a456:	604a      	str	r2, [r1, #4]
 800a458:	2301      	movs	r3, #1
 800a45a:	4093      	lsls	r3, r2
 800a45c:	608b      	str	r3, [r1, #8]
 800a45e:	4630      	mov	r0, r6
 800a460:	f001 f932 	bl	800b6c8 <_Bfree>
 800a464:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a466:	2200      	movs	r2, #0
 800a468:	601a      	str	r2, [r3, #0]
 800a46a:	f1b9 0300 	subs.w	r3, r9, #0
 800a46e:	bfbb      	ittet	lt
 800a470:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a474:	9303      	strlt	r3, [sp, #12]
 800a476:	2300      	movge	r3, #0
 800a478:	2201      	movlt	r2, #1
 800a47a:	bfac      	ite	ge
 800a47c:	6023      	strge	r3, [r4, #0]
 800a47e:	6022      	strlt	r2, [r4, #0]
 800a480:	4b9b      	ldr	r3, [pc, #620]	; (800a6f0 <_dtoa_r+0x2e0>)
 800a482:	9c03      	ldr	r4, [sp, #12]
 800a484:	43a3      	bics	r3, r4
 800a486:	d11c      	bne.n	800a4c2 <_dtoa_r+0xb2>
 800a488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a48a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a494:	ea53 0308 	orrs.w	r3, r3, r8
 800a498:	f000 84fd 	beq.w	800ae96 <_dtoa_r+0xa86>
 800a49c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a49e:	b963      	cbnz	r3, 800a4ba <_dtoa_r+0xaa>
 800a4a0:	4b94      	ldr	r3, [pc, #592]	; (800a6f4 <_dtoa_r+0x2e4>)
 800a4a2:	e01f      	b.n	800a4e4 <_dtoa_r+0xd4>
 800a4a4:	4b94      	ldr	r3, [pc, #592]	; (800a6f8 <_dtoa_r+0x2e8>)
 800a4a6:	9301      	str	r3, [sp, #4]
 800a4a8:	3308      	adds	r3, #8
 800a4aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a4ac:	6013      	str	r3, [r2, #0]
 800a4ae:	9801      	ldr	r0, [sp, #4]
 800a4b0:	b011      	add	sp, #68	; 0x44
 800a4b2:	ecbd 8b02 	vpop	{d8}
 800a4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ba:	4b8e      	ldr	r3, [pc, #568]	; (800a6f4 <_dtoa_r+0x2e4>)
 800a4bc:	9301      	str	r3, [sp, #4]
 800a4be:	3303      	adds	r3, #3
 800a4c0:	e7f3      	b.n	800a4aa <_dtoa_r+0x9a>
 800a4c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a4c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ce:	d10b      	bne.n	800a4e8 <_dtoa_r+0xd8>
 800a4d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 84d9 	beq.w	800ae90 <_dtoa_r+0xa80>
 800a4de:	4887      	ldr	r0, [pc, #540]	; (800a6fc <_dtoa_r+0x2ec>)
 800a4e0:	6018      	str	r0, [r3, #0]
 800a4e2:	1e43      	subs	r3, r0, #1
 800a4e4:	9301      	str	r3, [sp, #4]
 800a4e6:	e7e2      	b.n	800a4ae <_dtoa_r+0x9e>
 800a4e8:	a90f      	add	r1, sp, #60	; 0x3c
 800a4ea:	aa0e      	add	r2, sp, #56	; 0x38
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	eeb0 0b48 	vmov.f64	d0, d8
 800a4f2:	f001 fc97 	bl	800be24 <__d2b>
 800a4f6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a4fe:	2900      	cmp	r1, #0
 800a500:	d046      	beq.n	800a590 <_dtoa_r+0x180>
 800a502:	ee18 4a90 	vmov	r4, s17
 800a506:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a50a:	ec53 2b18 	vmov	r2, r3, d8
 800a50e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a512:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a516:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a51a:	2400      	movs	r4, #0
 800a51c:	ec43 2b16 	vmov	d6, r2, r3
 800a520:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a524:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a6d0 <_dtoa_r+0x2c0>
 800a528:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a52c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a6d8 <_dtoa_r+0x2c8>
 800a530:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a534:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a6e0 <_dtoa_r+0x2d0>
 800a538:	ee07 1a90 	vmov	s15, r1
 800a53c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a540:	eeb0 7b46 	vmov.f64	d7, d6
 800a544:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a548:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a54c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a554:	ee16 ba90 	vmov	fp, s13
 800a558:	940a      	str	r4, [sp, #40]	; 0x28
 800a55a:	d508      	bpl.n	800a56e <_dtoa_r+0x15e>
 800a55c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a560:	eeb4 6b47 	vcmp.f64	d6, d7
 800a564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a568:	bf18      	it	ne
 800a56a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a56e:	f1bb 0f16 	cmp.w	fp, #22
 800a572:	d82f      	bhi.n	800a5d4 <_dtoa_r+0x1c4>
 800a574:	4b62      	ldr	r3, [pc, #392]	; (800a700 <_dtoa_r+0x2f0>)
 800a576:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a57a:	ed93 7b00 	vldr	d7, [r3]
 800a57e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a586:	d501      	bpl.n	800a58c <_dtoa_r+0x17c>
 800a588:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a58c:	2300      	movs	r3, #0
 800a58e:	e022      	b.n	800a5d6 <_dtoa_r+0x1c6>
 800a590:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a592:	4401      	add	r1, r0
 800a594:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a598:	2b20      	cmp	r3, #32
 800a59a:	bfc1      	itttt	gt
 800a59c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5a0:	fa04 f303 	lslgt.w	r3, r4, r3
 800a5a4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a5a8:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a5ac:	bfd6      	itet	le
 800a5ae:	f1c3 0320 	rsble	r3, r3, #32
 800a5b2:	ea43 0808 	orrgt.w	r8, r3, r8
 800a5b6:	fa08 f803 	lslle.w	r8, r8, r3
 800a5ba:	ee07 8a90 	vmov	s15, r8
 800a5be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a5c2:	3901      	subs	r1, #1
 800a5c4:	ee17 4a90 	vmov	r4, s15
 800a5c8:	ec53 2b17 	vmov	r2, r3, d7
 800a5cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a5d0:	2401      	movs	r4, #1
 800a5d2:	e7a3      	b.n	800a51c <_dtoa_r+0x10c>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5d8:	1a43      	subs	r3, r0, r1
 800a5da:	1e5a      	subs	r2, r3, #1
 800a5dc:	bf45      	ittet	mi
 800a5de:	f1c3 0301 	rsbmi	r3, r3, #1
 800a5e2:	9304      	strmi	r3, [sp, #16]
 800a5e4:	2300      	movpl	r3, #0
 800a5e6:	2300      	movmi	r3, #0
 800a5e8:	9205      	str	r2, [sp, #20]
 800a5ea:	bf54      	ite	pl
 800a5ec:	9304      	strpl	r3, [sp, #16]
 800a5ee:	9305      	strmi	r3, [sp, #20]
 800a5f0:	f1bb 0f00 	cmp.w	fp, #0
 800a5f4:	db18      	blt.n	800a628 <_dtoa_r+0x218>
 800a5f6:	9b05      	ldr	r3, [sp, #20]
 800a5f8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a5fc:	445b      	add	r3, fp
 800a5fe:	9305      	str	r3, [sp, #20]
 800a600:	2300      	movs	r3, #0
 800a602:	9a06      	ldr	r2, [sp, #24]
 800a604:	2a09      	cmp	r2, #9
 800a606:	d849      	bhi.n	800a69c <_dtoa_r+0x28c>
 800a608:	2a05      	cmp	r2, #5
 800a60a:	bfc4      	itt	gt
 800a60c:	3a04      	subgt	r2, #4
 800a60e:	9206      	strgt	r2, [sp, #24]
 800a610:	9a06      	ldr	r2, [sp, #24]
 800a612:	f1a2 0202 	sub.w	r2, r2, #2
 800a616:	bfcc      	ite	gt
 800a618:	2400      	movgt	r4, #0
 800a61a:	2401      	movle	r4, #1
 800a61c:	2a03      	cmp	r2, #3
 800a61e:	d848      	bhi.n	800a6b2 <_dtoa_r+0x2a2>
 800a620:	e8df f002 	tbb	[pc, r2]
 800a624:	3a2c2e0b 	.word	0x3a2c2e0b
 800a628:	9b04      	ldr	r3, [sp, #16]
 800a62a:	2200      	movs	r2, #0
 800a62c:	eba3 030b 	sub.w	r3, r3, fp
 800a630:	9304      	str	r3, [sp, #16]
 800a632:	9209      	str	r2, [sp, #36]	; 0x24
 800a634:	f1cb 0300 	rsb	r3, fp, #0
 800a638:	e7e3      	b.n	800a602 <_dtoa_r+0x1f2>
 800a63a:	2200      	movs	r2, #0
 800a63c:	9207      	str	r2, [sp, #28]
 800a63e:	9a08      	ldr	r2, [sp, #32]
 800a640:	2a00      	cmp	r2, #0
 800a642:	dc39      	bgt.n	800a6b8 <_dtoa_r+0x2a8>
 800a644:	f04f 0a01 	mov.w	sl, #1
 800a648:	46d1      	mov	r9, sl
 800a64a:	4652      	mov	r2, sl
 800a64c:	f8cd a020 	str.w	sl, [sp, #32]
 800a650:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a652:	2100      	movs	r1, #0
 800a654:	6079      	str	r1, [r7, #4]
 800a656:	2004      	movs	r0, #4
 800a658:	f100 0c14 	add.w	ip, r0, #20
 800a65c:	4594      	cmp	ip, r2
 800a65e:	6879      	ldr	r1, [r7, #4]
 800a660:	d92f      	bls.n	800a6c2 <_dtoa_r+0x2b2>
 800a662:	4630      	mov	r0, r6
 800a664:	930d      	str	r3, [sp, #52]	; 0x34
 800a666:	f000 ffef 	bl	800b648 <_Balloc>
 800a66a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a66c:	9001      	str	r0, [sp, #4]
 800a66e:	4602      	mov	r2, r0
 800a670:	2800      	cmp	r0, #0
 800a672:	d149      	bne.n	800a708 <_dtoa_r+0x2f8>
 800a674:	4b23      	ldr	r3, [pc, #140]	; (800a704 <_dtoa_r+0x2f4>)
 800a676:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a67a:	e6e1      	b.n	800a440 <_dtoa_r+0x30>
 800a67c:	2201      	movs	r2, #1
 800a67e:	e7dd      	b.n	800a63c <_dtoa_r+0x22c>
 800a680:	2200      	movs	r2, #0
 800a682:	9207      	str	r2, [sp, #28]
 800a684:	9a08      	ldr	r2, [sp, #32]
 800a686:	eb0b 0a02 	add.w	sl, fp, r2
 800a68a:	f10a 0901 	add.w	r9, sl, #1
 800a68e:	464a      	mov	r2, r9
 800a690:	2a01      	cmp	r2, #1
 800a692:	bfb8      	it	lt
 800a694:	2201      	movlt	r2, #1
 800a696:	e7db      	b.n	800a650 <_dtoa_r+0x240>
 800a698:	2201      	movs	r2, #1
 800a69a:	e7f2      	b.n	800a682 <_dtoa_r+0x272>
 800a69c:	2401      	movs	r4, #1
 800a69e:	2200      	movs	r2, #0
 800a6a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a6a4:	f04f 3aff 	mov.w	sl, #4294967295
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	46d1      	mov	r9, sl
 800a6ac:	2212      	movs	r2, #18
 800a6ae:	9108      	str	r1, [sp, #32]
 800a6b0:	e7ce      	b.n	800a650 <_dtoa_r+0x240>
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	9207      	str	r2, [sp, #28]
 800a6b6:	e7f5      	b.n	800a6a4 <_dtoa_r+0x294>
 800a6b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a6bc:	46d1      	mov	r9, sl
 800a6be:	4652      	mov	r2, sl
 800a6c0:	e7c6      	b.n	800a650 <_dtoa_r+0x240>
 800a6c2:	3101      	adds	r1, #1
 800a6c4:	6079      	str	r1, [r7, #4]
 800a6c6:	0040      	lsls	r0, r0, #1
 800a6c8:	e7c6      	b.n	800a658 <_dtoa_r+0x248>
 800a6ca:	bf00      	nop
 800a6cc:	f3af 8000 	nop.w
 800a6d0:	636f4361 	.word	0x636f4361
 800a6d4:	3fd287a7 	.word	0x3fd287a7
 800a6d8:	8b60c8b3 	.word	0x8b60c8b3
 800a6dc:	3fc68a28 	.word	0x3fc68a28
 800a6e0:	509f79fb 	.word	0x509f79fb
 800a6e4:	3fd34413 	.word	0x3fd34413
 800a6e8:	0800d0dd 	.word	0x0800d0dd
 800a6ec:	0800d2ea 	.word	0x0800d2ea
 800a6f0:	7ff00000 	.word	0x7ff00000
 800a6f4:	0800d2e6 	.word	0x0800d2e6
 800a6f8:	0800d2dd 	.word	0x0800d2dd
 800a6fc:	0800d0b5 	.word	0x0800d0b5
 800a700:	0800d458 	.word	0x0800d458
 800a704:	0800d345 	.word	0x0800d345
 800a708:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a70a:	9901      	ldr	r1, [sp, #4]
 800a70c:	6011      	str	r1, [r2, #0]
 800a70e:	f1b9 0f0e 	cmp.w	r9, #14
 800a712:	d86c      	bhi.n	800a7ee <_dtoa_r+0x3de>
 800a714:	2c00      	cmp	r4, #0
 800a716:	d06a      	beq.n	800a7ee <_dtoa_r+0x3de>
 800a718:	f1bb 0f00 	cmp.w	fp, #0
 800a71c:	f340 80a0 	ble.w	800a860 <_dtoa_r+0x450>
 800a720:	49c1      	ldr	r1, [pc, #772]	; (800aa28 <_dtoa_r+0x618>)
 800a722:	f00b 020f 	and.w	r2, fp, #15
 800a726:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a72a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a72e:	ed92 7b00 	vldr	d7, [r2]
 800a732:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a736:	f000 8087 	beq.w	800a848 <_dtoa_r+0x438>
 800a73a:	4abc      	ldr	r2, [pc, #752]	; (800aa2c <_dtoa_r+0x61c>)
 800a73c:	ed92 6b08 	vldr	d6, [r2, #32]
 800a740:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a744:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a748:	f001 010f 	and.w	r1, r1, #15
 800a74c:	2203      	movs	r2, #3
 800a74e:	48b7      	ldr	r0, [pc, #732]	; (800aa2c <_dtoa_r+0x61c>)
 800a750:	2900      	cmp	r1, #0
 800a752:	d17b      	bne.n	800a84c <_dtoa_r+0x43c>
 800a754:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a758:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a75c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a760:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a762:	2900      	cmp	r1, #0
 800a764:	f000 80a2 	beq.w	800a8ac <_dtoa_r+0x49c>
 800a768:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a76c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a770:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a778:	f140 8098 	bpl.w	800a8ac <_dtoa_r+0x49c>
 800a77c:	f1b9 0f00 	cmp.w	r9, #0
 800a780:	f000 8094 	beq.w	800a8ac <_dtoa_r+0x49c>
 800a784:	f1ba 0f00 	cmp.w	sl, #0
 800a788:	dd2f      	ble.n	800a7ea <_dtoa_r+0x3da>
 800a78a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a78e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a792:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a796:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a79a:	3201      	adds	r2, #1
 800a79c:	4650      	mov	r0, sl
 800a79e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a7a2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a7a6:	ee07 2a90 	vmov	s15, r2
 800a7aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a7ae:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a7b2:	ee15 4a90 	vmov	r4, s11
 800a7b6:	ec52 1b15 	vmov	r1, r2, d5
 800a7ba:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d177      	bne.n	800a8b2 <_dtoa_r+0x4a2>
 800a7c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a7c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a7ca:	ec42 1b17 	vmov	d7, r1, r2
 800a7ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d6:	f300 8263 	bgt.w	800aca0 <_dtoa_r+0x890>
 800a7da:	eeb1 7b47 	vneg.f64	d7, d7
 800a7de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e6:	f100 8258 	bmi.w	800ac9a <_dtoa_r+0x88a>
 800a7ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a7ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7f0:	2a00      	cmp	r2, #0
 800a7f2:	f2c0 811d 	blt.w	800aa30 <_dtoa_r+0x620>
 800a7f6:	f1bb 0f0e 	cmp.w	fp, #14
 800a7fa:	f300 8119 	bgt.w	800aa30 <_dtoa_r+0x620>
 800a7fe:	4b8a      	ldr	r3, [pc, #552]	; (800aa28 <_dtoa_r+0x618>)
 800a800:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a804:	ed93 6b00 	vldr	d6, [r3]
 800a808:	9b08      	ldr	r3, [sp, #32]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f280 80b7 	bge.w	800a97e <_dtoa_r+0x56e>
 800a810:	f1b9 0f00 	cmp.w	r9, #0
 800a814:	f300 80b3 	bgt.w	800a97e <_dtoa_r+0x56e>
 800a818:	f040 823f 	bne.w	800ac9a <_dtoa_r+0x88a>
 800a81c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a820:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a824:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a828:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a830:	464c      	mov	r4, r9
 800a832:	464f      	mov	r7, r9
 800a834:	f280 8215 	bge.w	800ac62 <_dtoa_r+0x852>
 800a838:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a83c:	2331      	movs	r3, #49	; 0x31
 800a83e:	f808 3b01 	strb.w	r3, [r8], #1
 800a842:	f10b 0b01 	add.w	fp, fp, #1
 800a846:	e211      	b.n	800ac6c <_dtoa_r+0x85c>
 800a848:	2202      	movs	r2, #2
 800a84a:	e780      	b.n	800a74e <_dtoa_r+0x33e>
 800a84c:	07cc      	lsls	r4, r1, #31
 800a84e:	d504      	bpl.n	800a85a <_dtoa_r+0x44a>
 800a850:	ed90 6b00 	vldr	d6, [r0]
 800a854:	3201      	adds	r2, #1
 800a856:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a85a:	1049      	asrs	r1, r1, #1
 800a85c:	3008      	adds	r0, #8
 800a85e:	e777      	b.n	800a750 <_dtoa_r+0x340>
 800a860:	d022      	beq.n	800a8a8 <_dtoa_r+0x498>
 800a862:	f1cb 0100 	rsb	r1, fp, #0
 800a866:	4a70      	ldr	r2, [pc, #448]	; (800aa28 <_dtoa_r+0x618>)
 800a868:	f001 000f 	and.w	r0, r1, #15
 800a86c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a870:	ed92 7b00 	vldr	d7, [r2]
 800a874:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a878:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a87c:	486b      	ldr	r0, [pc, #428]	; (800aa2c <_dtoa_r+0x61c>)
 800a87e:	1109      	asrs	r1, r1, #4
 800a880:	2400      	movs	r4, #0
 800a882:	2202      	movs	r2, #2
 800a884:	b929      	cbnz	r1, 800a892 <_dtoa_r+0x482>
 800a886:	2c00      	cmp	r4, #0
 800a888:	f43f af6a 	beq.w	800a760 <_dtoa_r+0x350>
 800a88c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a890:	e766      	b.n	800a760 <_dtoa_r+0x350>
 800a892:	07cf      	lsls	r7, r1, #31
 800a894:	d505      	bpl.n	800a8a2 <_dtoa_r+0x492>
 800a896:	ed90 6b00 	vldr	d6, [r0]
 800a89a:	3201      	adds	r2, #1
 800a89c:	2401      	movs	r4, #1
 800a89e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a8a2:	1049      	asrs	r1, r1, #1
 800a8a4:	3008      	adds	r0, #8
 800a8a6:	e7ed      	b.n	800a884 <_dtoa_r+0x474>
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	e759      	b.n	800a760 <_dtoa_r+0x350>
 800a8ac:	465f      	mov	r7, fp
 800a8ae:	4648      	mov	r0, r9
 800a8b0:	e775      	b.n	800a79e <_dtoa_r+0x38e>
 800a8b2:	ec42 1b17 	vmov	d7, r1, r2
 800a8b6:	4a5c      	ldr	r2, [pc, #368]	; (800aa28 <_dtoa_r+0x618>)
 800a8b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a8bc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a8c0:	9a01      	ldr	r2, [sp, #4]
 800a8c2:	1814      	adds	r4, r2, r0
 800a8c4:	9a07      	ldr	r2, [sp, #28]
 800a8c6:	b352      	cbz	r2, 800a91e <_dtoa_r+0x50e>
 800a8c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a8cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a8d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a8d4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a8d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a8dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a8e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a8e4:	ee14 2a90 	vmov	r2, s9
 800a8e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a8ec:	3230      	adds	r2, #48	; 0x30
 800a8ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a8f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8fa:	f808 2b01 	strb.w	r2, [r8], #1
 800a8fe:	d439      	bmi.n	800a974 <_dtoa_r+0x564>
 800a900:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a904:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a90c:	d472      	bmi.n	800a9f4 <_dtoa_r+0x5e4>
 800a90e:	45a0      	cmp	r8, r4
 800a910:	f43f af6b 	beq.w	800a7ea <_dtoa_r+0x3da>
 800a914:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a918:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a91c:	e7e0      	b.n	800a8e0 <_dtoa_r+0x4d0>
 800a91e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a922:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a926:	4621      	mov	r1, r4
 800a928:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a92c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a930:	ee14 2a90 	vmov	r2, s9
 800a934:	3230      	adds	r2, #48	; 0x30
 800a936:	f808 2b01 	strb.w	r2, [r8], #1
 800a93a:	45a0      	cmp	r8, r4
 800a93c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a940:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a944:	d118      	bne.n	800a978 <_dtoa_r+0x568>
 800a946:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a94a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a94e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a956:	dc4d      	bgt.n	800a9f4 <_dtoa_r+0x5e4>
 800a958:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a95c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a964:	f57f af41 	bpl.w	800a7ea <_dtoa_r+0x3da>
 800a968:	4688      	mov	r8, r1
 800a96a:	3901      	subs	r1, #1
 800a96c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a970:	2b30      	cmp	r3, #48	; 0x30
 800a972:	d0f9      	beq.n	800a968 <_dtoa_r+0x558>
 800a974:	46bb      	mov	fp, r7
 800a976:	e02a      	b.n	800a9ce <_dtoa_r+0x5be>
 800a978:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a97c:	e7d6      	b.n	800a92c <_dtoa_r+0x51c>
 800a97e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a982:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a986:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a98a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a98e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a992:	ee15 3a10 	vmov	r3, s10
 800a996:	3330      	adds	r3, #48	; 0x30
 800a998:	f808 3b01 	strb.w	r3, [r8], #1
 800a99c:	9b01      	ldr	r3, [sp, #4]
 800a99e:	eba8 0303 	sub.w	r3, r8, r3
 800a9a2:	4599      	cmp	r9, r3
 800a9a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a9a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a9ac:	d133      	bne.n	800aa16 <_dtoa_r+0x606>
 800a9ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a9b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ba:	dc1a      	bgt.n	800a9f2 <_dtoa_r+0x5e2>
 800a9bc:	eeb4 7b46 	vcmp.f64	d7, d6
 800a9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c4:	d103      	bne.n	800a9ce <_dtoa_r+0x5be>
 800a9c6:	ee15 3a10 	vmov	r3, s10
 800a9ca:	07d9      	lsls	r1, r3, #31
 800a9cc:	d411      	bmi.n	800a9f2 <_dtoa_r+0x5e2>
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	f000 fe79 	bl	800b6c8 <_Bfree>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9da:	f888 3000 	strb.w	r3, [r8]
 800a9de:	f10b 0301 	add.w	r3, fp, #1
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f43f ad61 	beq.w	800a4ae <_dtoa_r+0x9e>
 800a9ec:	f8c3 8000 	str.w	r8, [r3]
 800a9f0:	e55d      	b.n	800a4ae <_dtoa_r+0x9e>
 800a9f2:	465f      	mov	r7, fp
 800a9f4:	4643      	mov	r3, r8
 800a9f6:	4698      	mov	r8, r3
 800a9f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9fc:	2a39      	cmp	r2, #57	; 0x39
 800a9fe:	d106      	bne.n	800aa0e <_dtoa_r+0x5fe>
 800aa00:	9a01      	ldr	r2, [sp, #4]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d1f7      	bne.n	800a9f6 <_dtoa_r+0x5e6>
 800aa06:	9901      	ldr	r1, [sp, #4]
 800aa08:	2230      	movs	r2, #48	; 0x30
 800aa0a:	3701      	adds	r7, #1
 800aa0c:	700a      	strb	r2, [r1, #0]
 800aa0e:	781a      	ldrb	r2, [r3, #0]
 800aa10:	3201      	adds	r2, #1
 800aa12:	701a      	strb	r2, [r3, #0]
 800aa14:	e7ae      	b.n	800a974 <_dtoa_r+0x564>
 800aa16:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aa1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa22:	d1b2      	bne.n	800a98a <_dtoa_r+0x57a>
 800aa24:	e7d3      	b.n	800a9ce <_dtoa_r+0x5be>
 800aa26:	bf00      	nop
 800aa28:	0800d458 	.word	0x0800d458
 800aa2c:	0800d430 	.word	0x0800d430
 800aa30:	9907      	ldr	r1, [sp, #28]
 800aa32:	2900      	cmp	r1, #0
 800aa34:	f000 80d0 	beq.w	800abd8 <_dtoa_r+0x7c8>
 800aa38:	9906      	ldr	r1, [sp, #24]
 800aa3a:	2901      	cmp	r1, #1
 800aa3c:	f300 80b4 	bgt.w	800aba8 <_dtoa_r+0x798>
 800aa40:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa42:	2900      	cmp	r1, #0
 800aa44:	f000 80ac 	beq.w	800aba0 <_dtoa_r+0x790>
 800aa48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aa4c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aa50:	461c      	mov	r4, r3
 800aa52:	930a      	str	r3, [sp, #40]	; 0x28
 800aa54:	9b04      	ldr	r3, [sp, #16]
 800aa56:	4413      	add	r3, r2
 800aa58:	9304      	str	r3, [sp, #16]
 800aa5a:	9b05      	ldr	r3, [sp, #20]
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	4413      	add	r3, r2
 800aa60:	4630      	mov	r0, r6
 800aa62:	9305      	str	r3, [sp, #20]
 800aa64:	f000 ff32 	bl	800b8cc <__i2b>
 800aa68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa6a:	4607      	mov	r7, r0
 800aa6c:	f1b8 0f00 	cmp.w	r8, #0
 800aa70:	dd0d      	ble.n	800aa8e <_dtoa_r+0x67e>
 800aa72:	9a05      	ldr	r2, [sp, #20]
 800aa74:	2a00      	cmp	r2, #0
 800aa76:	dd0a      	ble.n	800aa8e <_dtoa_r+0x67e>
 800aa78:	4542      	cmp	r2, r8
 800aa7a:	9904      	ldr	r1, [sp, #16]
 800aa7c:	bfa8      	it	ge
 800aa7e:	4642      	movge	r2, r8
 800aa80:	1a89      	subs	r1, r1, r2
 800aa82:	9104      	str	r1, [sp, #16]
 800aa84:	9905      	ldr	r1, [sp, #20]
 800aa86:	eba8 0802 	sub.w	r8, r8, r2
 800aa8a:	1a8a      	subs	r2, r1, r2
 800aa8c:	9205      	str	r2, [sp, #20]
 800aa8e:	b303      	cbz	r3, 800aad2 <_dtoa_r+0x6c2>
 800aa90:	9a07      	ldr	r2, [sp, #28]
 800aa92:	2a00      	cmp	r2, #0
 800aa94:	f000 80a5 	beq.w	800abe2 <_dtoa_r+0x7d2>
 800aa98:	2c00      	cmp	r4, #0
 800aa9a:	dd13      	ble.n	800aac4 <_dtoa_r+0x6b4>
 800aa9c:	4639      	mov	r1, r7
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	930d      	str	r3, [sp, #52]	; 0x34
 800aaa4:	f000 ffd2 	bl	800ba4c <__pow5mult>
 800aaa8:	462a      	mov	r2, r5
 800aaaa:	4601      	mov	r1, r0
 800aaac:	4607      	mov	r7, r0
 800aaae:	4630      	mov	r0, r6
 800aab0:	f000 ff22 	bl	800b8f8 <__multiply>
 800aab4:	4629      	mov	r1, r5
 800aab6:	900a      	str	r0, [sp, #40]	; 0x28
 800aab8:	4630      	mov	r0, r6
 800aaba:	f000 fe05 	bl	800b6c8 <_Bfree>
 800aabe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aac2:	4615      	mov	r5, r2
 800aac4:	1b1a      	subs	r2, r3, r4
 800aac6:	d004      	beq.n	800aad2 <_dtoa_r+0x6c2>
 800aac8:	4629      	mov	r1, r5
 800aaca:	4630      	mov	r0, r6
 800aacc:	f000 ffbe 	bl	800ba4c <__pow5mult>
 800aad0:	4605      	mov	r5, r0
 800aad2:	2101      	movs	r1, #1
 800aad4:	4630      	mov	r0, r6
 800aad6:	f000 fef9 	bl	800b8cc <__i2b>
 800aada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aadc:	2b00      	cmp	r3, #0
 800aade:	4604      	mov	r4, r0
 800aae0:	f340 8081 	ble.w	800abe6 <_dtoa_r+0x7d6>
 800aae4:	461a      	mov	r2, r3
 800aae6:	4601      	mov	r1, r0
 800aae8:	4630      	mov	r0, r6
 800aaea:	f000 ffaf 	bl	800ba4c <__pow5mult>
 800aaee:	9b06      	ldr	r3, [sp, #24]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	dd7a      	ble.n	800abec <_dtoa_r+0x7dc>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	930a      	str	r3, [sp, #40]	; 0x28
 800aafa:	6922      	ldr	r2, [r4, #16]
 800aafc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ab00:	6910      	ldr	r0, [r2, #16]
 800ab02:	f000 fe93 	bl	800b82c <__hi0bits>
 800ab06:	f1c0 0020 	rsb	r0, r0, #32
 800ab0a:	9b05      	ldr	r3, [sp, #20]
 800ab0c:	4418      	add	r0, r3
 800ab0e:	f010 001f 	ands.w	r0, r0, #31
 800ab12:	f000 808c 	beq.w	800ac2e <_dtoa_r+0x81e>
 800ab16:	f1c0 0220 	rsb	r2, r0, #32
 800ab1a:	2a04      	cmp	r2, #4
 800ab1c:	f340 8085 	ble.w	800ac2a <_dtoa_r+0x81a>
 800ab20:	f1c0 001c 	rsb	r0, r0, #28
 800ab24:	9b04      	ldr	r3, [sp, #16]
 800ab26:	4403      	add	r3, r0
 800ab28:	9304      	str	r3, [sp, #16]
 800ab2a:	9b05      	ldr	r3, [sp, #20]
 800ab2c:	4403      	add	r3, r0
 800ab2e:	4480      	add	r8, r0
 800ab30:	9305      	str	r3, [sp, #20]
 800ab32:	9b04      	ldr	r3, [sp, #16]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	dd05      	ble.n	800ab44 <_dtoa_r+0x734>
 800ab38:	4629      	mov	r1, r5
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	f000 ffdf 	bl	800bb00 <__lshift>
 800ab42:	4605      	mov	r5, r0
 800ab44:	9b05      	ldr	r3, [sp, #20]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	dd05      	ble.n	800ab56 <_dtoa_r+0x746>
 800ab4a:	4621      	mov	r1, r4
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	4630      	mov	r0, r6
 800ab50:	f000 ffd6 	bl	800bb00 <__lshift>
 800ab54:	4604      	mov	r4, r0
 800ab56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d06a      	beq.n	800ac32 <_dtoa_r+0x822>
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f001 f83e 	bl	800bbe0 <__mcmp>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	da64      	bge.n	800ac32 <_dtoa_r+0x822>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	220a      	movs	r2, #10
 800ab6e:	4630      	mov	r0, r6
 800ab70:	f000 fdcc 	bl	800b70c <__multadd>
 800ab74:	9b07      	ldr	r3, [sp, #28]
 800ab76:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f000 8191 	beq.w	800aea4 <_dtoa_r+0xa94>
 800ab82:	4639      	mov	r1, r7
 800ab84:	2300      	movs	r3, #0
 800ab86:	220a      	movs	r2, #10
 800ab88:	4630      	mov	r0, r6
 800ab8a:	f000 fdbf 	bl	800b70c <__multadd>
 800ab8e:	f1ba 0f00 	cmp.w	sl, #0
 800ab92:	4607      	mov	r7, r0
 800ab94:	f300 808d 	bgt.w	800acb2 <_dtoa_r+0x8a2>
 800ab98:	9b06      	ldr	r3, [sp, #24]
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	dc50      	bgt.n	800ac40 <_dtoa_r+0x830>
 800ab9e:	e088      	b.n	800acb2 <_dtoa_r+0x8a2>
 800aba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aba2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aba6:	e751      	b.n	800aa4c <_dtoa_r+0x63c>
 800aba8:	f109 34ff 	add.w	r4, r9, #4294967295
 800abac:	42a3      	cmp	r3, r4
 800abae:	bfbf      	itttt	lt
 800abb0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800abb2:	1ae3      	sublt	r3, r4, r3
 800abb4:	18d2      	addlt	r2, r2, r3
 800abb6:	9209      	strlt	r2, [sp, #36]	; 0x24
 800abb8:	bfb6      	itet	lt
 800abba:	4623      	movlt	r3, r4
 800abbc:	1b1c      	subge	r4, r3, r4
 800abbe:	2400      	movlt	r4, #0
 800abc0:	f1b9 0f00 	cmp.w	r9, #0
 800abc4:	bfb5      	itete	lt
 800abc6:	9a04      	ldrlt	r2, [sp, #16]
 800abc8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800abcc:	eba2 0809 	sublt.w	r8, r2, r9
 800abd0:	464a      	movge	r2, r9
 800abd2:	bfb8      	it	lt
 800abd4:	2200      	movlt	r2, #0
 800abd6:	e73c      	b.n	800aa52 <_dtoa_r+0x642>
 800abd8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800abdc:	9f07      	ldr	r7, [sp, #28]
 800abde:	461c      	mov	r4, r3
 800abe0:	e744      	b.n	800aa6c <_dtoa_r+0x65c>
 800abe2:	461a      	mov	r2, r3
 800abe4:	e770      	b.n	800aac8 <_dtoa_r+0x6b8>
 800abe6:	9b06      	ldr	r3, [sp, #24]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	dc18      	bgt.n	800ac1e <_dtoa_r+0x80e>
 800abec:	9b02      	ldr	r3, [sp, #8]
 800abee:	b9b3      	cbnz	r3, 800ac1e <_dtoa_r+0x80e>
 800abf0:	9b03      	ldr	r3, [sp, #12]
 800abf2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800abf6:	b9a2      	cbnz	r2, 800ac22 <_dtoa_r+0x812>
 800abf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800abfc:	0d12      	lsrs	r2, r2, #20
 800abfe:	0512      	lsls	r2, r2, #20
 800ac00:	b18a      	cbz	r2, 800ac26 <_dtoa_r+0x816>
 800ac02:	9b04      	ldr	r3, [sp, #16]
 800ac04:	3301      	adds	r3, #1
 800ac06:	9304      	str	r3, [sp, #16]
 800ac08:	9b05      	ldr	r3, [sp, #20]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	9305      	str	r3, [sp, #20]
 800ac0e:	2301      	movs	r3, #1
 800ac10:	930a      	str	r3, [sp, #40]	; 0x28
 800ac12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f47f af70 	bne.w	800aafa <_dtoa_r+0x6ea>
 800ac1a:	2001      	movs	r0, #1
 800ac1c:	e775      	b.n	800ab0a <_dtoa_r+0x6fa>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	e7f6      	b.n	800ac10 <_dtoa_r+0x800>
 800ac22:	9b02      	ldr	r3, [sp, #8]
 800ac24:	e7f4      	b.n	800ac10 <_dtoa_r+0x800>
 800ac26:	920a      	str	r2, [sp, #40]	; 0x28
 800ac28:	e7f3      	b.n	800ac12 <_dtoa_r+0x802>
 800ac2a:	d082      	beq.n	800ab32 <_dtoa_r+0x722>
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	301c      	adds	r0, #28
 800ac30:	e778      	b.n	800ab24 <_dtoa_r+0x714>
 800ac32:	f1b9 0f00 	cmp.w	r9, #0
 800ac36:	dc37      	bgt.n	800aca8 <_dtoa_r+0x898>
 800ac38:	9b06      	ldr	r3, [sp, #24]
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	dd34      	ble.n	800aca8 <_dtoa_r+0x898>
 800ac3e:	46ca      	mov	sl, r9
 800ac40:	f1ba 0f00 	cmp.w	sl, #0
 800ac44:	d10d      	bne.n	800ac62 <_dtoa_r+0x852>
 800ac46:	4621      	mov	r1, r4
 800ac48:	4653      	mov	r3, sl
 800ac4a:	2205      	movs	r2, #5
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	f000 fd5d 	bl	800b70c <__multadd>
 800ac52:	4601      	mov	r1, r0
 800ac54:	4604      	mov	r4, r0
 800ac56:	4628      	mov	r0, r5
 800ac58:	f000 ffc2 	bl	800bbe0 <__mcmp>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	f73f adeb 	bgt.w	800a838 <_dtoa_r+0x428>
 800ac62:	9b08      	ldr	r3, [sp, #32]
 800ac64:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac68:	ea6f 0b03 	mvn.w	fp, r3
 800ac6c:	f04f 0900 	mov.w	r9, #0
 800ac70:	4621      	mov	r1, r4
 800ac72:	4630      	mov	r0, r6
 800ac74:	f000 fd28 	bl	800b6c8 <_Bfree>
 800ac78:	2f00      	cmp	r7, #0
 800ac7a:	f43f aea8 	beq.w	800a9ce <_dtoa_r+0x5be>
 800ac7e:	f1b9 0f00 	cmp.w	r9, #0
 800ac82:	d005      	beq.n	800ac90 <_dtoa_r+0x880>
 800ac84:	45b9      	cmp	r9, r7
 800ac86:	d003      	beq.n	800ac90 <_dtoa_r+0x880>
 800ac88:	4649      	mov	r1, r9
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	f000 fd1c 	bl	800b6c8 <_Bfree>
 800ac90:	4639      	mov	r1, r7
 800ac92:	4630      	mov	r0, r6
 800ac94:	f000 fd18 	bl	800b6c8 <_Bfree>
 800ac98:	e699      	b.n	800a9ce <_dtoa_r+0x5be>
 800ac9a:	2400      	movs	r4, #0
 800ac9c:	4627      	mov	r7, r4
 800ac9e:	e7e0      	b.n	800ac62 <_dtoa_r+0x852>
 800aca0:	46bb      	mov	fp, r7
 800aca2:	4604      	mov	r4, r0
 800aca4:	4607      	mov	r7, r0
 800aca6:	e5c7      	b.n	800a838 <_dtoa_r+0x428>
 800aca8:	9b07      	ldr	r3, [sp, #28]
 800acaa:	46ca      	mov	sl, r9
 800acac:	2b00      	cmp	r3, #0
 800acae:	f000 8100 	beq.w	800aeb2 <_dtoa_r+0xaa2>
 800acb2:	f1b8 0f00 	cmp.w	r8, #0
 800acb6:	dd05      	ble.n	800acc4 <_dtoa_r+0x8b4>
 800acb8:	4639      	mov	r1, r7
 800acba:	4642      	mov	r2, r8
 800acbc:	4630      	mov	r0, r6
 800acbe:	f000 ff1f 	bl	800bb00 <__lshift>
 800acc2:	4607      	mov	r7, r0
 800acc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d05d      	beq.n	800ad86 <_dtoa_r+0x976>
 800acca:	6879      	ldr	r1, [r7, #4]
 800accc:	4630      	mov	r0, r6
 800acce:	f000 fcbb 	bl	800b648 <_Balloc>
 800acd2:	4680      	mov	r8, r0
 800acd4:	b928      	cbnz	r0, 800ace2 <_dtoa_r+0x8d2>
 800acd6:	4b82      	ldr	r3, [pc, #520]	; (800aee0 <_dtoa_r+0xad0>)
 800acd8:	4602      	mov	r2, r0
 800acda:	f240 21ea 	movw	r1, #746	; 0x2ea
 800acde:	f7ff bbaf 	b.w	800a440 <_dtoa_r+0x30>
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	3202      	adds	r2, #2
 800ace6:	0092      	lsls	r2, r2, #2
 800ace8:	f107 010c 	add.w	r1, r7, #12
 800acec:	300c      	adds	r0, #12
 800acee:	f000 fc9d 	bl	800b62c <memcpy>
 800acf2:	2201      	movs	r2, #1
 800acf4:	4641      	mov	r1, r8
 800acf6:	4630      	mov	r0, r6
 800acf8:	f000 ff02 	bl	800bb00 <__lshift>
 800acfc:	9b01      	ldr	r3, [sp, #4]
 800acfe:	3301      	adds	r3, #1
 800ad00:	9304      	str	r3, [sp, #16]
 800ad02:	9b01      	ldr	r3, [sp, #4]
 800ad04:	4453      	add	r3, sl
 800ad06:	9308      	str	r3, [sp, #32]
 800ad08:	9b02      	ldr	r3, [sp, #8]
 800ad0a:	f003 0301 	and.w	r3, r3, #1
 800ad0e:	46b9      	mov	r9, r7
 800ad10:	9307      	str	r3, [sp, #28]
 800ad12:	4607      	mov	r7, r0
 800ad14:	9b04      	ldr	r3, [sp, #16]
 800ad16:	4621      	mov	r1, r4
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	9302      	str	r3, [sp, #8]
 800ad1e:	f7ff fae9 	bl	800a2f4 <quorem>
 800ad22:	4603      	mov	r3, r0
 800ad24:	3330      	adds	r3, #48	; 0x30
 800ad26:	9005      	str	r0, [sp, #20]
 800ad28:	4649      	mov	r1, r9
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad2e:	f000 ff57 	bl	800bbe0 <__mcmp>
 800ad32:	463a      	mov	r2, r7
 800ad34:	4682      	mov	sl, r0
 800ad36:	4621      	mov	r1, r4
 800ad38:	4630      	mov	r0, r6
 800ad3a:	f000 ff6d 	bl	800bc18 <__mdiff>
 800ad3e:	68c2      	ldr	r2, [r0, #12]
 800ad40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad42:	4680      	mov	r8, r0
 800ad44:	bb0a      	cbnz	r2, 800ad8a <_dtoa_r+0x97a>
 800ad46:	4601      	mov	r1, r0
 800ad48:	4628      	mov	r0, r5
 800ad4a:	f000 ff49 	bl	800bbe0 <__mcmp>
 800ad4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad50:	4602      	mov	r2, r0
 800ad52:	4641      	mov	r1, r8
 800ad54:	4630      	mov	r0, r6
 800ad56:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ad5a:	f000 fcb5 	bl	800b6c8 <_Bfree>
 800ad5e:	9b06      	ldr	r3, [sp, #24]
 800ad60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad62:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ad66:	ea43 0102 	orr.w	r1, r3, r2
 800ad6a:	9b07      	ldr	r3, [sp, #28]
 800ad6c:	430b      	orrs	r3, r1
 800ad6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad70:	d10d      	bne.n	800ad8e <_dtoa_r+0x97e>
 800ad72:	2b39      	cmp	r3, #57	; 0x39
 800ad74:	d029      	beq.n	800adca <_dtoa_r+0x9ba>
 800ad76:	f1ba 0f00 	cmp.w	sl, #0
 800ad7a:	dd01      	ble.n	800ad80 <_dtoa_r+0x970>
 800ad7c:	9b05      	ldr	r3, [sp, #20]
 800ad7e:	3331      	adds	r3, #49	; 0x31
 800ad80:	9a02      	ldr	r2, [sp, #8]
 800ad82:	7013      	strb	r3, [r2, #0]
 800ad84:	e774      	b.n	800ac70 <_dtoa_r+0x860>
 800ad86:	4638      	mov	r0, r7
 800ad88:	e7b8      	b.n	800acfc <_dtoa_r+0x8ec>
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	e7e1      	b.n	800ad52 <_dtoa_r+0x942>
 800ad8e:	f1ba 0f00 	cmp.w	sl, #0
 800ad92:	db06      	blt.n	800ada2 <_dtoa_r+0x992>
 800ad94:	9906      	ldr	r1, [sp, #24]
 800ad96:	ea41 0a0a 	orr.w	sl, r1, sl
 800ad9a:	9907      	ldr	r1, [sp, #28]
 800ad9c:	ea5a 0101 	orrs.w	r1, sl, r1
 800ada0:	d120      	bne.n	800ade4 <_dtoa_r+0x9d4>
 800ada2:	2a00      	cmp	r2, #0
 800ada4:	ddec      	ble.n	800ad80 <_dtoa_r+0x970>
 800ada6:	4629      	mov	r1, r5
 800ada8:	2201      	movs	r2, #1
 800adaa:	4630      	mov	r0, r6
 800adac:	9304      	str	r3, [sp, #16]
 800adae:	f000 fea7 	bl	800bb00 <__lshift>
 800adb2:	4621      	mov	r1, r4
 800adb4:	4605      	mov	r5, r0
 800adb6:	f000 ff13 	bl	800bbe0 <__mcmp>
 800adba:	2800      	cmp	r0, #0
 800adbc:	9b04      	ldr	r3, [sp, #16]
 800adbe:	dc02      	bgt.n	800adc6 <_dtoa_r+0x9b6>
 800adc0:	d1de      	bne.n	800ad80 <_dtoa_r+0x970>
 800adc2:	07da      	lsls	r2, r3, #31
 800adc4:	d5dc      	bpl.n	800ad80 <_dtoa_r+0x970>
 800adc6:	2b39      	cmp	r3, #57	; 0x39
 800adc8:	d1d8      	bne.n	800ad7c <_dtoa_r+0x96c>
 800adca:	9a02      	ldr	r2, [sp, #8]
 800adcc:	2339      	movs	r3, #57	; 0x39
 800adce:	7013      	strb	r3, [r2, #0]
 800add0:	4643      	mov	r3, r8
 800add2:	4698      	mov	r8, r3
 800add4:	3b01      	subs	r3, #1
 800add6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800adda:	2a39      	cmp	r2, #57	; 0x39
 800addc:	d051      	beq.n	800ae82 <_dtoa_r+0xa72>
 800adde:	3201      	adds	r2, #1
 800ade0:	701a      	strb	r2, [r3, #0]
 800ade2:	e745      	b.n	800ac70 <_dtoa_r+0x860>
 800ade4:	2a00      	cmp	r2, #0
 800ade6:	dd03      	ble.n	800adf0 <_dtoa_r+0x9e0>
 800ade8:	2b39      	cmp	r3, #57	; 0x39
 800adea:	d0ee      	beq.n	800adca <_dtoa_r+0x9ba>
 800adec:	3301      	adds	r3, #1
 800adee:	e7c7      	b.n	800ad80 <_dtoa_r+0x970>
 800adf0:	9a04      	ldr	r2, [sp, #16]
 800adf2:	9908      	ldr	r1, [sp, #32]
 800adf4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800adf8:	428a      	cmp	r2, r1
 800adfa:	d02b      	beq.n	800ae54 <_dtoa_r+0xa44>
 800adfc:	4629      	mov	r1, r5
 800adfe:	2300      	movs	r3, #0
 800ae00:	220a      	movs	r2, #10
 800ae02:	4630      	mov	r0, r6
 800ae04:	f000 fc82 	bl	800b70c <__multadd>
 800ae08:	45b9      	cmp	r9, r7
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	f04f 0300 	mov.w	r3, #0
 800ae10:	f04f 020a 	mov.w	r2, #10
 800ae14:	4649      	mov	r1, r9
 800ae16:	4630      	mov	r0, r6
 800ae18:	d107      	bne.n	800ae2a <_dtoa_r+0xa1a>
 800ae1a:	f000 fc77 	bl	800b70c <__multadd>
 800ae1e:	4681      	mov	r9, r0
 800ae20:	4607      	mov	r7, r0
 800ae22:	9b04      	ldr	r3, [sp, #16]
 800ae24:	3301      	adds	r3, #1
 800ae26:	9304      	str	r3, [sp, #16]
 800ae28:	e774      	b.n	800ad14 <_dtoa_r+0x904>
 800ae2a:	f000 fc6f 	bl	800b70c <__multadd>
 800ae2e:	4639      	mov	r1, r7
 800ae30:	4681      	mov	r9, r0
 800ae32:	2300      	movs	r3, #0
 800ae34:	220a      	movs	r2, #10
 800ae36:	4630      	mov	r0, r6
 800ae38:	f000 fc68 	bl	800b70c <__multadd>
 800ae3c:	4607      	mov	r7, r0
 800ae3e:	e7f0      	b.n	800ae22 <_dtoa_r+0xa12>
 800ae40:	f1ba 0f00 	cmp.w	sl, #0
 800ae44:	9a01      	ldr	r2, [sp, #4]
 800ae46:	bfcc      	ite	gt
 800ae48:	46d0      	movgt	r8, sl
 800ae4a:	f04f 0801 	movle.w	r8, #1
 800ae4e:	4490      	add	r8, r2
 800ae50:	f04f 0900 	mov.w	r9, #0
 800ae54:	4629      	mov	r1, r5
 800ae56:	2201      	movs	r2, #1
 800ae58:	4630      	mov	r0, r6
 800ae5a:	9302      	str	r3, [sp, #8]
 800ae5c:	f000 fe50 	bl	800bb00 <__lshift>
 800ae60:	4621      	mov	r1, r4
 800ae62:	4605      	mov	r5, r0
 800ae64:	f000 febc 	bl	800bbe0 <__mcmp>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	dcb1      	bgt.n	800add0 <_dtoa_r+0x9c0>
 800ae6c:	d102      	bne.n	800ae74 <_dtoa_r+0xa64>
 800ae6e:	9b02      	ldr	r3, [sp, #8]
 800ae70:	07db      	lsls	r3, r3, #31
 800ae72:	d4ad      	bmi.n	800add0 <_dtoa_r+0x9c0>
 800ae74:	4643      	mov	r3, r8
 800ae76:	4698      	mov	r8, r3
 800ae78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae7c:	2a30      	cmp	r2, #48	; 0x30
 800ae7e:	d0fa      	beq.n	800ae76 <_dtoa_r+0xa66>
 800ae80:	e6f6      	b.n	800ac70 <_dtoa_r+0x860>
 800ae82:	9a01      	ldr	r2, [sp, #4]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d1a4      	bne.n	800add2 <_dtoa_r+0x9c2>
 800ae88:	f10b 0b01 	add.w	fp, fp, #1
 800ae8c:	2331      	movs	r3, #49	; 0x31
 800ae8e:	e778      	b.n	800ad82 <_dtoa_r+0x972>
 800ae90:	4b14      	ldr	r3, [pc, #80]	; (800aee4 <_dtoa_r+0xad4>)
 800ae92:	f7ff bb27 	b.w	800a4e4 <_dtoa_r+0xd4>
 800ae96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f47f ab03 	bne.w	800a4a4 <_dtoa_r+0x94>
 800ae9e:	4b12      	ldr	r3, [pc, #72]	; (800aee8 <_dtoa_r+0xad8>)
 800aea0:	f7ff bb20 	b.w	800a4e4 <_dtoa_r+0xd4>
 800aea4:	f1ba 0f00 	cmp.w	sl, #0
 800aea8:	dc03      	bgt.n	800aeb2 <_dtoa_r+0xaa2>
 800aeaa:	9b06      	ldr	r3, [sp, #24]
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	f73f aec7 	bgt.w	800ac40 <_dtoa_r+0x830>
 800aeb2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	4628      	mov	r0, r5
 800aeba:	f7ff fa1b 	bl	800a2f4 <quorem>
 800aebe:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aec2:	f808 3b01 	strb.w	r3, [r8], #1
 800aec6:	9a01      	ldr	r2, [sp, #4]
 800aec8:	eba8 0202 	sub.w	r2, r8, r2
 800aecc:	4592      	cmp	sl, r2
 800aece:	ddb7      	ble.n	800ae40 <_dtoa_r+0xa30>
 800aed0:	4629      	mov	r1, r5
 800aed2:	2300      	movs	r3, #0
 800aed4:	220a      	movs	r2, #10
 800aed6:	4630      	mov	r0, r6
 800aed8:	f000 fc18 	bl	800b70c <__multadd>
 800aedc:	4605      	mov	r5, r0
 800aede:	e7ea      	b.n	800aeb6 <_dtoa_r+0xaa6>
 800aee0:	0800d345 	.word	0x0800d345
 800aee4:	0800d0b4 	.word	0x0800d0b4
 800aee8:	0800d2dd 	.word	0x0800d2dd

0800aeec <fiprintf>:
 800aeec:	b40e      	push	{r1, r2, r3}
 800aeee:	b503      	push	{r0, r1, lr}
 800aef0:	4601      	mov	r1, r0
 800aef2:	ab03      	add	r3, sp, #12
 800aef4:	4805      	ldr	r0, [pc, #20]	; (800af0c <fiprintf+0x20>)
 800aef6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aefa:	6800      	ldr	r0, [r0, #0]
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	f001 fadd 	bl	800c4bc <_vfiprintf_r>
 800af02:	b002      	add	sp, #8
 800af04:	f85d eb04 	ldr.w	lr, [sp], #4
 800af08:	b003      	add	sp, #12
 800af0a:	4770      	bx	lr
 800af0c:	24000024 	.word	0x24000024

0800af10 <rshift>:
 800af10:	6903      	ldr	r3, [r0, #16]
 800af12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800af16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800af1e:	f100 0414 	add.w	r4, r0, #20
 800af22:	dd45      	ble.n	800afb0 <rshift+0xa0>
 800af24:	f011 011f 	ands.w	r1, r1, #31
 800af28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800af2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800af30:	d10c      	bne.n	800af4c <rshift+0x3c>
 800af32:	f100 0710 	add.w	r7, r0, #16
 800af36:	4629      	mov	r1, r5
 800af38:	42b1      	cmp	r1, r6
 800af3a:	d334      	bcc.n	800afa6 <rshift+0x96>
 800af3c:	1a9b      	subs	r3, r3, r2
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	1eea      	subs	r2, r5, #3
 800af42:	4296      	cmp	r6, r2
 800af44:	bf38      	it	cc
 800af46:	2300      	movcc	r3, #0
 800af48:	4423      	add	r3, r4
 800af4a:	e015      	b.n	800af78 <rshift+0x68>
 800af4c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800af50:	f1c1 0820 	rsb	r8, r1, #32
 800af54:	40cf      	lsrs	r7, r1
 800af56:	f105 0e04 	add.w	lr, r5, #4
 800af5a:	46a1      	mov	r9, r4
 800af5c:	4576      	cmp	r6, lr
 800af5e:	46f4      	mov	ip, lr
 800af60:	d815      	bhi.n	800af8e <rshift+0x7e>
 800af62:	1a9a      	subs	r2, r3, r2
 800af64:	0092      	lsls	r2, r2, #2
 800af66:	3a04      	subs	r2, #4
 800af68:	3501      	adds	r5, #1
 800af6a:	42ae      	cmp	r6, r5
 800af6c:	bf38      	it	cc
 800af6e:	2200      	movcc	r2, #0
 800af70:	18a3      	adds	r3, r4, r2
 800af72:	50a7      	str	r7, [r4, r2]
 800af74:	b107      	cbz	r7, 800af78 <rshift+0x68>
 800af76:	3304      	adds	r3, #4
 800af78:	1b1a      	subs	r2, r3, r4
 800af7a:	42a3      	cmp	r3, r4
 800af7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af80:	bf08      	it	eq
 800af82:	2300      	moveq	r3, #0
 800af84:	6102      	str	r2, [r0, #16]
 800af86:	bf08      	it	eq
 800af88:	6143      	streq	r3, [r0, #20]
 800af8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af8e:	f8dc c000 	ldr.w	ip, [ip]
 800af92:	fa0c fc08 	lsl.w	ip, ip, r8
 800af96:	ea4c 0707 	orr.w	r7, ip, r7
 800af9a:	f849 7b04 	str.w	r7, [r9], #4
 800af9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800afa2:	40cf      	lsrs	r7, r1
 800afa4:	e7da      	b.n	800af5c <rshift+0x4c>
 800afa6:	f851 cb04 	ldr.w	ip, [r1], #4
 800afaa:	f847 cf04 	str.w	ip, [r7, #4]!
 800afae:	e7c3      	b.n	800af38 <rshift+0x28>
 800afb0:	4623      	mov	r3, r4
 800afb2:	e7e1      	b.n	800af78 <rshift+0x68>

0800afb4 <__hexdig_fun>:
 800afb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800afb8:	2b09      	cmp	r3, #9
 800afba:	d802      	bhi.n	800afc2 <__hexdig_fun+0xe>
 800afbc:	3820      	subs	r0, #32
 800afbe:	b2c0      	uxtb	r0, r0
 800afc0:	4770      	bx	lr
 800afc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800afc6:	2b05      	cmp	r3, #5
 800afc8:	d801      	bhi.n	800afce <__hexdig_fun+0x1a>
 800afca:	3847      	subs	r0, #71	; 0x47
 800afcc:	e7f7      	b.n	800afbe <__hexdig_fun+0xa>
 800afce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800afd2:	2b05      	cmp	r3, #5
 800afd4:	d801      	bhi.n	800afda <__hexdig_fun+0x26>
 800afd6:	3827      	subs	r0, #39	; 0x27
 800afd8:	e7f1      	b.n	800afbe <__hexdig_fun+0xa>
 800afda:	2000      	movs	r0, #0
 800afdc:	4770      	bx	lr
	...

0800afe0 <__gethex>:
 800afe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe4:	ed2d 8b02 	vpush	{d8}
 800afe8:	b089      	sub	sp, #36	; 0x24
 800afea:	ee08 0a10 	vmov	s16, r0
 800afee:	9304      	str	r3, [sp, #16]
 800aff0:	4bb4      	ldr	r3, [pc, #720]	; (800b2c4 <__gethex+0x2e4>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	9301      	str	r3, [sp, #4]
 800aff6:	4618      	mov	r0, r3
 800aff8:	468b      	mov	fp, r1
 800affa:	4690      	mov	r8, r2
 800affc:	f7f5 f988 	bl	8000310 <strlen>
 800b000:	9b01      	ldr	r3, [sp, #4]
 800b002:	f8db 2000 	ldr.w	r2, [fp]
 800b006:	4403      	add	r3, r0
 800b008:	4682      	mov	sl, r0
 800b00a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b00e:	9305      	str	r3, [sp, #20]
 800b010:	1c93      	adds	r3, r2, #2
 800b012:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b016:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b01a:	32fe      	adds	r2, #254	; 0xfe
 800b01c:	18d1      	adds	r1, r2, r3
 800b01e:	461f      	mov	r7, r3
 800b020:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b024:	9100      	str	r1, [sp, #0]
 800b026:	2830      	cmp	r0, #48	; 0x30
 800b028:	d0f8      	beq.n	800b01c <__gethex+0x3c>
 800b02a:	f7ff ffc3 	bl	800afb4 <__hexdig_fun>
 800b02e:	4604      	mov	r4, r0
 800b030:	2800      	cmp	r0, #0
 800b032:	d13a      	bne.n	800b0aa <__gethex+0xca>
 800b034:	9901      	ldr	r1, [sp, #4]
 800b036:	4652      	mov	r2, sl
 800b038:	4638      	mov	r0, r7
 800b03a:	f001 fb89 	bl	800c750 <strncmp>
 800b03e:	4605      	mov	r5, r0
 800b040:	2800      	cmp	r0, #0
 800b042:	d168      	bne.n	800b116 <__gethex+0x136>
 800b044:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b048:	eb07 060a 	add.w	r6, r7, sl
 800b04c:	f7ff ffb2 	bl	800afb4 <__hexdig_fun>
 800b050:	2800      	cmp	r0, #0
 800b052:	d062      	beq.n	800b11a <__gethex+0x13a>
 800b054:	4633      	mov	r3, r6
 800b056:	7818      	ldrb	r0, [r3, #0]
 800b058:	2830      	cmp	r0, #48	; 0x30
 800b05a:	461f      	mov	r7, r3
 800b05c:	f103 0301 	add.w	r3, r3, #1
 800b060:	d0f9      	beq.n	800b056 <__gethex+0x76>
 800b062:	f7ff ffa7 	bl	800afb4 <__hexdig_fun>
 800b066:	2301      	movs	r3, #1
 800b068:	fab0 f480 	clz	r4, r0
 800b06c:	0964      	lsrs	r4, r4, #5
 800b06e:	4635      	mov	r5, r6
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	463a      	mov	r2, r7
 800b074:	4616      	mov	r6, r2
 800b076:	3201      	adds	r2, #1
 800b078:	7830      	ldrb	r0, [r6, #0]
 800b07a:	f7ff ff9b 	bl	800afb4 <__hexdig_fun>
 800b07e:	2800      	cmp	r0, #0
 800b080:	d1f8      	bne.n	800b074 <__gethex+0x94>
 800b082:	9901      	ldr	r1, [sp, #4]
 800b084:	4652      	mov	r2, sl
 800b086:	4630      	mov	r0, r6
 800b088:	f001 fb62 	bl	800c750 <strncmp>
 800b08c:	b980      	cbnz	r0, 800b0b0 <__gethex+0xd0>
 800b08e:	b94d      	cbnz	r5, 800b0a4 <__gethex+0xc4>
 800b090:	eb06 050a 	add.w	r5, r6, sl
 800b094:	462a      	mov	r2, r5
 800b096:	4616      	mov	r6, r2
 800b098:	3201      	adds	r2, #1
 800b09a:	7830      	ldrb	r0, [r6, #0]
 800b09c:	f7ff ff8a 	bl	800afb4 <__hexdig_fun>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d1f8      	bne.n	800b096 <__gethex+0xb6>
 800b0a4:	1bad      	subs	r5, r5, r6
 800b0a6:	00ad      	lsls	r5, r5, #2
 800b0a8:	e004      	b.n	800b0b4 <__gethex+0xd4>
 800b0aa:	2400      	movs	r4, #0
 800b0ac:	4625      	mov	r5, r4
 800b0ae:	e7e0      	b.n	800b072 <__gethex+0x92>
 800b0b0:	2d00      	cmp	r5, #0
 800b0b2:	d1f7      	bne.n	800b0a4 <__gethex+0xc4>
 800b0b4:	7833      	ldrb	r3, [r6, #0]
 800b0b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b0ba:	2b50      	cmp	r3, #80	; 0x50
 800b0bc:	d13b      	bne.n	800b136 <__gethex+0x156>
 800b0be:	7873      	ldrb	r3, [r6, #1]
 800b0c0:	2b2b      	cmp	r3, #43	; 0x2b
 800b0c2:	d02c      	beq.n	800b11e <__gethex+0x13e>
 800b0c4:	2b2d      	cmp	r3, #45	; 0x2d
 800b0c6:	d02e      	beq.n	800b126 <__gethex+0x146>
 800b0c8:	1c71      	adds	r1, r6, #1
 800b0ca:	f04f 0900 	mov.w	r9, #0
 800b0ce:	7808      	ldrb	r0, [r1, #0]
 800b0d0:	f7ff ff70 	bl	800afb4 <__hexdig_fun>
 800b0d4:	1e43      	subs	r3, r0, #1
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	2b18      	cmp	r3, #24
 800b0da:	d82c      	bhi.n	800b136 <__gethex+0x156>
 800b0dc:	f1a0 0210 	sub.w	r2, r0, #16
 800b0e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b0e4:	f7ff ff66 	bl	800afb4 <__hexdig_fun>
 800b0e8:	1e43      	subs	r3, r0, #1
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b18      	cmp	r3, #24
 800b0ee:	d91d      	bls.n	800b12c <__gethex+0x14c>
 800b0f0:	f1b9 0f00 	cmp.w	r9, #0
 800b0f4:	d000      	beq.n	800b0f8 <__gethex+0x118>
 800b0f6:	4252      	negs	r2, r2
 800b0f8:	4415      	add	r5, r2
 800b0fa:	f8cb 1000 	str.w	r1, [fp]
 800b0fe:	b1e4      	cbz	r4, 800b13a <__gethex+0x15a>
 800b100:	9b00      	ldr	r3, [sp, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	bf14      	ite	ne
 800b106:	2700      	movne	r7, #0
 800b108:	2706      	moveq	r7, #6
 800b10a:	4638      	mov	r0, r7
 800b10c:	b009      	add	sp, #36	; 0x24
 800b10e:	ecbd 8b02 	vpop	{d8}
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b116:	463e      	mov	r6, r7
 800b118:	4625      	mov	r5, r4
 800b11a:	2401      	movs	r4, #1
 800b11c:	e7ca      	b.n	800b0b4 <__gethex+0xd4>
 800b11e:	f04f 0900 	mov.w	r9, #0
 800b122:	1cb1      	adds	r1, r6, #2
 800b124:	e7d3      	b.n	800b0ce <__gethex+0xee>
 800b126:	f04f 0901 	mov.w	r9, #1
 800b12a:	e7fa      	b.n	800b122 <__gethex+0x142>
 800b12c:	230a      	movs	r3, #10
 800b12e:	fb03 0202 	mla	r2, r3, r2, r0
 800b132:	3a10      	subs	r2, #16
 800b134:	e7d4      	b.n	800b0e0 <__gethex+0x100>
 800b136:	4631      	mov	r1, r6
 800b138:	e7df      	b.n	800b0fa <__gethex+0x11a>
 800b13a:	1bf3      	subs	r3, r6, r7
 800b13c:	3b01      	subs	r3, #1
 800b13e:	4621      	mov	r1, r4
 800b140:	2b07      	cmp	r3, #7
 800b142:	dc0b      	bgt.n	800b15c <__gethex+0x17c>
 800b144:	ee18 0a10 	vmov	r0, s16
 800b148:	f000 fa7e 	bl	800b648 <_Balloc>
 800b14c:	4604      	mov	r4, r0
 800b14e:	b940      	cbnz	r0, 800b162 <__gethex+0x182>
 800b150:	4b5d      	ldr	r3, [pc, #372]	; (800b2c8 <__gethex+0x2e8>)
 800b152:	4602      	mov	r2, r0
 800b154:	21de      	movs	r1, #222	; 0xde
 800b156:	485d      	ldr	r0, [pc, #372]	; (800b2cc <__gethex+0x2ec>)
 800b158:	f7ff f8ae 	bl	800a2b8 <__assert_func>
 800b15c:	3101      	adds	r1, #1
 800b15e:	105b      	asrs	r3, r3, #1
 800b160:	e7ee      	b.n	800b140 <__gethex+0x160>
 800b162:	f100 0914 	add.w	r9, r0, #20
 800b166:	f04f 0b00 	mov.w	fp, #0
 800b16a:	f1ca 0301 	rsb	r3, sl, #1
 800b16e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b172:	f8cd b000 	str.w	fp, [sp]
 800b176:	9306      	str	r3, [sp, #24]
 800b178:	42b7      	cmp	r7, r6
 800b17a:	d340      	bcc.n	800b1fe <__gethex+0x21e>
 800b17c:	9802      	ldr	r0, [sp, #8]
 800b17e:	9b00      	ldr	r3, [sp, #0]
 800b180:	f840 3b04 	str.w	r3, [r0], #4
 800b184:	eba0 0009 	sub.w	r0, r0, r9
 800b188:	1080      	asrs	r0, r0, #2
 800b18a:	0146      	lsls	r6, r0, #5
 800b18c:	6120      	str	r0, [r4, #16]
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 fb4c 	bl	800b82c <__hi0bits>
 800b194:	1a30      	subs	r0, r6, r0
 800b196:	f8d8 6000 	ldr.w	r6, [r8]
 800b19a:	42b0      	cmp	r0, r6
 800b19c:	dd63      	ble.n	800b266 <__gethex+0x286>
 800b19e:	1b87      	subs	r7, r0, r6
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f000 feed 	bl	800bf82 <__any_on>
 800b1a8:	4682      	mov	sl, r0
 800b1aa:	b1a8      	cbz	r0, 800b1d8 <__gethex+0x1f8>
 800b1ac:	1e7b      	subs	r3, r7, #1
 800b1ae:	1159      	asrs	r1, r3, #5
 800b1b0:	f003 021f 	and.w	r2, r3, #31
 800b1b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b1b8:	f04f 0a01 	mov.w	sl, #1
 800b1bc:	fa0a f202 	lsl.w	r2, sl, r2
 800b1c0:	420a      	tst	r2, r1
 800b1c2:	d009      	beq.n	800b1d8 <__gethex+0x1f8>
 800b1c4:	4553      	cmp	r3, sl
 800b1c6:	dd05      	ble.n	800b1d4 <__gethex+0x1f4>
 800b1c8:	1eb9      	subs	r1, r7, #2
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f000 fed9 	bl	800bf82 <__any_on>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d145      	bne.n	800b260 <__gethex+0x280>
 800b1d4:	f04f 0a02 	mov.w	sl, #2
 800b1d8:	4639      	mov	r1, r7
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f7ff fe98 	bl	800af10 <rshift>
 800b1e0:	443d      	add	r5, r7
 800b1e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1e6:	42ab      	cmp	r3, r5
 800b1e8:	da4c      	bge.n	800b284 <__gethex+0x2a4>
 800b1ea:	ee18 0a10 	vmov	r0, s16
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	f000 fa6a 	bl	800b6c8 <_Bfree>
 800b1f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	6013      	str	r3, [r2, #0]
 800b1fa:	27a3      	movs	r7, #163	; 0xa3
 800b1fc:	e785      	b.n	800b10a <__gethex+0x12a>
 800b1fe:	1e73      	subs	r3, r6, #1
 800b200:	9a05      	ldr	r2, [sp, #20]
 800b202:	9303      	str	r3, [sp, #12]
 800b204:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b208:	4293      	cmp	r3, r2
 800b20a:	d019      	beq.n	800b240 <__gethex+0x260>
 800b20c:	f1bb 0f20 	cmp.w	fp, #32
 800b210:	d107      	bne.n	800b222 <__gethex+0x242>
 800b212:	9b02      	ldr	r3, [sp, #8]
 800b214:	9a00      	ldr	r2, [sp, #0]
 800b216:	f843 2b04 	str.w	r2, [r3], #4
 800b21a:	9302      	str	r3, [sp, #8]
 800b21c:	2300      	movs	r3, #0
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	469b      	mov	fp, r3
 800b222:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b226:	f7ff fec5 	bl	800afb4 <__hexdig_fun>
 800b22a:	9b00      	ldr	r3, [sp, #0]
 800b22c:	f000 000f 	and.w	r0, r0, #15
 800b230:	fa00 f00b 	lsl.w	r0, r0, fp
 800b234:	4303      	orrs	r3, r0
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	f10b 0b04 	add.w	fp, fp, #4
 800b23c:	9b03      	ldr	r3, [sp, #12]
 800b23e:	e00d      	b.n	800b25c <__gethex+0x27c>
 800b240:	9b03      	ldr	r3, [sp, #12]
 800b242:	9a06      	ldr	r2, [sp, #24]
 800b244:	4413      	add	r3, r2
 800b246:	42bb      	cmp	r3, r7
 800b248:	d3e0      	bcc.n	800b20c <__gethex+0x22c>
 800b24a:	4618      	mov	r0, r3
 800b24c:	9901      	ldr	r1, [sp, #4]
 800b24e:	9307      	str	r3, [sp, #28]
 800b250:	4652      	mov	r2, sl
 800b252:	f001 fa7d 	bl	800c750 <strncmp>
 800b256:	9b07      	ldr	r3, [sp, #28]
 800b258:	2800      	cmp	r0, #0
 800b25a:	d1d7      	bne.n	800b20c <__gethex+0x22c>
 800b25c:	461e      	mov	r6, r3
 800b25e:	e78b      	b.n	800b178 <__gethex+0x198>
 800b260:	f04f 0a03 	mov.w	sl, #3
 800b264:	e7b8      	b.n	800b1d8 <__gethex+0x1f8>
 800b266:	da0a      	bge.n	800b27e <__gethex+0x29e>
 800b268:	1a37      	subs	r7, r6, r0
 800b26a:	4621      	mov	r1, r4
 800b26c:	ee18 0a10 	vmov	r0, s16
 800b270:	463a      	mov	r2, r7
 800b272:	f000 fc45 	bl	800bb00 <__lshift>
 800b276:	1bed      	subs	r5, r5, r7
 800b278:	4604      	mov	r4, r0
 800b27a:	f100 0914 	add.w	r9, r0, #20
 800b27e:	f04f 0a00 	mov.w	sl, #0
 800b282:	e7ae      	b.n	800b1e2 <__gethex+0x202>
 800b284:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b288:	42a8      	cmp	r0, r5
 800b28a:	dd72      	ble.n	800b372 <__gethex+0x392>
 800b28c:	1b45      	subs	r5, r0, r5
 800b28e:	42ae      	cmp	r6, r5
 800b290:	dc36      	bgt.n	800b300 <__gethex+0x320>
 800b292:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b296:	2b02      	cmp	r3, #2
 800b298:	d02a      	beq.n	800b2f0 <__gethex+0x310>
 800b29a:	2b03      	cmp	r3, #3
 800b29c:	d02c      	beq.n	800b2f8 <__gethex+0x318>
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d11c      	bne.n	800b2dc <__gethex+0x2fc>
 800b2a2:	42ae      	cmp	r6, r5
 800b2a4:	d11a      	bne.n	800b2dc <__gethex+0x2fc>
 800b2a6:	2e01      	cmp	r6, #1
 800b2a8:	d112      	bne.n	800b2d0 <__gethex+0x2f0>
 800b2aa:	9a04      	ldr	r2, [sp, #16]
 800b2ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b2b0:	6013      	str	r3, [r2, #0]
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	6123      	str	r3, [r4, #16]
 800b2b6:	f8c9 3000 	str.w	r3, [r9]
 800b2ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2bc:	2762      	movs	r7, #98	; 0x62
 800b2be:	601c      	str	r4, [r3, #0]
 800b2c0:	e723      	b.n	800b10a <__gethex+0x12a>
 800b2c2:	bf00      	nop
 800b2c4:	0800d3bc 	.word	0x0800d3bc
 800b2c8:	0800d345 	.word	0x0800d345
 800b2cc:	0800d356 	.word	0x0800d356
 800b2d0:	1e71      	subs	r1, r6, #1
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f000 fe55 	bl	800bf82 <__any_on>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d1e6      	bne.n	800b2aa <__gethex+0x2ca>
 800b2dc:	ee18 0a10 	vmov	r0, s16
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	f000 f9f1 	bl	800b6c8 <_Bfree>
 800b2e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	6013      	str	r3, [r2, #0]
 800b2ec:	2750      	movs	r7, #80	; 0x50
 800b2ee:	e70c      	b.n	800b10a <__gethex+0x12a>
 800b2f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1f2      	bne.n	800b2dc <__gethex+0x2fc>
 800b2f6:	e7d8      	b.n	800b2aa <__gethex+0x2ca>
 800b2f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1d5      	bne.n	800b2aa <__gethex+0x2ca>
 800b2fe:	e7ed      	b.n	800b2dc <__gethex+0x2fc>
 800b300:	1e6f      	subs	r7, r5, #1
 800b302:	f1ba 0f00 	cmp.w	sl, #0
 800b306:	d131      	bne.n	800b36c <__gethex+0x38c>
 800b308:	b127      	cbz	r7, 800b314 <__gethex+0x334>
 800b30a:	4639      	mov	r1, r7
 800b30c:	4620      	mov	r0, r4
 800b30e:	f000 fe38 	bl	800bf82 <__any_on>
 800b312:	4682      	mov	sl, r0
 800b314:	117b      	asrs	r3, r7, #5
 800b316:	2101      	movs	r1, #1
 800b318:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b31c:	f007 071f 	and.w	r7, r7, #31
 800b320:	fa01 f707 	lsl.w	r7, r1, r7
 800b324:	421f      	tst	r7, r3
 800b326:	4629      	mov	r1, r5
 800b328:	4620      	mov	r0, r4
 800b32a:	bf18      	it	ne
 800b32c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b330:	1b76      	subs	r6, r6, r5
 800b332:	f7ff fded 	bl	800af10 <rshift>
 800b336:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b33a:	2702      	movs	r7, #2
 800b33c:	f1ba 0f00 	cmp.w	sl, #0
 800b340:	d048      	beq.n	800b3d4 <__gethex+0x3f4>
 800b342:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b346:	2b02      	cmp	r3, #2
 800b348:	d015      	beq.n	800b376 <__gethex+0x396>
 800b34a:	2b03      	cmp	r3, #3
 800b34c:	d017      	beq.n	800b37e <__gethex+0x39e>
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d109      	bne.n	800b366 <__gethex+0x386>
 800b352:	f01a 0f02 	tst.w	sl, #2
 800b356:	d006      	beq.n	800b366 <__gethex+0x386>
 800b358:	f8d9 0000 	ldr.w	r0, [r9]
 800b35c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b360:	f01a 0f01 	tst.w	sl, #1
 800b364:	d10e      	bne.n	800b384 <__gethex+0x3a4>
 800b366:	f047 0710 	orr.w	r7, r7, #16
 800b36a:	e033      	b.n	800b3d4 <__gethex+0x3f4>
 800b36c:	f04f 0a01 	mov.w	sl, #1
 800b370:	e7d0      	b.n	800b314 <__gethex+0x334>
 800b372:	2701      	movs	r7, #1
 800b374:	e7e2      	b.n	800b33c <__gethex+0x35c>
 800b376:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b378:	f1c3 0301 	rsb	r3, r3, #1
 800b37c:	9315      	str	r3, [sp, #84]	; 0x54
 800b37e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b380:	2b00      	cmp	r3, #0
 800b382:	d0f0      	beq.n	800b366 <__gethex+0x386>
 800b384:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b388:	f104 0314 	add.w	r3, r4, #20
 800b38c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b390:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b394:	f04f 0c00 	mov.w	ip, #0
 800b398:	4618      	mov	r0, r3
 800b39a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b39e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b3a2:	d01c      	beq.n	800b3de <__gethex+0x3fe>
 800b3a4:	3201      	adds	r2, #1
 800b3a6:	6002      	str	r2, [r0, #0]
 800b3a8:	2f02      	cmp	r7, #2
 800b3aa:	f104 0314 	add.w	r3, r4, #20
 800b3ae:	d13f      	bne.n	800b430 <__gethex+0x450>
 800b3b0:	f8d8 2000 	ldr.w	r2, [r8]
 800b3b4:	3a01      	subs	r2, #1
 800b3b6:	42b2      	cmp	r2, r6
 800b3b8:	d10a      	bne.n	800b3d0 <__gethex+0x3f0>
 800b3ba:	1171      	asrs	r1, r6, #5
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b3c2:	f006 061f 	and.w	r6, r6, #31
 800b3c6:	fa02 f606 	lsl.w	r6, r2, r6
 800b3ca:	421e      	tst	r6, r3
 800b3cc:	bf18      	it	ne
 800b3ce:	4617      	movne	r7, r2
 800b3d0:	f047 0720 	orr.w	r7, r7, #32
 800b3d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3d6:	601c      	str	r4, [r3, #0]
 800b3d8:	9b04      	ldr	r3, [sp, #16]
 800b3da:	601d      	str	r5, [r3, #0]
 800b3dc:	e695      	b.n	800b10a <__gethex+0x12a>
 800b3de:	4299      	cmp	r1, r3
 800b3e0:	f843 cc04 	str.w	ip, [r3, #-4]
 800b3e4:	d8d8      	bhi.n	800b398 <__gethex+0x3b8>
 800b3e6:	68a3      	ldr	r3, [r4, #8]
 800b3e8:	459b      	cmp	fp, r3
 800b3ea:	db19      	blt.n	800b420 <__gethex+0x440>
 800b3ec:	6861      	ldr	r1, [r4, #4]
 800b3ee:	ee18 0a10 	vmov	r0, s16
 800b3f2:	3101      	adds	r1, #1
 800b3f4:	f000 f928 	bl	800b648 <_Balloc>
 800b3f8:	4681      	mov	r9, r0
 800b3fa:	b918      	cbnz	r0, 800b404 <__gethex+0x424>
 800b3fc:	4b1a      	ldr	r3, [pc, #104]	; (800b468 <__gethex+0x488>)
 800b3fe:	4602      	mov	r2, r0
 800b400:	2184      	movs	r1, #132	; 0x84
 800b402:	e6a8      	b.n	800b156 <__gethex+0x176>
 800b404:	6922      	ldr	r2, [r4, #16]
 800b406:	3202      	adds	r2, #2
 800b408:	f104 010c 	add.w	r1, r4, #12
 800b40c:	0092      	lsls	r2, r2, #2
 800b40e:	300c      	adds	r0, #12
 800b410:	f000 f90c 	bl	800b62c <memcpy>
 800b414:	4621      	mov	r1, r4
 800b416:	ee18 0a10 	vmov	r0, s16
 800b41a:	f000 f955 	bl	800b6c8 <_Bfree>
 800b41e:	464c      	mov	r4, r9
 800b420:	6923      	ldr	r3, [r4, #16]
 800b422:	1c5a      	adds	r2, r3, #1
 800b424:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b428:	6122      	str	r2, [r4, #16]
 800b42a:	2201      	movs	r2, #1
 800b42c:	615a      	str	r2, [r3, #20]
 800b42e:	e7bb      	b.n	800b3a8 <__gethex+0x3c8>
 800b430:	6922      	ldr	r2, [r4, #16]
 800b432:	455a      	cmp	r2, fp
 800b434:	dd0b      	ble.n	800b44e <__gethex+0x46e>
 800b436:	2101      	movs	r1, #1
 800b438:	4620      	mov	r0, r4
 800b43a:	f7ff fd69 	bl	800af10 <rshift>
 800b43e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b442:	3501      	adds	r5, #1
 800b444:	42ab      	cmp	r3, r5
 800b446:	f6ff aed0 	blt.w	800b1ea <__gethex+0x20a>
 800b44a:	2701      	movs	r7, #1
 800b44c:	e7c0      	b.n	800b3d0 <__gethex+0x3f0>
 800b44e:	f016 061f 	ands.w	r6, r6, #31
 800b452:	d0fa      	beq.n	800b44a <__gethex+0x46a>
 800b454:	4453      	add	r3, sl
 800b456:	f1c6 0620 	rsb	r6, r6, #32
 800b45a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b45e:	f000 f9e5 	bl	800b82c <__hi0bits>
 800b462:	42b0      	cmp	r0, r6
 800b464:	dbe7      	blt.n	800b436 <__gethex+0x456>
 800b466:	e7f0      	b.n	800b44a <__gethex+0x46a>
 800b468:	0800d345 	.word	0x0800d345

0800b46c <L_shift>:
 800b46c:	f1c2 0208 	rsb	r2, r2, #8
 800b470:	0092      	lsls	r2, r2, #2
 800b472:	b570      	push	{r4, r5, r6, lr}
 800b474:	f1c2 0620 	rsb	r6, r2, #32
 800b478:	6843      	ldr	r3, [r0, #4]
 800b47a:	6804      	ldr	r4, [r0, #0]
 800b47c:	fa03 f506 	lsl.w	r5, r3, r6
 800b480:	432c      	orrs	r4, r5
 800b482:	40d3      	lsrs	r3, r2
 800b484:	6004      	str	r4, [r0, #0]
 800b486:	f840 3f04 	str.w	r3, [r0, #4]!
 800b48a:	4288      	cmp	r0, r1
 800b48c:	d3f4      	bcc.n	800b478 <L_shift+0xc>
 800b48e:	bd70      	pop	{r4, r5, r6, pc}

0800b490 <__match>:
 800b490:	b530      	push	{r4, r5, lr}
 800b492:	6803      	ldr	r3, [r0, #0]
 800b494:	3301      	adds	r3, #1
 800b496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b49a:	b914      	cbnz	r4, 800b4a2 <__match+0x12>
 800b49c:	6003      	str	r3, [r0, #0]
 800b49e:	2001      	movs	r0, #1
 800b4a0:	bd30      	pop	{r4, r5, pc}
 800b4a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b4aa:	2d19      	cmp	r5, #25
 800b4ac:	bf98      	it	ls
 800b4ae:	3220      	addls	r2, #32
 800b4b0:	42a2      	cmp	r2, r4
 800b4b2:	d0f0      	beq.n	800b496 <__match+0x6>
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	e7f3      	b.n	800b4a0 <__match+0x10>

0800b4b8 <__hexnan>:
 800b4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4bc:	680b      	ldr	r3, [r1, #0]
 800b4be:	115e      	asrs	r6, r3, #5
 800b4c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b4c4:	f013 031f 	ands.w	r3, r3, #31
 800b4c8:	b087      	sub	sp, #28
 800b4ca:	bf18      	it	ne
 800b4cc:	3604      	addne	r6, #4
 800b4ce:	2500      	movs	r5, #0
 800b4d0:	1f37      	subs	r7, r6, #4
 800b4d2:	4690      	mov	r8, r2
 800b4d4:	6802      	ldr	r2, [r0, #0]
 800b4d6:	9301      	str	r3, [sp, #4]
 800b4d8:	4682      	mov	sl, r0
 800b4da:	f846 5c04 	str.w	r5, [r6, #-4]
 800b4de:	46b9      	mov	r9, r7
 800b4e0:	463c      	mov	r4, r7
 800b4e2:	9502      	str	r5, [sp, #8]
 800b4e4:	46ab      	mov	fp, r5
 800b4e6:	7851      	ldrb	r1, [r2, #1]
 800b4e8:	1c53      	adds	r3, r2, #1
 800b4ea:	9303      	str	r3, [sp, #12]
 800b4ec:	b341      	cbz	r1, 800b540 <__hexnan+0x88>
 800b4ee:	4608      	mov	r0, r1
 800b4f0:	9205      	str	r2, [sp, #20]
 800b4f2:	9104      	str	r1, [sp, #16]
 800b4f4:	f7ff fd5e 	bl	800afb4 <__hexdig_fun>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d14f      	bne.n	800b59c <__hexnan+0xe4>
 800b4fc:	9904      	ldr	r1, [sp, #16]
 800b4fe:	9a05      	ldr	r2, [sp, #20]
 800b500:	2920      	cmp	r1, #32
 800b502:	d818      	bhi.n	800b536 <__hexnan+0x7e>
 800b504:	9b02      	ldr	r3, [sp, #8]
 800b506:	459b      	cmp	fp, r3
 800b508:	dd13      	ble.n	800b532 <__hexnan+0x7a>
 800b50a:	454c      	cmp	r4, r9
 800b50c:	d206      	bcs.n	800b51c <__hexnan+0x64>
 800b50e:	2d07      	cmp	r5, #7
 800b510:	dc04      	bgt.n	800b51c <__hexnan+0x64>
 800b512:	462a      	mov	r2, r5
 800b514:	4649      	mov	r1, r9
 800b516:	4620      	mov	r0, r4
 800b518:	f7ff ffa8 	bl	800b46c <L_shift>
 800b51c:	4544      	cmp	r4, r8
 800b51e:	d950      	bls.n	800b5c2 <__hexnan+0x10a>
 800b520:	2300      	movs	r3, #0
 800b522:	f1a4 0904 	sub.w	r9, r4, #4
 800b526:	f844 3c04 	str.w	r3, [r4, #-4]
 800b52a:	f8cd b008 	str.w	fp, [sp, #8]
 800b52e:	464c      	mov	r4, r9
 800b530:	461d      	mov	r5, r3
 800b532:	9a03      	ldr	r2, [sp, #12]
 800b534:	e7d7      	b.n	800b4e6 <__hexnan+0x2e>
 800b536:	2929      	cmp	r1, #41	; 0x29
 800b538:	d156      	bne.n	800b5e8 <__hexnan+0x130>
 800b53a:	3202      	adds	r2, #2
 800b53c:	f8ca 2000 	str.w	r2, [sl]
 800b540:	f1bb 0f00 	cmp.w	fp, #0
 800b544:	d050      	beq.n	800b5e8 <__hexnan+0x130>
 800b546:	454c      	cmp	r4, r9
 800b548:	d206      	bcs.n	800b558 <__hexnan+0xa0>
 800b54a:	2d07      	cmp	r5, #7
 800b54c:	dc04      	bgt.n	800b558 <__hexnan+0xa0>
 800b54e:	462a      	mov	r2, r5
 800b550:	4649      	mov	r1, r9
 800b552:	4620      	mov	r0, r4
 800b554:	f7ff ff8a 	bl	800b46c <L_shift>
 800b558:	4544      	cmp	r4, r8
 800b55a:	d934      	bls.n	800b5c6 <__hexnan+0x10e>
 800b55c:	f1a8 0204 	sub.w	r2, r8, #4
 800b560:	4623      	mov	r3, r4
 800b562:	f853 1b04 	ldr.w	r1, [r3], #4
 800b566:	f842 1f04 	str.w	r1, [r2, #4]!
 800b56a:	429f      	cmp	r7, r3
 800b56c:	d2f9      	bcs.n	800b562 <__hexnan+0xaa>
 800b56e:	1b3b      	subs	r3, r7, r4
 800b570:	f023 0303 	bic.w	r3, r3, #3
 800b574:	3304      	adds	r3, #4
 800b576:	3401      	adds	r4, #1
 800b578:	3e03      	subs	r6, #3
 800b57a:	42b4      	cmp	r4, r6
 800b57c:	bf88      	it	hi
 800b57e:	2304      	movhi	r3, #4
 800b580:	4443      	add	r3, r8
 800b582:	2200      	movs	r2, #0
 800b584:	f843 2b04 	str.w	r2, [r3], #4
 800b588:	429f      	cmp	r7, r3
 800b58a:	d2fb      	bcs.n	800b584 <__hexnan+0xcc>
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	b91b      	cbnz	r3, 800b598 <__hexnan+0xe0>
 800b590:	4547      	cmp	r7, r8
 800b592:	d127      	bne.n	800b5e4 <__hexnan+0x12c>
 800b594:	2301      	movs	r3, #1
 800b596:	603b      	str	r3, [r7, #0]
 800b598:	2005      	movs	r0, #5
 800b59a:	e026      	b.n	800b5ea <__hexnan+0x132>
 800b59c:	3501      	adds	r5, #1
 800b59e:	2d08      	cmp	r5, #8
 800b5a0:	f10b 0b01 	add.w	fp, fp, #1
 800b5a4:	dd06      	ble.n	800b5b4 <__hexnan+0xfc>
 800b5a6:	4544      	cmp	r4, r8
 800b5a8:	d9c3      	bls.n	800b532 <__hexnan+0x7a>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5b0:	2501      	movs	r5, #1
 800b5b2:	3c04      	subs	r4, #4
 800b5b4:	6822      	ldr	r2, [r4, #0]
 800b5b6:	f000 000f 	and.w	r0, r0, #15
 800b5ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b5be:	6022      	str	r2, [r4, #0]
 800b5c0:	e7b7      	b.n	800b532 <__hexnan+0x7a>
 800b5c2:	2508      	movs	r5, #8
 800b5c4:	e7b5      	b.n	800b532 <__hexnan+0x7a>
 800b5c6:	9b01      	ldr	r3, [sp, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d0df      	beq.n	800b58c <__hexnan+0xd4>
 800b5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d0:	f1c3 0320 	rsb	r3, r3, #32
 800b5d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b5d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b5dc:	401a      	ands	r2, r3
 800b5de:	f846 2c04 	str.w	r2, [r6, #-4]
 800b5e2:	e7d3      	b.n	800b58c <__hexnan+0xd4>
 800b5e4:	3f04      	subs	r7, #4
 800b5e6:	e7d1      	b.n	800b58c <__hexnan+0xd4>
 800b5e8:	2004      	movs	r0, #4
 800b5ea:	b007      	add	sp, #28
 800b5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b5f0 <_localeconv_r>:
 800b5f0:	4800      	ldr	r0, [pc, #0]	; (800b5f4 <_localeconv_r+0x4>)
 800b5f2:	4770      	bx	lr
 800b5f4:	2400017c 	.word	0x2400017c

0800b5f8 <malloc>:
 800b5f8:	4b02      	ldr	r3, [pc, #8]	; (800b604 <malloc+0xc>)
 800b5fa:	4601      	mov	r1, r0
 800b5fc:	6818      	ldr	r0, [r3, #0]
 800b5fe:	f000 bd63 	b.w	800c0c8 <_malloc_r>
 800b602:	bf00      	nop
 800b604:	24000024 	.word	0x24000024

0800b608 <__ascii_mbtowc>:
 800b608:	b082      	sub	sp, #8
 800b60a:	b901      	cbnz	r1, 800b60e <__ascii_mbtowc+0x6>
 800b60c:	a901      	add	r1, sp, #4
 800b60e:	b142      	cbz	r2, 800b622 <__ascii_mbtowc+0x1a>
 800b610:	b14b      	cbz	r3, 800b626 <__ascii_mbtowc+0x1e>
 800b612:	7813      	ldrb	r3, [r2, #0]
 800b614:	600b      	str	r3, [r1, #0]
 800b616:	7812      	ldrb	r2, [r2, #0]
 800b618:	1e10      	subs	r0, r2, #0
 800b61a:	bf18      	it	ne
 800b61c:	2001      	movne	r0, #1
 800b61e:	b002      	add	sp, #8
 800b620:	4770      	bx	lr
 800b622:	4610      	mov	r0, r2
 800b624:	e7fb      	b.n	800b61e <__ascii_mbtowc+0x16>
 800b626:	f06f 0001 	mvn.w	r0, #1
 800b62a:	e7f8      	b.n	800b61e <__ascii_mbtowc+0x16>

0800b62c <memcpy>:
 800b62c:	440a      	add	r2, r1
 800b62e:	4291      	cmp	r1, r2
 800b630:	f100 33ff 	add.w	r3, r0, #4294967295
 800b634:	d100      	bne.n	800b638 <memcpy+0xc>
 800b636:	4770      	bx	lr
 800b638:	b510      	push	{r4, lr}
 800b63a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b63e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b642:	4291      	cmp	r1, r2
 800b644:	d1f9      	bne.n	800b63a <memcpy+0xe>
 800b646:	bd10      	pop	{r4, pc}

0800b648 <_Balloc>:
 800b648:	b570      	push	{r4, r5, r6, lr}
 800b64a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b64c:	4604      	mov	r4, r0
 800b64e:	460d      	mov	r5, r1
 800b650:	b976      	cbnz	r6, 800b670 <_Balloc+0x28>
 800b652:	2010      	movs	r0, #16
 800b654:	f7ff ffd0 	bl	800b5f8 <malloc>
 800b658:	4602      	mov	r2, r0
 800b65a:	6260      	str	r0, [r4, #36]	; 0x24
 800b65c:	b920      	cbnz	r0, 800b668 <_Balloc+0x20>
 800b65e:	4b18      	ldr	r3, [pc, #96]	; (800b6c0 <_Balloc+0x78>)
 800b660:	4818      	ldr	r0, [pc, #96]	; (800b6c4 <_Balloc+0x7c>)
 800b662:	2166      	movs	r1, #102	; 0x66
 800b664:	f7fe fe28 	bl	800a2b8 <__assert_func>
 800b668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b66c:	6006      	str	r6, [r0, #0]
 800b66e:	60c6      	str	r6, [r0, #12]
 800b670:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b672:	68f3      	ldr	r3, [r6, #12]
 800b674:	b183      	cbz	r3, 800b698 <_Balloc+0x50>
 800b676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b67e:	b9b8      	cbnz	r0, 800b6b0 <_Balloc+0x68>
 800b680:	2101      	movs	r1, #1
 800b682:	fa01 f605 	lsl.w	r6, r1, r5
 800b686:	1d72      	adds	r2, r6, #5
 800b688:	0092      	lsls	r2, r2, #2
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 fc9a 	bl	800bfc4 <_calloc_r>
 800b690:	b160      	cbz	r0, 800b6ac <_Balloc+0x64>
 800b692:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b696:	e00e      	b.n	800b6b6 <_Balloc+0x6e>
 800b698:	2221      	movs	r2, #33	; 0x21
 800b69a:	2104      	movs	r1, #4
 800b69c:	4620      	mov	r0, r4
 800b69e:	f000 fc91 	bl	800bfc4 <_calloc_r>
 800b6a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6a4:	60f0      	str	r0, [r6, #12]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1e4      	bne.n	800b676 <_Balloc+0x2e>
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	bd70      	pop	{r4, r5, r6, pc}
 800b6b0:	6802      	ldr	r2, [r0, #0]
 800b6b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6bc:	e7f7      	b.n	800b6ae <_Balloc+0x66>
 800b6be:	bf00      	nop
 800b6c0:	0800d0dd 	.word	0x0800d0dd
 800b6c4:	0800d3d0 	.word	0x0800d3d0

0800b6c8 <_Bfree>:
 800b6c8:	b570      	push	{r4, r5, r6, lr}
 800b6ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6cc:	4605      	mov	r5, r0
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	b976      	cbnz	r6, 800b6f0 <_Bfree+0x28>
 800b6d2:	2010      	movs	r0, #16
 800b6d4:	f7ff ff90 	bl	800b5f8 <malloc>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	6268      	str	r0, [r5, #36]	; 0x24
 800b6dc:	b920      	cbnz	r0, 800b6e8 <_Bfree+0x20>
 800b6de:	4b09      	ldr	r3, [pc, #36]	; (800b704 <_Bfree+0x3c>)
 800b6e0:	4809      	ldr	r0, [pc, #36]	; (800b708 <_Bfree+0x40>)
 800b6e2:	218a      	movs	r1, #138	; 0x8a
 800b6e4:	f7fe fde8 	bl	800a2b8 <__assert_func>
 800b6e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6ec:	6006      	str	r6, [r0, #0]
 800b6ee:	60c6      	str	r6, [r0, #12]
 800b6f0:	b13c      	cbz	r4, 800b702 <_Bfree+0x3a>
 800b6f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b6f4:	6862      	ldr	r2, [r4, #4]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6fc:	6021      	str	r1, [r4, #0]
 800b6fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b702:	bd70      	pop	{r4, r5, r6, pc}
 800b704:	0800d0dd 	.word	0x0800d0dd
 800b708:	0800d3d0 	.word	0x0800d3d0

0800b70c <__multadd>:
 800b70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b710:	690d      	ldr	r5, [r1, #16]
 800b712:	4607      	mov	r7, r0
 800b714:	460c      	mov	r4, r1
 800b716:	461e      	mov	r6, r3
 800b718:	f101 0c14 	add.w	ip, r1, #20
 800b71c:	2000      	movs	r0, #0
 800b71e:	f8dc 3000 	ldr.w	r3, [ip]
 800b722:	b299      	uxth	r1, r3
 800b724:	fb02 6101 	mla	r1, r2, r1, r6
 800b728:	0c1e      	lsrs	r6, r3, #16
 800b72a:	0c0b      	lsrs	r3, r1, #16
 800b72c:	fb02 3306 	mla	r3, r2, r6, r3
 800b730:	b289      	uxth	r1, r1
 800b732:	3001      	adds	r0, #1
 800b734:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b738:	4285      	cmp	r5, r0
 800b73a:	f84c 1b04 	str.w	r1, [ip], #4
 800b73e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b742:	dcec      	bgt.n	800b71e <__multadd+0x12>
 800b744:	b30e      	cbz	r6, 800b78a <__multadd+0x7e>
 800b746:	68a3      	ldr	r3, [r4, #8]
 800b748:	42ab      	cmp	r3, r5
 800b74a:	dc19      	bgt.n	800b780 <__multadd+0x74>
 800b74c:	6861      	ldr	r1, [r4, #4]
 800b74e:	4638      	mov	r0, r7
 800b750:	3101      	adds	r1, #1
 800b752:	f7ff ff79 	bl	800b648 <_Balloc>
 800b756:	4680      	mov	r8, r0
 800b758:	b928      	cbnz	r0, 800b766 <__multadd+0x5a>
 800b75a:	4602      	mov	r2, r0
 800b75c:	4b0c      	ldr	r3, [pc, #48]	; (800b790 <__multadd+0x84>)
 800b75e:	480d      	ldr	r0, [pc, #52]	; (800b794 <__multadd+0x88>)
 800b760:	21b5      	movs	r1, #181	; 0xb5
 800b762:	f7fe fda9 	bl	800a2b8 <__assert_func>
 800b766:	6922      	ldr	r2, [r4, #16]
 800b768:	3202      	adds	r2, #2
 800b76a:	f104 010c 	add.w	r1, r4, #12
 800b76e:	0092      	lsls	r2, r2, #2
 800b770:	300c      	adds	r0, #12
 800b772:	f7ff ff5b 	bl	800b62c <memcpy>
 800b776:	4621      	mov	r1, r4
 800b778:	4638      	mov	r0, r7
 800b77a:	f7ff ffa5 	bl	800b6c8 <_Bfree>
 800b77e:	4644      	mov	r4, r8
 800b780:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b784:	3501      	adds	r5, #1
 800b786:	615e      	str	r6, [r3, #20]
 800b788:	6125      	str	r5, [r4, #16]
 800b78a:	4620      	mov	r0, r4
 800b78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b790:	0800d345 	.word	0x0800d345
 800b794:	0800d3d0 	.word	0x0800d3d0

0800b798 <__s2b>:
 800b798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b79c:	460c      	mov	r4, r1
 800b79e:	4615      	mov	r5, r2
 800b7a0:	461f      	mov	r7, r3
 800b7a2:	2209      	movs	r2, #9
 800b7a4:	3308      	adds	r3, #8
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	db09      	blt.n	800b7c8 <__s2b+0x30>
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	f7ff ff47 	bl	800b648 <_Balloc>
 800b7ba:	b940      	cbnz	r0, 800b7ce <__s2b+0x36>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	4b19      	ldr	r3, [pc, #100]	; (800b824 <__s2b+0x8c>)
 800b7c0:	4819      	ldr	r0, [pc, #100]	; (800b828 <__s2b+0x90>)
 800b7c2:	21ce      	movs	r1, #206	; 0xce
 800b7c4:	f7fe fd78 	bl	800a2b8 <__assert_func>
 800b7c8:	0052      	lsls	r2, r2, #1
 800b7ca:	3101      	adds	r1, #1
 800b7cc:	e7f0      	b.n	800b7b0 <__s2b+0x18>
 800b7ce:	9b08      	ldr	r3, [sp, #32]
 800b7d0:	6143      	str	r3, [r0, #20]
 800b7d2:	2d09      	cmp	r5, #9
 800b7d4:	f04f 0301 	mov.w	r3, #1
 800b7d8:	6103      	str	r3, [r0, #16]
 800b7da:	dd16      	ble.n	800b80a <__s2b+0x72>
 800b7dc:	f104 0909 	add.w	r9, r4, #9
 800b7e0:	46c8      	mov	r8, r9
 800b7e2:	442c      	add	r4, r5
 800b7e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b7e8:	4601      	mov	r1, r0
 800b7ea:	3b30      	subs	r3, #48	; 0x30
 800b7ec:	220a      	movs	r2, #10
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	f7ff ff8c 	bl	800b70c <__multadd>
 800b7f4:	45a0      	cmp	r8, r4
 800b7f6:	d1f5      	bne.n	800b7e4 <__s2b+0x4c>
 800b7f8:	f1a5 0408 	sub.w	r4, r5, #8
 800b7fc:	444c      	add	r4, r9
 800b7fe:	1b2d      	subs	r5, r5, r4
 800b800:	1963      	adds	r3, r4, r5
 800b802:	42bb      	cmp	r3, r7
 800b804:	db04      	blt.n	800b810 <__s2b+0x78>
 800b806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b80a:	340a      	adds	r4, #10
 800b80c:	2509      	movs	r5, #9
 800b80e:	e7f6      	b.n	800b7fe <__s2b+0x66>
 800b810:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b814:	4601      	mov	r1, r0
 800b816:	3b30      	subs	r3, #48	; 0x30
 800b818:	220a      	movs	r2, #10
 800b81a:	4630      	mov	r0, r6
 800b81c:	f7ff ff76 	bl	800b70c <__multadd>
 800b820:	e7ee      	b.n	800b800 <__s2b+0x68>
 800b822:	bf00      	nop
 800b824:	0800d345 	.word	0x0800d345
 800b828:	0800d3d0 	.word	0x0800d3d0

0800b82c <__hi0bits>:
 800b82c:	0c03      	lsrs	r3, r0, #16
 800b82e:	041b      	lsls	r3, r3, #16
 800b830:	b9d3      	cbnz	r3, 800b868 <__hi0bits+0x3c>
 800b832:	0400      	lsls	r0, r0, #16
 800b834:	2310      	movs	r3, #16
 800b836:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b83a:	bf04      	itt	eq
 800b83c:	0200      	lsleq	r0, r0, #8
 800b83e:	3308      	addeq	r3, #8
 800b840:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b844:	bf04      	itt	eq
 800b846:	0100      	lsleq	r0, r0, #4
 800b848:	3304      	addeq	r3, #4
 800b84a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b84e:	bf04      	itt	eq
 800b850:	0080      	lsleq	r0, r0, #2
 800b852:	3302      	addeq	r3, #2
 800b854:	2800      	cmp	r0, #0
 800b856:	db05      	blt.n	800b864 <__hi0bits+0x38>
 800b858:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b85c:	f103 0301 	add.w	r3, r3, #1
 800b860:	bf08      	it	eq
 800b862:	2320      	moveq	r3, #32
 800b864:	4618      	mov	r0, r3
 800b866:	4770      	bx	lr
 800b868:	2300      	movs	r3, #0
 800b86a:	e7e4      	b.n	800b836 <__hi0bits+0xa>

0800b86c <__lo0bits>:
 800b86c:	6803      	ldr	r3, [r0, #0]
 800b86e:	f013 0207 	ands.w	r2, r3, #7
 800b872:	4601      	mov	r1, r0
 800b874:	d00b      	beq.n	800b88e <__lo0bits+0x22>
 800b876:	07da      	lsls	r2, r3, #31
 800b878:	d423      	bmi.n	800b8c2 <__lo0bits+0x56>
 800b87a:	0798      	lsls	r0, r3, #30
 800b87c:	bf49      	itett	mi
 800b87e:	085b      	lsrmi	r3, r3, #1
 800b880:	089b      	lsrpl	r3, r3, #2
 800b882:	2001      	movmi	r0, #1
 800b884:	600b      	strmi	r3, [r1, #0]
 800b886:	bf5c      	itt	pl
 800b888:	600b      	strpl	r3, [r1, #0]
 800b88a:	2002      	movpl	r0, #2
 800b88c:	4770      	bx	lr
 800b88e:	b298      	uxth	r0, r3
 800b890:	b9a8      	cbnz	r0, 800b8be <__lo0bits+0x52>
 800b892:	0c1b      	lsrs	r3, r3, #16
 800b894:	2010      	movs	r0, #16
 800b896:	b2da      	uxtb	r2, r3
 800b898:	b90a      	cbnz	r2, 800b89e <__lo0bits+0x32>
 800b89a:	3008      	adds	r0, #8
 800b89c:	0a1b      	lsrs	r3, r3, #8
 800b89e:	071a      	lsls	r2, r3, #28
 800b8a0:	bf04      	itt	eq
 800b8a2:	091b      	lsreq	r3, r3, #4
 800b8a4:	3004      	addeq	r0, #4
 800b8a6:	079a      	lsls	r2, r3, #30
 800b8a8:	bf04      	itt	eq
 800b8aa:	089b      	lsreq	r3, r3, #2
 800b8ac:	3002      	addeq	r0, #2
 800b8ae:	07da      	lsls	r2, r3, #31
 800b8b0:	d403      	bmi.n	800b8ba <__lo0bits+0x4e>
 800b8b2:	085b      	lsrs	r3, r3, #1
 800b8b4:	f100 0001 	add.w	r0, r0, #1
 800b8b8:	d005      	beq.n	800b8c6 <__lo0bits+0x5a>
 800b8ba:	600b      	str	r3, [r1, #0]
 800b8bc:	4770      	bx	lr
 800b8be:	4610      	mov	r0, r2
 800b8c0:	e7e9      	b.n	800b896 <__lo0bits+0x2a>
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	4770      	bx	lr
 800b8c6:	2020      	movs	r0, #32
 800b8c8:	4770      	bx	lr
	...

0800b8cc <__i2b>:
 800b8cc:	b510      	push	{r4, lr}
 800b8ce:	460c      	mov	r4, r1
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	f7ff feb9 	bl	800b648 <_Balloc>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	b928      	cbnz	r0, 800b8e6 <__i2b+0x1a>
 800b8da:	4b05      	ldr	r3, [pc, #20]	; (800b8f0 <__i2b+0x24>)
 800b8dc:	4805      	ldr	r0, [pc, #20]	; (800b8f4 <__i2b+0x28>)
 800b8de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b8e2:	f7fe fce9 	bl	800a2b8 <__assert_func>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	6144      	str	r4, [r0, #20]
 800b8ea:	6103      	str	r3, [r0, #16]
 800b8ec:	bd10      	pop	{r4, pc}
 800b8ee:	bf00      	nop
 800b8f0:	0800d345 	.word	0x0800d345
 800b8f4:	0800d3d0 	.word	0x0800d3d0

0800b8f8 <__multiply>:
 800b8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8fc:	4691      	mov	r9, r2
 800b8fe:	690a      	ldr	r2, [r1, #16]
 800b900:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b904:	429a      	cmp	r2, r3
 800b906:	bfb8      	it	lt
 800b908:	460b      	movlt	r3, r1
 800b90a:	460c      	mov	r4, r1
 800b90c:	bfbc      	itt	lt
 800b90e:	464c      	movlt	r4, r9
 800b910:	4699      	movlt	r9, r3
 800b912:	6927      	ldr	r7, [r4, #16]
 800b914:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b918:	68a3      	ldr	r3, [r4, #8]
 800b91a:	6861      	ldr	r1, [r4, #4]
 800b91c:	eb07 060a 	add.w	r6, r7, sl
 800b920:	42b3      	cmp	r3, r6
 800b922:	b085      	sub	sp, #20
 800b924:	bfb8      	it	lt
 800b926:	3101      	addlt	r1, #1
 800b928:	f7ff fe8e 	bl	800b648 <_Balloc>
 800b92c:	b930      	cbnz	r0, 800b93c <__multiply+0x44>
 800b92e:	4602      	mov	r2, r0
 800b930:	4b44      	ldr	r3, [pc, #272]	; (800ba44 <__multiply+0x14c>)
 800b932:	4845      	ldr	r0, [pc, #276]	; (800ba48 <__multiply+0x150>)
 800b934:	f240 115d 	movw	r1, #349	; 0x15d
 800b938:	f7fe fcbe 	bl	800a2b8 <__assert_func>
 800b93c:	f100 0514 	add.w	r5, r0, #20
 800b940:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b944:	462b      	mov	r3, r5
 800b946:	2200      	movs	r2, #0
 800b948:	4543      	cmp	r3, r8
 800b94a:	d321      	bcc.n	800b990 <__multiply+0x98>
 800b94c:	f104 0314 	add.w	r3, r4, #20
 800b950:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b954:	f109 0314 	add.w	r3, r9, #20
 800b958:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b95c:	9202      	str	r2, [sp, #8]
 800b95e:	1b3a      	subs	r2, r7, r4
 800b960:	3a15      	subs	r2, #21
 800b962:	f022 0203 	bic.w	r2, r2, #3
 800b966:	3204      	adds	r2, #4
 800b968:	f104 0115 	add.w	r1, r4, #21
 800b96c:	428f      	cmp	r7, r1
 800b96e:	bf38      	it	cc
 800b970:	2204      	movcc	r2, #4
 800b972:	9201      	str	r2, [sp, #4]
 800b974:	9a02      	ldr	r2, [sp, #8]
 800b976:	9303      	str	r3, [sp, #12]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d80c      	bhi.n	800b996 <__multiply+0x9e>
 800b97c:	2e00      	cmp	r6, #0
 800b97e:	dd03      	ble.n	800b988 <__multiply+0x90>
 800b980:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b984:	2b00      	cmp	r3, #0
 800b986:	d05a      	beq.n	800ba3e <__multiply+0x146>
 800b988:	6106      	str	r6, [r0, #16]
 800b98a:	b005      	add	sp, #20
 800b98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b990:	f843 2b04 	str.w	r2, [r3], #4
 800b994:	e7d8      	b.n	800b948 <__multiply+0x50>
 800b996:	f8b3 a000 	ldrh.w	sl, [r3]
 800b99a:	f1ba 0f00 	cmp.w	sl, #0
 800b99e:	d024      	beq.n	800b9ea <__multiply+0xf2>
 800b9a0:	f104 0e14 	add.w	lr, r4, #20
 800b9a4:	46a9      	mov	r9, r5
 800b9a6:	f04f 0c00 	mov.w	ip, #0
 800b9aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b9ae:	f8d9 1000 	ldr.w	r1, [r9]
 800b9b2:	fa1f fb82 	uxth.w	fp, r2
 800b9b6:	b289      	uxth	r1, r1
 800b9b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b9bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b9c0:	f8d9 2000 	ldr.w	r2, [r9]
 800b9c4:	4461      	add	r1, ip
 800b9c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800b9ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b9d2:	b289      	uxth	r1, r1
 800b9d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9d8:	4577      	cmp	r7, lr
 800b9da:	f849 1b04 	str.w	r1, [r9], #4
 800b9de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9e2:	d8e2      	bhi.n	800b9aa <__multiply+0xb2>
 800b9e4:	9a01      	ldr	r2, [sp, #4]
 800b9e6:	f845 c002 	str.w	ip, [r5, r2]
 800b9ea:	9a03      	ldr	r2, [sp, #12]
 800b9ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	f1b9 0f00 	cmp.w	r9, #0
 800b9f6:	d020      	beq.n	800ba3a <__multiply+0x142>
 800b9f8:	6829      	ldr	r1, [r5, #0]
 800b9fa:	f104 0c14 	add.w	ip, r4, #20
 800b9fe:	46ae      	mov	lr, r5
 800ba00:	f04f 0a00 	mov.w	sl, #0
 800ba04:	f8bc b000 	ldrh.w	fp, [ip]
 800ba08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ba0c:	fb09 220b 	mla	r2, r9, fp, r2
 800ba10:	4492      	add	sl, r2
 800ba12:	b289      	uxth	r1, r1
 800ba14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ba18:	f84e 1b04 	str.w	r1, [lr], #4
 800ba1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba20:	f8be 1000 	ldrh.w	r1, [lr]
 800ba24:	0c12      	lsrs	r2, r2, #16
 800ba26:	fb09 1102 	mla	r1, r9, r2, r1
 800ba2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ba2e:	4567      	cmp	r7, ip
 800ba30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba34:	d8e6      	bhi.n	800ba04 <__multiply+0x10c>
 800ba36:	9a01      	ldr	r2, [sp, #4]
 800ba38:	50a9      	str	r1, [r5, r2]
 800ba3a:	3504      	adds	r5, #4
 800ba3c:	e79a      	b.n	800b974 <__multiply+0x7c>
 800ba3e:	3e01      	subs	r6, #1
 800ba40:	e79c      	b.n	800b97c <__multiply+0x84>
 800ba42:	bf00      	nop
 800ba44:	0800d345 	.word	0x0800d345
 800ba48:	0800d3d0 	.word	0x0800d3d0

0800ba4c <__pow5mult>:
 800ba4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba50:	4615      	mov	r5, r2
 800ba52:	f012 0203 	ands.w	r2, r2, #3
 800ba56:	4606      	mov	r6, r0
 800ba58:	460f      	mov	r7, r1
 800ba5a:	d007      	beq.n	800ba6c <__pow5mult+0x20>
 800ba5c:	4c25      	ldr	r4, [pc, #148]	; (800baf4 <__pow5mult+0xa8>)
 800ba5e:	3a01      	subs	r2, #1
 800ba60:	2300      	movs	r3, #0
 800ba62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba66:	f7ff fe51 	bl	800b70c <__multadd>
 800ba6a:	4607      	mov	r7, r0
 800ba6c:	10ad      	asrs	r5, r5, #2
 800ba6e:	d03d      	beq.n	800baec <__pow5mult+0xa0>
 800ba70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ba72:	b97c      	cbnz	r4, 800ba94 <__pow5mult+0x48>
 800ba74:	2010      	movs	r0, #16
 800ba76:	f7ff fdbf 	bl	800b5f8 <malloc>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	6270      	str	r0, [r6, #36]	; 0x24
 800ba7e:	b928      	cbnz	r0, 800ba8c <__pow5mult+0x40>
 800ba80:	4b1d      	ldr	r3, [pc, #116]	; (800baf8 <__pow5mult+0xac>)
 800ba82:	481e      	ldr	r0, [pc, #120]	; (800bafc <__pow5mult+0xb0>)
 800ba84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ba88:	f7fe fc16 	bl	800a2b8 <__assert_func>
 800ba8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba90:	6004      	str	r4, [r0, #0]
 800ba92:	60c4      	str	r4, [r0, #12]
 800ba94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba9c:	b94c      	cbnz	r4, 800bab2 <__pow5mult+0x66>
 800ba9e:	f240 2171 	movw	r1, #625	; 0x271
 800baa2:	4630      	mov	r0, r6
 800baa4:	f7ff ff12 	bl	800b8cc <__i2b>
 800baa8:	2300      	movs	r3, #0
 800baaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800baae:	4604      	mov	r4, r0
 800bab0:	6003      	str	r3, [r0, #0]
 800bab2:	f04f 0900 	mov.w	r9, #0
 800bab6:	07eb      	lsls	r3, r5, #31
 800bab8:	d50a      	bpl.n	800bad0 <__pow5mult+0x84>
 800baba:	4639      	mov	r1, r7
 800babc:	4622      	mov	r2, r4
 800babe:	4630      	mov	r0, r6
 800bac0:	f7ff ff1a 	bl	800b8f8 <__multiply>
 800bac4:	4639      	mov	r1, r7
 800bac6:	4680      	mov	r8, r0
 800bac8:	4630      	mov	r0, r6
 800baca:	f7ff fdfd 	bl	800b6c8 <_Bfree>
 800bace:	4647      	mov	r7, r8
 800bad0:	106d      	asrs	r5, r5, #1
 800bad2:	d00b      	beq.n	800baec <__pow5mult+0xa0>
 800bad4:	6820      	ldr	r0, [r4, #0]
 800bad6:	b938      	cbnz	r0, 800bae8 <__pow5mult+0x9c>
 800bad8:	4622      	mov	r2, r4
 800bada:	4621      	mov	r1, r4
 800badc:	4630      	mov	r0, r6
 800bade:	f7ff ff0b 	bl	800b8f8 <__multiply>
 800bae2:	6020      	str	r0, [r4, #0]
 800bae4:	f8c0 9000 	str.w	r9, [r0]
 800bae8:	4604      	mov	r4, r0
 800baea:	e7e4      	b.n	800bab6 <__pow5mult+0x6a>
 800baec:	4638      	mov	r0, r7
 800baee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baf2:	bf00      	nop
 800baf4:	0800d520 	.word	0x0800d520
 800baf8:	0800d0dd 	.word	0x0800d0dd
 800bafc:	0800d3d0 	.word	0x0800d3d0

0800bb00 <__lshift>:
 800bb00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb04:	460c      	mov	r4, r1
 800bb06:	6849      	ldr	r1, [r1, #4]
 800bb08:	6923      	ldr	r3, [r4, #16]
 800bb0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb0e:	68a3      	ldr	r3, [r4, #8]
 800bb10:	4607      	mov	r7, r0
 800bb12:	4691      	mov	r9, r2
 800bb14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb18:	f108 0601 	add.w	r6, r8, #1
 800bb1c:	42b3      	cmp	r3, r6
 800bb1e:	db0b      	blt.n	800bb38 <__lshift+0x38>
 800bb20:	4638      	mov	r0, r7
 800bb22:	f7ff fd91 	bl	800b648 <_Balloc>
 800bb26:	4605      	mov	r5, r0
 800bb28:	b948      	cbnz	r0, 800bb3e <__lshift+0x3e>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	4b2a      	ldr	r3, [pc, #168]	; (800bbd8 <__lshift+0xd8>)
 800bb2e:	482b      	ldr	r0, [pc, #172]	; (800bbdc <__lshift+0xdc>)
 800bb30:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bb34:	f7fe fbc0 	bl	800a2b8 <__assert_func>
 800bb38:	3101      	adds	r1, #1
 800bb3a:	005b      	lsls	r3, r3, #1
 800bb3c:	e7ee      	b.n	800bb1c <__lshift+0x1c>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	f100 0114 	add.w	r1, r0, #20
 800bb44:	f100 0210 	add.w	r2, r0, #16
 800bb48:	4618      	mov	r0, r3
 800bb4a:	4553      	cmp	r3, sl
 800bb4c:	db37      	blt.n	800bbbe <__lshift+0xbe>
 800bb4e:	6920      	ldr	r0, [r4, #16]
 800bb50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb54:	f104 0314 	add.w	r3, r4, #20
 800bb58:	f019 091f 	ands.w	r9, r9, #31
 800bb5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb64:	d02f      	beq.n	800bbc6 <__lshift+0xc6>
 800bb66:	f1c9 0e20 	rsb	lr, r9, #32
 800bb6a:	468a      	mov	sl, r1
 800bb6c:	f04f 0c00 	mov.w	ip, #0
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	fa02 f209 	lsl.w	r2, r2, r9
 800bb76:	ea42 020c 	orr.w	r2, r2, ip
 800bb7a:	f84a 2b04 	str.w	r2, [sl], #4
 800bb7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb82:	4298      	cmp	r0, r3
 800bb84:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bb88:	d8f2      	bhi.n	800bb70 <__lshift+0x70>
 800bb8a:	1b03      	subs	r3, r0, r4
 800bb8c:	3b15      	subs	r3, #21
 800bb8e:	f023 0303 	bic.w	r3, r3, #3
 800bb92:	3304      	adds	r3, #4
 800bb94:	f104 0215 	add.w	r2, r4, #21
 800bb98:	4290      	cmp	r0, r2
 800bb9a:	bf38      	it	cc
 800bb9c:	2304      	movcc	r3, #4
 800bb9e:	f841 c003 	str.w	ip, [r1, r3]
 800bba2:	f1bc 0f00 	cmp.w	ip, #0
 800bba6:	d001      	beq.n	800bbac <__lshift+0xac>
 800bba8:	f108 0602 	add.w	r6, r8, #2
 800bbac:	3e01      	subs	r6, #1
 800bbae:	4638      	mov	r0, r7
 800bbb0:	612e      	str	r6, [r5, #16]
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	f7ff fd88 	bl	800b6c8 <_Bfree>
 800bbb8:	4628      	mov	r0, r5
 800bbba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbbe:	f842 0f04 	str.w	r0, [r2, #4]!
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	e7c1      	b.n	800bb4a <__lshift+0x4a>
 800bbc6:	3904      	subs	r1, #4
 800bbc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbcc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bbd0:	4298      	cmp	r0, r3
 800bbd2:	d8f9      	bhi.n	800bbc8 <__lshift+0xc8>
 800bbd4:	e7ea      	b.n	800bbac <__lshift+0xac>
 800bbd6:	bf00      	nop
 800bbd8:	0800d345 	.word	0x0800d345
 800bbdc:	0800d3d0 	.word	0x0800d3d0

0800bbe0 <__mcmp>:
 800bbe0:	b530      	push	{r4, r5, lr}
 800bbe2:	6902      	ldr	r2, [r0, #16]
 800bbe4:	690c      	ldr	r4, [r1, #16]
 800bbe6:	1b12      	subs	r2, r2, r4
 800bbe8:	d10e      	bne.n	800bc08 <__mcmp+0x28>
 800bbea:	f100 0314 	add.w	r3, r0, #20
 800bbee:	3114      	adds	r1, #20
 800bbf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bbf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bbf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bbfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc00:	42a5      	cmp	r5, r4
 800bc02:	d003      	beq.n	800bc0c <__mcmp+0x2c>
 800bc04:	d305      	bcc.n	800bc12 <__mcmp+0x32>
 800bc06:	2201      	movs	r2, #1
 800bc08:	4610      	mov	r0, r2
 800bc0a:	bd30      	pop	{r4, r5, pc}
 800bc0c:	4283      	cmp	r3, r0
 800bc0e:	d3f3      	bcc.n	800bbf8 <__mcmp+0x18>
 800bc10:	e7fa      	b.n	800bc08 <__mcmp+0x28>
 800bc12:	f04f 32ff 	mov.w	r2, #4294967295
 800bc16:	e7f7      	b.n	800bc08 <__mcmp+0x28>

0800bc18 <__mdiff>:
 800bc18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1c:	460c      	mov	r4, r1
 800bc1e:	4606      	mov	r6, r0
 800bc20:	4611      	mov	r1, r2
 800bc22:	4620      	mov	r0, r4
 800bc24:	4690      	mov	r8, r2
 800bc26:	f7ff ffdb 	bl	800bbe0 <__mcmp>
 800bc2a:	1e05      	subs	r5, r0, #0
 800bc2c:	d110      	bne.n	800bc50 <__mdiff+0x38>
 800bc2e:	4629      	mov	r1, r5
 800bc30:	4630      	mov	r0, r6
 800bc32:	f7ff fd09 	bl	800b648 <_Balloc>
 800bc36:	b930      	cbnz	r0, 800bc46 <__mdiff+0x2e>
 800bc38:	4b3a      	ldr	r3, [pc, #232]	; (800bd24 <__mdiff+0x10c>)
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	f240 2132 	movw	r1, #562	; 0x232
 800bc40:	4839      	ldr	r0, [pc, #228]	; (800bd28 <__mdiff+0x110>)
 800bc42:	f7fe fb39 	bl	800a2b8 <__assert_func>
 800bc46:	2301      	movs	r3, #1
 800bc48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc50:	bfa4      	itt	ge
 800bc52:	4643      	movge	r3, r8
 800bc54:	46a0      	movge	r8, r4
 800bc56:	4630      	mov	r0, r6
 800bc58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc5c:	bfa6      	itte	ge
 800bc5e:	461c      	movge	r4, r3
 800bc60:	2500      	movge	r5, #0
 800bc62:	2501      	movlt	r5, #1
 800bc64:	f7ff fcf0 	bl	800b648 <_Balloc>
 800bc68:	b920      	cbnz	r0, 800bc74 <__mdiff+0x5c>
 800bc6a:	4b2e      	ldr	r3, [pc, #184]	; (800bd24 <__mdiff+0x10c>)
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bc72:	e7e5      	b.n	800bc40 <__mdiff+0x28>
 800bc74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc78:	6926      	ldr	r6, [r4, #16]
 800bc7a:	60c5      	str	r5, [r0, #12]
 800bc7c:	f104 0914 	add.w	r9, r4, #20
 800bc80:	f108 0514 	add.w	r5, r8, #20
 800bc84:	f100 0e14 	add.w	lr, r0, #20
 800bc88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc90:	f108 0210 	add.w	r2, r8, #16
 800bc94:	46f2      	mov	sl, lr
 800bc96:	2100      	movs	r1, #0
 800bc98:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bca0:	fa1f f883 	uxth.w	r8, r3
 800bca4:	fa11 f18b 	uxtah	r1, r1, fp
 800bca8:	0c1b      	lsrs	r3, r3, #16
 800bcaa:	eba1 0808 	sub.w	r8, r1, r8
 800bcae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bcb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bcb6:	fa1f f888 	uxth.w	r8, r8
 800bcba:	1419      	asrs	r1, r3, #16
 800bcbc:	454e      	cmp	r6, r9
 800bcbe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bcc2:	f84a 3b04 	str.w	r3, [sl], #4
 800bcc6:	d8e7      	bhi.n	800bc98 <__mdiff+0x80>
 800bcc8:	1b33      	subs	r3, r6, r4
 800bcca:	3b15      	subs	r3, #21
 800bccc:	f023 0303 	bic.w	r3, r3, #3
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	3415      	adds	r4, #21
 800bcd4:	42a6      	cmp	r6, r4
 800bcd6:	bf38      	it	cc
 800bcd8:	2304      	movcc	r3, #4
 800bcda:	441d      	add	r5, r3
 800bcdc:	4473      	add	r3, lr
 800bcde:	469e      	mov	lr, r3
 800bce0:	462e      	mov	r6, r5
 800bce2:	4566      	cmp	r6, ip
 800bce4:	d30e      	bcc.n	800bd04 <__mdiff+0xec>
 800bce6:	f10c 0203 	add.w	r2, ip, #3
 800bcea:	1b52      	subs	r2, r2, r5
 800bcec:	f022 0203 	bic.w	r2, r2, #3
 800bcf0:	3d03      	subs	r5, #3
 800bcf2:	45ac      	cmp	ip, r5
 800bcf4:	bf38      	it	cc
 800bcf6:	2200      	movcc	r2, #0
 800bcf8:	441a      	add	r2, r3
 800bcfa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bcfe:	b17b      	cbz	r3, 800bd20 <__mdiff+0x108>
 800bd00:	6107      	str	r7, [r0, #16]
 800bd02:	e7a3      	b.n	800bc4c <__mdiff+0x34>
 800bd04:	f856 8b04 	ldr.w	r8, [r6], #4
 800bd08:	fa11 f288 	uxtah	r2, r1, r8
 800bd0c:	1414      	asrs	r4, r2, #16
 800bd0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bd12:	b292      	uxth	r2, r2
 800bd14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bd18:	f84e 2b04 	str.w	r2, [lr], #4
 800bd1c:	1421      	asrs	r1, r4, #16
 800bd1e:	e7e0      	b.n	800bce2 <__mdiff+0xca>
 800bd20:	3f01      	subs	r7, #1
 800bd22:	e7ea      	b.n	800bcfa <__mdiff+0xe2>
 800bd24:	0800d345 	.word	0x0800d345
 800bd28:	0800d3d0 	.word	0x0800d3d0

0800bd2c <__ulp>:
 800bd2c:	b082      	sub	sp, #8
 800bd2e:	ed8d 0b00 	vstr	d0, [sp]
 800bd32:	9b01      	ldr	r3, [sp, #4]
 800bd34:	4912      	ldr	r1, [pc, #72]	; (800bd80 <__ulp+0x54>)
 800bd36:	4019      	ands	r1, r3
 800bd38:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bd3c:	2900      	cmp	r1, #0
 800bd3e:	dd05      	ble.n	800bd4c <__ulp+0x20>
 800bd40:	2200      	movs	r2, #0
 800bd42:	460b      	mov	r3, r1
 800bd44:	ec43 2b10 	vmov	d0, r2, r3
 800bd48:	b002      	add	sp, #8
 800bd4a:	4770      	bx	lr
 800bd4c:	4249      	negs	r1, r1
 800bd4e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bd52:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bd56:	f04f 0200 	mov.w	r2, #0
 800bd5a:	f04f 0300 	mov.w	r3, #0
 800bd5e:	da04      	bge.n	800bd6a <__ulp+0x3e>
 800bd60:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bd64:	fa41 f300 	asr.w	r3, r1, r0
 800bd68:	e7ec      	b.n	800bd44 <__ulp+0x18>
 800bd6a:	f1a0 0114 	sub.w	r1, r0, #20
 800bd6e:	291e      	cmp	r1, #30
 800bd70:	bfda      	itte	le
 800bd72:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bd76:	fa20 f101 	lsrle.w	r1, r0, r1
 800bd7a:	2101      	movgt	r1, #1
 800bd7c:	460a      	mov	r2, r1
 800bd7e:	e7e1      	b.n	800bd44 <__ulp+0x18>
 800bd80:	7ff00000 	.word	0x7ff00000

0800bd84 <__b2d>:
 800bd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd86:	6905      	ldr	r5, [r0, #16]
 800bd88:	f100 0714 	add.w	r7, r0, #20
 800bd8c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bd90:	1f2e      	subs	r6, r5, #4
 800bd92:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bd96:	4620      	mov	r0, r4
 800bd98:	f7ff fd48 	bl	800b82c <__hi0bits>
 800bd9c:	f1c0 0320 	rsb	r3, r0, #32
 800bda0:	280a      	cmp	r0, #10
 800bda2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800be20 <__b2d+0x9c>
 800bda6:	600b      	str	r3, [r1, #0]
 800bda8:	dc14      	bgt.n	800bdd4 <__b2d+0x50>
 800bdaa:	f1c0 0e0b 	rsb	lr, r0, #11
 800bdae:	fa24 f10e 	lsr.w	r1, r4, lr
 800bdb2:	42b7      	cmp	r7, r6
 800bdb4:	ea41 030c 	orr.w	r3, r1, ip
 800bdb8:	bf34      	ite	cc
 800bdba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bdbe:	2100      	movcs	r1, #0
 800bdc0:	3015      	adds	r0, #21
 800bdc2:	fa04 f000 	lsl.w	r0, r4, r0
 800bdc6:	fa21 f10e 	lsr.w	r1, r1, lr
 800bdca:	ea40 0201 	orr.w	r2, r0, r1
 800bdce:	ec43 2b10 	vmov	d0, r2, r3
 800bdd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdd4:	42b7      	cmp	r7, r6
 800bdd6:	bf3a      	itte	cc
 800bdd8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bddc:	f1a5 0608 	subcc.w	r6, r5, #8
 800bde0:	2100      	movcs	r1, #0
 800bde2:	380b      	subs	r0, #11
 800bde4:	d017      	beq.n	800be16 <__b2d+0x92>
 800bde6:	f1c0 0c20 	rsb	ip, r0, #32
 800bdea:	fa04 f500 	lsl.w	r5, r4, r0
 800bdee:	42be      	cmp	r6, r7
 800bdf0:	fa21 f40c 	lsr.w	r4, r1, ip
 800bdf4:	ea45 0504 	orr.w	r5, r5, r4
 800bdf8:	bf8c      	ite	hi
 800bdfa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bdfe:	2400      	movls	r4, #0
 800be00:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800be04:	fa01 f000 	lsl.w	r0, r1, r0
 800be08:	fa24 f40c 	lsr.w	r4, r4, ip
 800be0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800be10:	ea40 0204 	orr.w	r2, r0, r4
 800be14:	e7db      	b.n	800bdce <__b2d+0x4a>
 800be16:	ea44 030c 	orr.w	r3, r4, ip
 800be1a:	460a      	mov	r2, r1
 800be1c:	e7d7      	b.n	800bdce <__b2d+0x4a>
 800be1e:	bf00      	nop
 800be20:	3ff00000 	.word	0x3ff00000

0800be24 <__d2b>:
 800be24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be28:	4689      	mov	r9, r1
 800be2a:	2101      	movs	r1, #1
 800be2c:	ec57 6b10 	vmov	r6, r7, d0
 800be30:	4690      	mov	r8, r2
 800be32:	f7ff fc09 	bl	800b648 <_Balloc>
 800be36:	4604      	mov	r4, r0
 800be38:	b930      	cbnz	r0, 800be48 <__d2b+0x24>
 800be3a:	4602      	mov	r2, r0
 800be3c:	4b25      	ldr	r3, [pc, #148]	; (800bed4 <__d2b+0xb0>)
 800be3e:	4826      	ldr	r0, [pc, #152]	; (800bed8 <__d2b+0xb4>)
 800be40:	f240 310a 	movw	r1, #778	; 0x30a
 800be44:	f7fe fa38 	bl	800a2b8 <__assert_func>
 800be48:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800be4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be50:	bb35      	cbnz	r5, 800bea0 <__d2b+0x7c>
 800be52:	2e00      	cmp	r6, #0
 800be54:	9301      	str	r3, [sp, #4]
 800be56:	d028      	beq.n	800beaa <__d2b+0x86>
 800be58:	4668      	mov	r0, sp
 800be5a:	9600      	str	r6, [sp, #0]
 800be5c:	f7ff fd06 	bl	800b86c <__lo0bits>
 800be60:	9900      	ldr	r1, [sp, #0]
 800be62:	b300      	cbz	r0, 800bea6 <__d2b+0x82>
 800be64:	9a01      	ldr	r2, [sp, #4]
 800be66:	f1c0 0320 	rsb	r3, r0, #32
 800be6a:	fa02 f303 	lsl.w	r3, r2, r3
 800be6e:	430b      	orrs	r3, r1
 800be70:	40c2      	lsrs	r2, r0
 800be72:	6163      	str	r3, [r4, #20]
 800be74:	9201      	str	r2, [sp, #4]
 800be76:	9b01      	ldr	r3, [sp, #4]
 800be78:	61a3      	str	r3, [r4, #24]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	bf14      	ite	ne
 800be7e:	2202      	movne	r2, #2
 800be80:	2201      	moveq	r2, #1
 800be82:	6122      	str	r2, [r4, #16]
 800be84:	b1d5      	cbz	r5, 800bebc <__d2b+0x98>
 800be86:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be8a:	4405      	add	r5, r0
 800be8c:	f8c9 5000 	str.w	r5, [r9]
 800be90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be94:	f8c8 0000 	str.w	r0, [r8]
 800be98:	4620      	mov	r0, r4
 800be9a:	b003      	add	sp, #12
 800be9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bea0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bea4:	e7d5      	b.n	800be52 <__d2b+0x2e>
 800bea6:	6161      	str	r1, [r4, #20]
 800bea8:	e7e5      	b.n	800be76 <__d2b+0x52>
 800beaa:	a801      	add	r0, sp, #4
 800beac:	f7ff fcde 	bl	800b86c <__lo0bits>
 800beb0:	9b01      	ldr	r3, [sp, #4]
 800beb2:	6163      	str	r3, [r4, #20]
 800beb4:	2201      	movs	r2, #1
 800beb6:	6122      	str	r2, [r4, #16]
 800beb8:	3020      	adds	r0, #32
 800beba:	e7e3      	b.n	800be84 <__d2b+0x60>
 800bebc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bec0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bec4:	f8c9 0000 	str.w	r0, [r9]
 800bec8:	6918      	ldr	r0, [r3, #16]
 800beca:	f7ff fcaf 	bl	800b82c <__hi0bits>
 800bece:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bed2:	e7df      	b.n	800be94 <__d2b+0x70>
 800bed4:	0800d345 	.word	0x0800d345
 800bed8:	0800d3d0 	.word	0x0800d3d0

0800bedc <__ratio>:
 800bedc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee0:	4688      	mov	r8, r1
 800bee2:	4669      	mov	r1, sp
 800bee4:	4681      	mov	r9, r0
 800bee6:	f7ff ff4d 	bl	800bd84 <__b2d>
 800beea:	a901      	add	r1, sp, #4
 800beec:	4640      	mov	r0, r8
 800beee:	ec55 4b10 	vmov	r4, r5, d0
 800bef2:	ee10 aa10 	vmov	sl, s0
 800bef6:	f7ff ff45 	bl	800bd84 <__b2d>
 800befa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800befe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bf02:	1a59      	subs	r1, r3, r1
 800bf04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bf0e:	ec57 6b10 	vmov	r6, r7, d0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	bfd6      	itet	le
 800bf16:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf1a:	462a      	movgt	r2, r5
 800bf1c:	463a      	movle	r2, r7
 800bf1e:	46ab      	mov	fp, r5
 800bf20:	bfd6      	itet	le
 800bf22:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bf26:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bf2a:	ee00 3a90 	vmovle	s1, r3
 800bf2e:	ec4b ab17 	vmov	d7, sl, fp
 800bf32:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bf36:	b003      	add	sp, #12
 800bf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf3c <__copybits>:
 800bf3c:	3901      	subs	r1, #1
 800bf3e:	b570      	push	{r4, r5, r6, lr}
 800bf40:	1149      	asrs	r1, r1, #5
 800bf42:	6914      	ldr	r4, [r2, #16]
 800bf44:	3101      	adds	r1, #1
 800bf46:	f102 0314 	add.w	r3, r2, #20
 800bf4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf52:	1f05      	subs	r5, r0, #4
 800bf54:	42a3      	cmp	r3, r4
 800bf56:	d30c      	bcc.n	800bf72 <__copybits+0x36>
 800bf58:	1aa3      	subs	r3, r4, r2
 800bf5a:	3b11      	subs	r3, #17
 800bf5c:	f023 0303 	bic.w	r3, r3, #3
 800bf60:	3211      	adds	r2, #17
 800bf62:	42a2      	cmp	r2, r4
 800bf64:	bf88      	it	hi
 800bf66:	2300      	movhi	r3, #0
 800bf68:	4418      	add	r0, r3
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	4288      	cmp	r0, r1
 800bf6e:	d305      	bcc.n	800bf7c <__copybits+0x40>
 800bf70:	bd70      	pop	{r4, r5, r6, pc}
 800bf72:	f853 6b04 	ldr.w	r6, [r3], #4
 800bf76:	f845 6f04 	str.w	r6, [r5, #4]!
 800bf7a:	e7eb      	b.n	800bf54 <__copybits+0x18>
 800bf7c:	f840 3b04 	str.w	r3, [r0], #4
 800bf80:	e7f4      	b.n	800bf6c <__copybits+0x30>

0800bf82 <__any_on>:
 800bf82:	f100 0214 	add.w	r2, r0, #20
 800bf86:	6900      	ldr	r0, [r0, #16]
 800bf88:	114b      	asrs	r3, r1, #5
 800bf8a:	4298      	cmp	r0, r3
 800bf8c:	b510      	push	{r4, lr}
 800bf8e:	db11      	blt.n	800bfb4 <__any_on+0x32>
 800bf90:	dd0a      	ble.n	800bfa8 <__any_on+0x26>
 800bf92:	f011 011f 	ands.w	r1, r1, #31
 800bf96:	d007      	beq.n	800bfa8 <__any_on+0x26>
 800bf98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bf9c:	fa24 f001 	lsr.w	r0, r4, r1
 800bfa0:	fa00 f101 	lsl.w	r1, r0, r1
 800bfa4:	428c      	cmp	r4, r1
 800bfa6:	d10b      	bne.n	800bfc0 <__any_on+0x3e>
 800bfa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d803      	bhi.n	800bfb8 <__any_on+0x36>
 800bfb0:	2000      	movs	r0, #0
 800bfb2:	bd10      	pop	{r4, pc}
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	e7f7      	b.n	800bfa8 <__any_on+0x26>
 800bfb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bfbc:	2900      	cmp	r1, #0
 800bfbe:	d0f5      	beq.n	800bfac <__any_on+0x2a>
 800bfc0:	2001      	movs	r0, #1
 800bfc2:	e7f6      	b.n	800bfb2 <__any_on+0x30>

0800bfc4 <_calloc_r>:
 800bfc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfc6:	fba1 2402 	umull	r2, r4, r1, r2
 800bfca:	b94c      	cbnz	r4, 800bfe0 <_calloc_r+0x1c>
 800bfcc:	4611      	mov	r1, r2
 800bfce:	9201      	str	r2, [sp, #4]
 800bfd0:	f000 f87a 	bl	800c0c8 <_malloc_r>
 800bfd4:	9a01      	ldr	r2, [sp, #4]
 800bfd6:	4605      	mov	r5, r0
 800bfd8:	b930      	cbnz	r0, 800bfe8 <_calloc_r+0x24>
 800bfda:	4628      	mov	r0, r5
 800bfdc:	b003      	add	sp, #12
 800bfde:	bd30      	pop	{r4, r5, pc}
 800bfe0:	220c      	movs	r2, #12
 800bfe2:	6002      	str	r2, [r0, #0]
 800bfe4:	2500      	movs	r5, #0
 800bfe6:	e7f8      	b.n	800bfda <_calloc_r+0x16>
 800bfe8:	4621      	mov	r1, r4
 800bfea:	f7fc fc4d 	bl	8008888 <memset>
 800bfee:	e7f4      	b.n	800bfda <_calloc_r+0x16>

0800bff0 <_free_r>:
 800bff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bff2:	2900      	cmp	r1, #0
 800bff4:	d044      	beq.n	800c080 <_free_r+0x90>
 800bff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bffa:	9001      	str	r0, [sp, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f1a1 0404 	sub.w	r4, r1, #4
 800c002:	bfb8      	it	lt
 800c004:	18e4      	addlt	r4, r4, r3
 800c006:	f000 fec7 	bl	800cd98 <__malloc_lock>
 800c00a:	4a1e      	ldr	r2, [pc, #120]	; (800c084 <_free_r+0x94>)
 800c00c:	9801      	ldr	r0, [sp, #4]
 800c00e:	6813      	ldr	r3, [r2, #0]
 800c010:	b933      	cbnz	r3, 800c020 <_free_r+0x30>
 800c012:	6063      	str	r3, [r4, #4]
 800c014:	6014      	str	r4, [r2, #0]
 800c016:	b003      	add	sp, #12
 800c018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c01c:	f000 bec2 	b.w	800cda4 <__malloc_unlock>
 800c020:	42a3      	cmp	r3, r4
 800c022:	d908      	bls.n	800c036 <_free_r+0x46>
 800c024:	6825      	ldr	r5, [r4, #0]
 800c026:	1961      	adds	r1, r4, r5
 800c028:	428b      	cmp	r3, r1
 800c02a:	bf01      	itttt	eq
 800c02c:	6819      	ldreq	r1, [r3, #0]
 800c02e:	685b      	ldreq	r3, [r3, #4]
 800c030:	1949      	addeq	r1, r1, r5
 800c032:	6021      	streq	r1, [r4, #0]
 800c034:	e7ed      	b.n	800c012 <_free_r+0x22>
 800c036:	461a      	mov	r2, r3
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	b10b      	cbz	r3, 800c040 <_free_r+0x50>
 800c03c:	42a3      	cmp	r3, r4
 800c03e:	d9fa      	bls.n	800c036 <_free_r+0x46>
 800c040:	6811      	ldr	r1, [r2, #0]
 800c042:	1855      	adds	r5, r2, r1
 800c044:	42a5      	cmp	r5, r4
 800c046:	d10b      	bne.n	800c060 <_free_r+0x70>
 800c048:	6824      	ldr	r4, [r4, #0]
 800c04a:	4421      	add	r1, r4
 800c04c:	1854      	adds	r4, r2, r1
 800c04e:	42a3      	cmp	r3, r4
 800c050:	6011      	str	r1, [r2, #0]
 800c052:	d1e0      	bne.n	800c016 <_free_r+0x26>
 800c054:	681c      	ldr	r4, [r3, #0]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	6053      	str	r3, [r2, #4]
 800c05a:	4421      	add	r1, r4
 800c05c:	6011      	str	r1, [r2, #0]
 800c05e:	e7da      	b.n	800c016 <_free_r+0x26>
 800c060:	d902      	bls.n	800c068 <_free_r+0x78>
 800c062:	230c      	movs	r3, #12
 800c064:	6003      	str	r3, [r0, #0]
 800c066:	e7d6      	b.n	800c016 <_free_r+0x26>
 800c068:	6825      	ldr	r5, [r4, #0]
 800c06a:	1961      	adds	r1, r4, r5
 800c06c:	428b      	cmp	r3, r1
 800c06e:	bf04      	itt	eq
 800c070:	6819      	ldreq	r1, [r3, #0]
 800c072:	685b      	ldreq	r3, [r3, #4]
 800c074:	6063      	str	r3, [r4, #4]
 800c076:	bf04      	itt	eq
 800c078:	1949      	addeq	r1, r1, r5
 800c07a:	6021      	streq	r1, [r4, #0]
 800c07c:	6054      	str	r4, [r2, #4]
 800c07e:	e7ca      	b.n	800c016 <_free_r+0x26>
 800c080:	b003      	add	sp, #12
 800c082:	bd30      	pop	{r4, r5, pc}
 800c084:	240005dc 	.word	0x240005dc

0800c088 <sbrk_aligned>:
 800c088:	b570      	push	{r4, r5, r6, lr}
 800c08a:	4e0e      	ldr	r6, [pc, #56]	; (800c0c4 <sbrk_aligned+0x3c>)
 800c08c:	460c      	mov	r4, r1
 800c08e:	6831      	ldr	r1, [r6, #0]
 800c090:	4605      	mov	r5, r0
 800c092:	b911      	cbnz	r1, 800c09a <sbrk_aligned+0x12>
 800c094:	f000 fb4c 	bl	800c730 <_sbrk_r>
 800c098:	6030      	str	r0, [r6, #0]
 800c09a:	4621      	mov	r1, r4
 800c09c:	4628      	mov	r0, r5
 800c09e:	f000 fb47 	bl	800c730 <_sbrk_r>
 800c0a2:	1c43      	adds	r3, r0, #1
 800c0a4:	d00a      	beq.n	800c0bc <sbrk_aligned+0x34>
 800c0a6:	1cc4      	adds	r4, r0, #3
 800c0a8:	f024 0403 	bic.w	r4, r4, #3
 800c0ac:	42a0      	cmp	r0, r4
 800c0ae:	d007      	beq.n	800c0c0 <sbrk_aligned+0x38>
 800c0b0:	1a21      	subs	r1, r4, r0
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	f000 fb3c 	bl	800c730 <_sbrk_r>
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	d101      	bne.n	800c0c0 <sbrk_aligned+0x38>
 800c0bc:	f04f 34ff 	mov.w	r4, #4294967295
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	bd70      	pop	{r4, r5, r6, pc}
 800c0c4:	240005e0 	.word	0x240005e0

0800c0c8 <_malloc_r>:
 800c0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0cc:	1ccd      	adds	r5, r1, #3
 800c0ce:	f025 0503 	bic.w	r5, r5, #3
 800c0d2:	3508      	adds	r5, #8
 800c0d4:	2d0c      	cmp	r5, #12
 800c0d6:	bf38      	it	cc
 800c0d8:	250c      	movcc	r5, #12
 800c0da:	2d00      	cmp	r5, #0
 800c0dc:	4607      	mov	r7, r0
 800c0de:	db01      	blt.n	800c0e4 <_malloc_r+0x1c>
 800c0e0:	42a9      	cmp	r1, r5
 800c0e2:	d905      	bls.n	800c0f0 <_malloc_r+0x28>
 800c0e4:	230c      	movs	r3, #12
 800c0e6:	603b      	str	r3, [r7, #0]
 800c0e8:	2600      	movs	r6, #0
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f0:	4e2e      	ldr	r6, [pc, #184]	; (800c1ac <_malloc_r+0xe4>)
 800c0f2:	f000 fe51 	bl	800cd98 <__malloc_lock>
 800c0f6:	6833      	ldr	r3, [r6, #0]
 800c0f8:	461c      	mov	r4, r3
 800c0fa:	bb34      	cbnz	r4, 800c14a <_malloc_r+0x82>
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	4638      	mov	r0, r7
 800c100:	f7ff ffc2 	bl	800c088 <sbrk_aligned>
 800c104:	1c43      	adds	r3, r0, #1
 800c106:	4604      	mov	r4, r0
 800c108:	d14d      	bne.n	800c1a6 <_malloc_r+0xde>
 800c10a:	6834      	ldr	r4, [r6, #0]
 800c10c:	4626      	mov	r6, r4
 800c10e:	2e00      	cmp	r6, #0
 800c110:	d140      	bne.n	800c194 <_malloc_r+0xcc>
 800c112:	6823      	ldr	r3, [r4, #0]
 800c114:	4631      	mov	r1, r6
 800c116:	4638      	mov	r0, r7
 800c118:	eb04 0803 	add.w	r8, r4, r3
 800c11c:	f000 fb08 	bl	800c730 <_sbrk_r>
 800c120:	4580      	cmp	r8, r0
 800c122:	d13a      	bne.n	800c19a <_malloc_r+0xd2>
 800c124:	6821      	ldr	r1, [r4, #0]
 800c126:	3503      	adds	r5, #3
 800c128:	1a6d      	subs	r5, r5, r1
 800c12a:	f025 0503 	bic.w	r5, r5, #3
 800c12e:	3508      	adds	r5, #8
 800c130:	2d0c      	cmp	r5, #12
 800c132:	bf38      	it	cc
 800c134:	250c      	movcc	r5, #12
 800c136:	4629      	mov	r1, r5
 800c138:	4638      	mov	r0, r7
 800c13a:	f7ff ffa5 	bl	800c088 <sbrk_aligned>
 800c13e:	3001      	adds	r0, #1
 800c140:	d02b      	beq.n	800c19a <_malloc_r+0xd2>
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	442b      	add	r3, r5
 800c146:	6023      	str	r3, [r4, #0]
 800c148:	e00e      	b.n	800c168 <_malloc_r+0xa0>
 800c14a:	6822      	ldr	r2, [r4, #0]
 800c14c:	1b52      	subs	r2, r2, r5
 800c14e:	d41e      	bmi.n	800c18e <_malloc_r+0xc6>
 800c150:	2a0b      	cmp	r2, #11
 800c152:	d916      	bls.n	800c182 <_malloc_r+0xba>
 800c154:	1961      	adds	r1, r4, r5
 800c156:	42a3      	cmp	r3, r4
 800c158:	6025      	str	r5, [r4, #0]
 800c15a:	bf18      	it	ne
 800c15c:	6059      	strne	r1, [r3, #4]
 800c15e:	6863      	ldr	r3, [r4, #4]
 800c160:	bf08      	it	eq
 800c162:	6031      	streq	r1, [r6, #0]
 800c164:	5162      	str	r2, [r4, r5]
 800c166:	604b      	str	r3, [r1, #4]
 800c168:	4638      	mov	r0, r7
 800c16a:	f104 060b 	add.w	r6, r4, #11
 800c16e:	f000 fe19 	bl	800cda4 <__malloc_unlock>
 800c172:	f026 0607 	bic.w	r6, r6, #7
 800c176:	1d23      	adds	r3, r4, #4
 800c178:	1af2      	subs	r2, r6, r3
 800c17a:	d0b6      	beq.n	800c0ea <_malloc_r+0x22>
 800c17c:	1b9b      	subs	r3, r3, r6
 800c17e:	50a3      	str	r3, [r4, r2]
 800c180:	e7b3      	b.n	800c0ea <_malloc_r+0x22>
 800c182:	6862      	ldr	r2, [r4, #4]
 800c184:	42a3      	cmp	r3, r4
 800c186:	bf0c      	ite	eq
 800c188:	6032      	streq	r2, [r6, #0]
 800c18a:	605a      	strne	r2, [r3, #4]
 800c18c:	e7ec      	b.n	800c168 <_malloc_r+0xa0>
 800c18e:	4623      	mov	r3, r4
 800c190:	6864      	ldr	r4, [r4, #4]
 800c192:	e7b2      	b.n	800c0fa <_malloc_r+0x32>
 800c194:	4634      	mov	r4, r6
 800c196:	6876      	ldr	r6, [r6, #4]
 800c198:	e7b9      	b.n	800c10e <_malloc_r+0x46>
 800c19a:	230c      	movs	r3, #12
 800c19c:	603b      	str	r3, [r7, #0]
 800c19e:	4638      	mov	r0, r7
 800c1a0:	f000 fe00 	bl	800cda4 <__malloc_unlock>
 800c1a4:	e7a1      	b.n	800c0ea <_malloc_r+0x22>
 800c1a6:	6025      	str	r5, [r4, #0]
 800c1a8:	e7de      	b.n	800c168 <_malloc_r+0xa0>
 800c1aa:	bf00      	nop
 800c1ac:	240005dc 	.word	0x240005dc

0800c1b0 <__ssputs_r>:
 800c1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b4:	688e      	ldr	r6, [r1, #8]
 800c1b6:	429e      	cmp	r6, r3
 800c1b8:	4682      	mov	sl, r0
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	4690      	mov	r8, r2
 800c1be:	461f      	mov	r7, r3
 800c1c0:	d838      	bhi.n	800c234 <__ssputs_r+0x84>
 800c1c2:	898a      	ldrh	r2, [r1, #12]
 800c1c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c1c8:	d032      	beq.n	800c230 <__ssputs_r+0x80>
 800c1ca:	6825      	ldr	r5, [r4, #0]
 800c1cc:	6909      	ldr	r1, [r1, #16]
 800c1ce:	eba5 0901 	sub.w	r9, r5, r1
 800c1d2:	6965      	ldr	r5, [r4, #20]
 800c1d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1dc:	3301      	adds	r3, #1
 800c1de:	444b      	add	r3, r9
 800c1e0:	106d      	asrs	r5, r5, #1
 800c1e2:	429d      	cmp	r5, r3
 800c1e4:	bf38      	it	cc
 800c1e6:	461d      	movcc	r5, r3
 800c1e8:	0553      	lsls	r3, r2, #21
 800c1ea:	d531      	bpl.n	800c250 <__ssputs_r+0xa0>
 800c1ec:	4629      	mov	r1, r5
 800c1ee:	f7ff ff6b 	bl	800c0c8 <_malloc_r>
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	b950      	cbnz	r0, 800c20c <__ssputs_r+0x5c>
 800c1f6:	230c      	movs	r3, #12
 800c1f8:	f8ca 3000 	str.w	r3, [sl]
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c202:	81a3      	strh	r3, [r4, #12]
 800c204:	f04f 30ff 	mov.w	r0, #4294967295
 800c208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c20c:	6921      	ldr	r1, [r4, #16]
 800c20e:	464a      	mov	r2, r9
 800c210:	f7ff fa0c 	bl	800b62c <memcpy>
 800c214:	89a3      	ldrh	r3, [r4, #12]
 800c216:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c21a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c21e:	81a3      	strh	r3, [r4, #12]
 800c220:	6126      	str	r6, [r4, #16]
 800c222:	6165      	str	r5, [r4, #20]
 800c224:	444e      	add	r6, r9
 800c226:	eba5 0509 	sub.w	r5, r5, r9
 800c22a:	6026      	str	r6, [r4, #0]
 800c22c:	60a5      	str	r5, [r4, #8]
 800c22e:	463e      	mov	r6, r7
 800c230:	42be      	cmp	r6, r7
 800c232:	d900      	bls.n	800c236 <__ssputs_r+0x86>
 800c234:	463e      	mov	r6, r7
 800c236:	6820      	ldr	r0, [r4, #0]
 800c238:	4632      	mov	r2, r6
 800c23a:	4641      	mov	r1, r8
 800c23c:	f000 fd92 	bl	800cd64 <memmove>
 800c240:	68a3      	ldr	r3, [r4, #8]
 800c242:	1b9b      	subs	r3, r3, r6
 800c244:	60a3      	str	r3, [r4, #8]
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	4433      	add	r3, r6
 800c24a:	6023      	str	r3, [r4, #0]
 800c24c:	2000      	movs	r0, #0
 800c24e:	e7db      	b.n	800c208 <__ssputs_r+0x58>
 800c250:	462a      	mov	r2, r5
 800c252:	f000 fdad 	bl	800cdb0 <_realloc_r>
 800c256:	4606      	mov	r6, r0
 800c258:	2800      	cmp	r0, #0
 800c25a:	d1e1      	bne.n	800c220 <__ssputs_r+0x70>
 800c25c:	6921      	ldr	r1, [r4, #16]
 800c25e:	4650      	mov	r0, sl
 800c260:	f7ff fec6 	bl	800bff0 <_free_r>
 800c264:	e7c7      	b.n	800c1f6 <__ssputs_r+0x46>
	...

0800c268 <_svfiprintf_r>:
 800c268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26c:	4698      	mov	r8, r3
 800c26e:	898b      	ldrh	r3, [r1, #12]
 800c270:	061b      	lsls	r3, r3, #24
 800c272:	b09d      	sub	sp, #116	; 0x74
 800c274:	4607      	mov	r7, r0
 800c276:	460d      	mov	r5, r1
 800c278:	4614      	mov	r4, r2
 800c27a:	d50e      	bpl.n	800c29a <_svfiprintf_r+0x32>
 800c27c:	690b      	ldr	r3, [r1, #16]
 800c27e:	b963      	cbnz	r3, 800c29a <_svfiprintf_r+0x32>
 800c280:	2140      	movs	r1, #64	; 0x40
 800c282:	f7ff ff21 	bl	800c0c8 <_malloc_r>
 800c286:	6028      	str	r0, [r5, #0]
 800c288:	6128      	str	r0, [r5, #16]
 800c28a:	b920      	cbnz	r0, 800c296 <_svfiprintf_r+0x2e>
 800c28c:	230c      	movs	r3, #12
 800c28e:	603b      	str	r3, [r7, #0]
 800c290:	f04f 30ff 	mov.w	r0, #4294967295
 800c294:	e0d1      	b.n	800c43a <_svfiprintf_r+0x1d2>
 800c296:	2340      	movs	r3, #64	; 0x40
 800c298:	616b      	str	r3, [r5, #20]
 800c29a:	2300      	movs	r3, #0
 800c29c:	9309      	str	r3, [sp, #36]	; 0x24
 800c29e:	2320      	movs	r3, #32
 800c2a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2a8:	2330      	movs	r3, #48	; 0x30
 800c2aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c454 <_svfiprintf_r+0x1ec>
 800c2ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2b2:	f04f 0901 	mov.w	r9, #1
 800c2b6:	4623      	mov	r3, r4
 800c2b8:	469a      	mov	sl, r3
 800c2ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2be:	b10a      	cbz	r2, 800c2c4 <_svfiprintf_r+0x5c>
 800c2c0:	2a25      	cmp	r2, #37	; 0x25
 800c2c2:	d1f9      	bne.n	800c2b8 <_svfiprintf_r+0x50>
 800c2c4:	ebba 0b04 	subs.w	fp, sl, r4
 800c2c8:	d00b      	beq.n	800c2e2 <_svfiprintf_r+0x7a>
 800c2ca:	465b      	mov	r3, fp
 800c2cc:	4622      	mov	r2, r4
 800c2ce:	4629      	mov	r1, r5
 800c2d0:	4638      	mov	r0, r7
 800c2d2:	f7ff ff6d 	bl	800c1b0 <__ssputs_r>
 800c2d6:	3001      	adds	r0, #1
 800c2d8:	f000 80aa 	beq.w	800c430 <_svfiprintf_r+0x1c8>
 800c2dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2de:	445a      	add	r2, fp
 800c2e0:	9209      	str	r2, [sp, #36]	; 0x24
 800c2e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f000 80a2 	beq.w	800c430 <_svfiprintf_r+0x1c8>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c2f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2f6:	f10a 0a01 	add.w	sl, sl, #1
 800c2fa:	9304      	str	r3, [sp, #16]
 800c2fc:	9307      	str	r3, [sp, #28]
 800c2fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c302:	931a      	str	r3, [sp, #104]	; 0x68
 800c304:	4654      	mov	r4, sl
 800c306:	2205      	movs	r2, #5
 800c308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c30c:	4851      	ldr	r0, [pc, #324]	; (800c454 <_svfiprintf_r+0x1ec>)
 800c30e:	f7f4 f807 	bl	8000320 <memchr>
 800c312:	9a04      	ldr	r2, [sp, #16]
 800c314:	b9d8      	cbnz	r0, 800c34e <_svfiprintf_r+0xe6>
 800c316:	06d0      	lsls	r0, r2, #27
 800c318:	bf44      	itt	mi
 800c31a:	2320      	movmi	r3, #32
 800c31c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c320:	0711      	lsls	r1, r2, #28
 800c322:	bf44      	itt	mi
 800c324:	232b      	movmi	r3, #43	; 0x2b
 800c326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c32a:	f89a 3000 	ldrb.w	r3, [sl]
 800c32e:	2b2a      	cmp	r3, #42	; 0x2a
 800c330:	d015      	beq.n	800c35e <_svfiprintf_r+0xf6>
 800c332:	9a07      	ldr	r2, [sp, #28]
 800c334:	4654      	mov	r4, sl
 800c336:	2000      	movs	r0, #0
 800c338:	f04f 0c0a 	mov.w	ip, #10
 800c33c:	4621      	mov	r1, r4
 800c33e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c342:	3b30      	subs	r3, #48	; 0x30
 800c344:	2b09      	cmp	r3, #9
 800c346:	d94e      	bls.n	800c3e6 <_svfiprintf_r+0x17e>
 800c348:	b1b0      	cbz	r0, 800c378 <_svfiprintf_r+0x110>
 800c34a:	9207      	str	r2, [sp, #28]
 800c34c:	e014      	b.n	800c378 <_svfiprintf_r+0x110>
 800c34e:	eba0 0308 	sub.w	r3, r0, r8
 800c352:	fa09 f303 	lsl.w	r3, r9, r3
 800c356:	4313      	orrs	r3, r2
 800c358:	9304      	str	r3, [sp, #16]
 800c35a:	46a2      	mov	sl, r4
 800c35c:	e7d2      	b.n	800c304 <_svfiprintf_r+0x9c>
 800c35e:	9b03      	ldr	r3, [sp, #12]
 800c360:	1d19      	adds	r1, r3, #4
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	9103      	str	r1, [sp, #12]
 800c366:	2b00      	cmp	r3, #0
 800c368:	bfbb      	ittet	lt
 800c36a:	425b      	neglt	r3, r3
 800c36c:	f042 0202 	orrlt.w	r2, r2, #2
 800c370:	9307      	strge	r3, [sp, #28]
 800c372:	9307      	strlt	r3, [sp, #28]
 800c374:	bfb8      	it	lt
 800c376:	9204      	strlt	r2, [sp, #16]
 800c378:	7823      	ldrb	r3, [r4, #0]
 800c37a:	2b2e      	cmp	r3, #46	; 0x2e
 800c37c:	d10c      	bne.n	800c398 <_svfiprintf_r+0x130>
 800c37e:	7863      	ldrb	r3, [r4, #1]
 800c380:	2b2a      	cmp	r3, #42	; 0x2a
 800c382:	d135      	bne.n	800c3f0 <_svfiprintf_r+0x188>
 800c384:	9b03      	ldr	r3, [sp, #12]
 800c386:	1d1a      	adds	r2, r3, #4
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	9203      	str	r2, [sp, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	bfb8      	it	lt
 800c390:	f04f 33ff 	movlt.w	r3, #4294967295
 800c394:	3402      	adds	r4, #2
 800c396:	9305      	str	r3, [sp, #20]
 800c398:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c464 <_svfiprintf_r+0x1fc>
 800c39c:	7821      	ldrb	r1, [r4, #0]
 800c39e:	2203      	movs	r2, #3
 800c3a0:	4650      	mov	r0, sl
 800c3a2:	f7f3 ffbd 	bl	8000320 <memchr>
 800c3a6:	b140      	cbz	r0, 800c3ba <_svfiprintf_r+0x152>
 800c3a8:	2340      	movs	r3, #64	; 0x40
 800c3aa:	eba0 000a 	sub.w	r0, r0, sl
 800c3ae:	fa03 f000 	lsl.w	r0, r3, r0
 800c3b2:	9b04      	ldr	r3, [sp, #16]
 800c3b4:	4303      	orrs	r3, r0
 800c3b6:	3401      	adds	r4, #1
 800c3b8:	9304      	str	r3, [sp, #16]
 800c3ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3be:	4826      	ldr	r0, [pc, #152]	; (800c458 <_svfiprintf_r+0x1f0>)
 800c3c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3c4:	2206      	movs	r2, #6
 800c3c6:	f7f3 ffab 	bl	8000320 <memchr>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d038      	beq.n	800c440 <_svfiprintf_r+0x1d8>
 800c3ce:	4b23      	ldr	r3, [pc, #140]	; (800c45c <_svfiprintf_r+0x1f4>)
 800c3d0:	bb1b      	cbnz	r3, 800c41a <_svfiprintf_r+0x1b2>
 800c3d2:	9b03      	ldr	r3, [sp, #12]
 800c3d4:	3307      	adds	r3, #7
 800c3d6:	f023 0307 	bic.w	r3, r3, #7
 800c3da:	3308      	adds	r3, #8
 800c3dc:	9303      	str	r3, [sp, #12]
 800c3de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3e0:	4433      	add	r3, r6
 800c3e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3e4:	e767      	b.n	800c2b6 <_svfiprintf_r+0x4e>
 800c3e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3ea:	460c      	mov	r4, r1
 800c3ec:	2001      	movs	r0, #1
 800c3ee:	e7a5      	b.n	800c33c <_svfiprintf_r+0xd4>
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	3401      	adds	r4, #1
 800c3f4:	9305      	str	r3, [sp, #20]
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	f04f 0c0a 	mov.w	ip, #10
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c402:	3a30      	subs	r2, #48	; 0x30
 800c404:	2a09      	cmp	r2, #9
 800c406:	d903      	bls.n	800c410 <_svfiprintf_r+0x1a8>
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d0c5      	beq.n	800c398 <_svfiprintf_r+0x130>
 800c40c:	9105      	str	r1, [sp, #20]
 800c40e:	e7c3      	b.n	800c398 <_svfiprintf_r+0x130>
 800c410:	fb0c 2101 	mla	r1, ip, r1, r2
 800c414:	4604      	mov	r4, r0
 800c416:	2301      	movs	r3, #1
 800c418:	e7f0      	b.n	800c3fc <_svfiprintf_r+0x194>
 800c41a:	ab03      	add	r3, sp, #12
 800c41c:	9300      	str	r3, [sp, #0]
 800c41e:	462a      	mov	r2, r5
 800c420:	4b0f      	ldr	r3, [pc, #60]	; (800c460 <_svfiprintf_r+0x1f8>)
 800c422:	a904      	add	r1, sp, #16
 800c424:	4638      	mov	r0, r7
 800c426:	f7fc fac7 	bl	80089b8 <_printf_float>
 800c42a:	1c42      	adds	r2, r0, #1
 800c42c:	4606      	mov	r6, r0
 800c42e:	d1d6      	bne.n	800c3de <_svfiprintf_r+0x176>
 800c430:	89ab      	ldrh	r3, [r5, #12]
 800c432:	065b      	lsls	r3, r3, #25
 800c434:	f53f af2c 	bmi.w	800c290 <_svfiprintf_r+0x28>
 800c438:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c43a:	b01d      	add	sp, #116	; 0x74
 800c43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c440:	ab03      	add	r3, sp, #12
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	462a      	mov	r2, r5
 800c446:	4b06      	ldr	r3, [pc, #24]	; (800c460 <_svfiprintf_r+0x1f8>)
 800c448:	a904      	add	r1, sp, #16
 800c44a:	4638      	mov	r0, r7
 800c44c:	f7fc fd40 	bl	8008ed0 <_printf_i>
 800c450:	e7eb      	b.n	800c42a <_svfiprintf_r+0x1c2>
 800c452:	bf00      	nop
 800c454:	0800d52c 	.word	0x0800d52c
 800c458:	0800d536 	.word	0x0800d536
 800c45c:	080089b9 	.word	0x080089b9
 800c460:	0800c1b1 	.word	0x0800c1b1
 800c464:	0800d532 	.word	0x0800d532

0800c468 <__sfputc_r>:
 800c468:	6893      	ldr	r3, [r2, #8]
 800c46a:	3b01      	subs	r3, #1
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	b410      	push	{r4}
 800c470:	6093      	str	r3, [r2, #8]
 800c472:	da08      	bge.n	800c486 <__sfputc_r+0x1e>
 800c474:	6994      	ldr	r4, [r2, #24]
 800c476:	42a3      	cmp	r3, r4
 800c478:	db01      	blt.n	800c47e <__sfputc_r+0x16>
 800c47a:	290a      	cmp	r1, #10
 800c47c:	d103      	bne.n	800c486 <__sfputc_r+0x1e>
 800c47e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c482:	f000 b979 	b.w	800c778 <__swbuf_r>
 800c486:	6813      	ldr	r3, [r2, #0]
 800c488:	1c58      	adds	r0, r3, #1
 800c48a:	6010      	str	r0, [r2, #0]
 800c48c:	7019      	strb	r1, [r3, #0]
 800c48e:	4608      	mov	r0, r1
 800c490:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c494:	4770      	bx	lr

0800c496 <__sfputs_r>:
 800c496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c498:	4606      	mov	r6, r0
 800c49a:	460f      	mov	r7, r1
 800c49c:	4614      	mov	r4, r2
 800c49e:	18d5      	adds	r5, r2, r3
 800c4a0:	42ac      	cmp	r4, r5
 800c4a2:	d101      	bne.n	800c4a8 <__sfputs_r+0x12>
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	e007      	b.n	800c4b8 <__sfputs_r+0x22>
 800c4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ac:	463a      	mov	r2, r7
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	f7ff ffda 	bl	800c468 <__sfputc_r>
 800c4b4:	1c43      	adds	r3, r0, #1
 800c4b6:	d1f3      	bne.n	800c4a0 <__sfputs_r+0xa>
 800c4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4bc <_vfiprintf_r>:
 800c4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c0:	460d      	mov	r5, r1
 800c4c2:	b09d      	sub	sp, #116	; 0x74
 800c4c4:	4614      	mov	r4, r2
 800c4c6:	4698      	mov	r8, r3
 800c4c8:	4606      	mov	r6, r0
 800c4ca:	b118      	cbz	r0, 800c4d4 <_vfiprintf_r+0x18>
 800c4cc:	6983      	ldr	r3, [r0, #24]
 800c4ce:	b90b      	cbnz	r3, 800c4d4 <_vfiprintf_r+0x18>
 800c4d0:	f000 fb42 	bl	800cb58 <__sinit>
 800c4d4:	4b89      	ldr	r3, [pc, #548]	; (800c6fc <_vfiprintf_r+0x240>)
 800c4d6:	429d      	cmp	r5, r3
 800c4d8:	d11b      	bne.n	800c512 <_vfiprintf_r+0x56>
 800c4da:	6875      	ldr	r5, [r6, #4]
 800c4dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4de:	07d9      	lsls	r1, r3, #31
 800c4e0:	d405      	bmi.n	800c4ee <_vfiprintf_r+0x32>
 800c4e2:	89ab      	ldrh	r3, [r5, #12]
 800c4e4:	059a      	lsls	r2, r3, #22
 800c4e6:	d402      	bmi.n	800c4ee <_vfiprintf_r+0x32>
 800c4e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4ea:	f000 fbd3 	bl	800cc94 <__retarget_lock_acquire_recursive>
 800c4ee:	89ab      	ldrh	r3, [r5, #12]
 800c4f0:	071b      	lsls	r3, r3, #28
 800c4f2:	d501      	bpl.n	800c4f8 <_vfiprintf_r+0x3c>
 800c4f4:	692b      	ldr	r3, [r5, #16]
 800c4f6:	b9eb      	cbnz	r3, 800c534 <_vfiprintf_r+0x78>
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	f000 f99c 	bl	800c838 <__swsetup_r>
 800c500:	b1c0      	cbz	r0, 800c534 <_vfiprintf_r+0x78>
 800c502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c504:	07dc      	lsls	r4, r3, #31
 800c506:	d50e      	bpl.n	800c526 <_vfiprintf_r+0x6a>
 800c508:	f04f 30ff 	mov.w	r0, #4294967295
 800c50c:	b01d      	add	sp, #116	; 0x74
 800c50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c512:	4b7b      	ldr	r3, [pc, #492]	; (800c700 <_vfiprintf_r+0x244>)
 800c514:	429d      	cmp	r5, r3
 800c516:	d101      	bne.n	800c51c <_vfiprintf_r+0x60>
 800c518:	68b5      	ldr	r5, [r6, #8]
 800c51a:	e7df      	b.n	800c4dc <_vfiprintf_r+0x20>
 800c51c:	4b79      	ldr	r3, [pc, #484]	; (800c704 <_vfiprintf_r+0x248>)
 800c51e:	429d      	cmp	r5, r3
 800c520:	bf08      	it	eq
 800c522:	68f5      	ldreq	r5, [r6, #12]
 800c524:	e7da      	b.n	800c4dc <_vfiprintf_r+0x20>
 800c526:	89ab      	ldrh	r3, [r5, #12]
 800c528:	0598      	lsls	r0, r3, #22
 800c52a:	d4ed      	bmi.n	800c508 <_vfiprintf_r+0x4c>
 800c52c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c52e:	f000 fbb2 	bl	800cc96 <__retarget_lock_release_recursive>
 800c532:	e7e9      	b.n	800c508 <_vfiprintf_r+0x4c>
 800c534:	2300      	movs	r3, #0
 800c536:	9309      	str	r3, [sp, #36]	; 0x24
 800c538:	2320      	movs	r3, #32
 800c53a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c53e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c542:	2330      	movs	r3, #48	; 0x30
 800c544:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c708 <_vfiprintf_r+0x24c>
 800c548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c54c:	f04f 0901 	mov.w	r9, #1
 800c550:	4623      	mov	r3, r4
 800c552:	469a      	mov	sl, r3
 800c554:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c558:	b10a      	cbz	r2, 800c55e <_vfiprintf_r+0xa2>
 800c55a:	2a25      	cmp	r2, #37	; 0x25
 800c55c:	d1f9      	bne.n	800c552 <_vfiprintf_r+0x96>
 800c55e:	ebba 0b04 	subs.w	fp, sl, r4
 800c562:	d00b      	beq.n	800c57c <_vfiprintf_r+0xc0>
 800c564:	465b      	mov	r3, fp
 800c566:	4622      	mov	r2, r4
 800c568:	4629      	mov	r1, r5
 800c56a:	4630      	mov	r0, r6
 800c56c:	f7ff ff93 	bl	800c496 <__sfputs_r>
 800c570:	3001      	adds	r0, #1
 800c572:	f000 80aa 	beq.w	800c6ca <_vfiprintf_r+0x20e>
 800c576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c578:	445a      	add	r2, fp
 800c57a:	9209      	str	r2, [sp, #36]	; 0x24
 800c57c:	f89a 3000 	ldrb.w	r3, [sl]
 800c580:	2b00      	cmp	r3, #0
 800c582:	f000 80a2 	beq.w	800c6ca <_vfiprintf_r+0x20e>
 800c586:	2300      	movs	r3, #0
 800c588:	f04f 32ff 	mov.w	r2, #4294967295
 800c58c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c590:	f10a 0a01 	add.w	sl, sl, #1
 800c594:	9304      	str	r3, [sp, #16]
 800c596:	9307      	str	r3, [sp, #28]
 800c598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c59c:	931a      	str	r3, [sp, #104]	; 0x68
 800c59e:	4654      	mov	r4, sl
 800c5a0:	2205      	movs	r2, #5
 800c5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a6:	4858      	ldr	r0, [pc, #352]	; (800c708 <_vfiprintf_r+0x24c>)
 800c5a8:	f7f3 feba 	bl	8000320 <memchr>
 800c5ac:	9a04      	ldr	r2, [sp, #16]
 800c5ae:	b9d8      	cbnz	r0, 800c5e8 <_vfiprintf_r+0x12c>
 800c5b0:	06d1      	lsls	r1, r2, #27
 800c5b2:	bf44      	itt	mi
 800c5b4:	2320      	movmi	r3, #32
 800c5b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5ba:	0713      	lsls	r3, r2, #28
 800c5bc:	bf44      	itt	mi
 800c5be:	232b      	movmi	r3, #43	; 0x2b
 800c5c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c5ca:	d015      	beq.n	800c5f8 <_vfiprintf_r+0x13c>
 800c5cc:	9a07      	ldr	r2, [sp, #28]
 800c5ce:	4654      	mov	r4, sl
 800c5d0:	2000      	movs	r0, #0
 800c5d2:	f04f 0c0a 	mov.w	ip, #10
 800c5d6:	4621      	mov	r1, r4
 800c5d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5dc:	3b30      	subs	r3, #48	; 0x30
 800c5de:	2b09      	cmp	r3, #9
 800c5e0:	d94e      	bls.n	800c680 <_vfiprintf_r+0x1c4>
 800c5e2:	b1b0      	cbz	r0, 800c612 <_vfiprintf_r+0x156>
 800c5e4:	9207      	str	r2, [sp, #28]
 800c5e6:	e014      	b.n	800c612 <_vfiprintf_r+0x156>
 800c5e8:	eba0 0308 	sub.w	r3, r0, r8
 800c5ec:	fa09 f303 	lsl.w	r3, r9, r3
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	9304      	str	r3, [sp, #16]
 800c5f4:	46a2      	mov	sl, r4
 800c5f6:	e7d2      	b.n	800c59e <_vfiprintf_r+0xe2>
 800c5f8:	9b03      	ldr	r3, [sp, #12]
 800c5fa:	1d19      	adds	r1, r3, #4
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	9103      	str	r1, [sp, #12]
 800c600:	2b00      	cmp	r3, #0
 800c602:	bfbb      	ittet	lt
 800c604:	425b      	neglt	r3, r3
 800c606:	f042 0202 	orrlt.w	r2, r2, #2
 800c60a:	9307      	strge	r3, [sp, #28]
 800c60c:	9307      	strlt	r3, [sp, #28]
 800c60e:	bfb8      	it	lt
 800c610:	9204      	strlt	r2, [sp, #16]
 800c612:	7823      	ldrb	r3, [r4, #0]
 800c614:	2b2e      	cmp	r3, #46	; 0x2e
 800c616:	d10c      	bne.n	800c632 <_vfiprintf_r+0x176>
 800c618:	7863      	ldrb	r3, [r4, #1]
 800c61a:	2b2a      	cmp	r3, #42	; 0x2a
 800c61c:	d135      	bne.n	800c68a <_vfiprintf_r+0x1ce>
 800c61e:	9b03      	ldr	r3, [sp, #12]
 800c620:	1d1a      	adds	r2, r3, #4
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	9203      	str	r2, [sp, #12]
 800c626:	2b00      	cmp	r3, #0
 800c628:	bfb8      	it	lt
 800c62a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c62e:	3402      	adds	r4, #2
 800c630:	9305      	str	r3, [sp, #20]
 800c632:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c718 <_vfiprintf_r+0x25c>
 800c636:	7821      	ldrb	r1, [r4, #0]
 800c638:	2203      	movs	r2, #3
 800c63a:	4650      	mov	r0, sl
 800c63c:	f7f3 fe70 	bl	8000320 <memchr>
 800c640:	b140      	cbz	r0, 800c654 <_vfiprintf_r+0x198>
 800c642:	2340      	movs	r3, #64	; 0x40
 800c644:	eba0 000a 	sub.w	r0, r0, sl
 800c648:	fa03 f000 	lsl.w	r0, r3, r0
 800c64c:	9b04      	ldr	r3, [sp, #16]
 800c64e:	4303      	orrs	r3, r0
 800c650:	3401      	adds	r4, #1
 800c652:	9304      	str	r3, [sp, #16]
 800c654:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c658:	482c      	ldr	r0, [pc, #176]	; (800c70c <_vfiprintf_r+0x250>)
 800c65a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c65e:	2206      	movs	r2, #6
 800c660:	f7f3 fe5e 	bl	8000320 <memchr>
 800c664:	2800      	cmp	r0, #0
 800c666:	d03f      	beq.n	800c6e8 <_vfiprintf_r+0x22c>
 800c668:	4b29      	ldr	r3, [pc, #164]	; (800c710 <_vfiprintf_r+0x254>)
 800c66a:	bb1b      	cbnz	r3, 800c6b4 <_vfiprintf_r+0x1f8>
 800c66c:	9b03      	ldr	r3, [sp, #12]
 800c66e:	3307      	adds	r3, #7
 800c670:	f023 0307 	bic.w	r3, r3, #7
 800c674:	3308      	adds	r3, #8
 800c676:	9303      	str	r3, [sp, #12]
 800c678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c67a:	443b      	add	r3, r7
 800c67c:	9309      	str	r3, [sp, #36]	; 0x24
 800c67e:	e767      	b.n	800c550 <_vfiprintf_r+0x94>
 800c680:	fb0c 3202 	mla	r2, ip, r2, r3
 800c684:	460c      	mov	r4, r1
 800c686:	2001      	movs	r0, #1
 800c688:	e7a5      	b.n	800c5d6 <_vfiprintf_r+0x11a>
 800c68a:	2300      	movs	r3, #0
 800c68c:	3401      	adds	r4, #1
 800c68e:	9305      	str	r3, [sp, #20]
 800c690:	4619      	mov	r1, r3
 800c692:	f04f 0c0a 	mov.w	ip, #10
 800c696:	4620      	mov	r0, r4
 800c698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c69c:	3a30      	subs	r2, #48	; 0x30
 800c69e:	2a09      	cmp	r2, #9
 800c6a0:	d903      	bls.n	800c6aa <_vfiprintf_r+0x1ee>
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d0c5      	beq.n	800c632 <_vfiprintf_r+0x176>
 800c6a6:	9105      	str	r1, [sp, #20]
 800c6a8:	e7c3      	b.n	800c632 <_vfiprintf_r+0x176>
 800c6aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e7f0      	b.n	800c696 <_vfiprintf_r+0x1da>
 800c6b4:	ab03      	add	r3, sp, #12
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	462a      	mov	r2, r5
 800c6ba:	4b16      	ldr	r3, [pc, #88]	; (800c714 <_vfiprintf_r+0x258>)
 800c6bc:	a904      	add	r1, sp, #16
 800c6be:	4630      	mov	r0, r6
 800c6c0:	f7fc f97a 	bl	80089b8 <_printf_float>
 800c6c4:	4607      	mov	r7, r0
 800c6c6:	1c78      	adds	r0, r7, #1
 800c6c8:	d1d6      	bne.n	800c678 <_vfiprintf_r+0x1bc>
 800c6ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6cc:	07d9      	lsls	r1, r3, #31
 800c6ce:	d405      	bmi.n	800c6dc <_vfiprintf_r+0x220>
 800c6d0:	89ab      	ldrh	r3, [r5, #12]
 800c6d2:	059a      	lsls	r2, r3, #22
 800c6d4:	d402      	bmi.n	800c6dc <_vfiprintf_r+0x220>
 800c6d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6d8:	f000 fadd 	bl	800cc96 <__retarget_lock_release_recursive>
 800c6dc:	89ab      	ldrh	r3, [r5, #12]
 800c6de:	065b      	lsls	r3, r3, #25
 800c6e0:	f53f af12 	bmi.w	800c508 <_vfiprintf_r+0x4c>
 800c6e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6e6:	e711      	b.n	800c50c <_vfiprintf_r+0x50>
 800c6e8:	ab03      	add	r3, sp, #12
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	462a      	mov	r2, r5
 800c6ee:	4b09      	ldr	r3, [pc, #36]	; (800c714 <_vfiprintf_r+0x258>)
 800c6f0:	a904      	add	r1, sp, #16
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	f7fc fbec 	bl	8008ed0 <_printf_i>
 800c6f8:	e7e4      	b.n	800c6c4 <_vfiprintf_r+0x208>
 800c6fa:	bf00      	nop
 800c6fc:	0800d560 	.word	0x0800d560
 800c700:	0800d580 	.word	0x0800d580
 800c704:	0800d540 	.word	0x0800d540
 800c708:	0800d52c 	.word	0x0800d52c
 800c70c:	0800d536 	.word	0x0800d536
 800c710:	080089b9 	.word	0x080089b9
 800c714:	0800c497 	.word	0x0800c497
 800c718:	0800d532 	.word	0x0800d532
 800c71c:	00000000 	.word	0x00000000

0800c720 <nan>:
 800c720:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c728 <nan+0x8>
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	00000000 	.word	0x00000000
 800c72c:	7ff80000 	.word	0x7ff80000

0800c730 <_sbrk_r>:
 800c730:	b538      	push	{r3, r4, r5, lr}
 800c732:	4d06      	ldr	r5, [pc, #24]	; (800c74c <_sbrk_r+0x1c>)
 800c734:	2300      	movs	r3, #0
 800c736:	4604      	mov	r4, r0
 800c738:	4608      	mov	r0, r1
 800c73a:	602b      	str	r3, [r5, #0]
 800c73c:	f7f5 f946 	bl	80019cc <_sbrk>
 800c740:	1c43      	adds	r3, r0, #1
 800c742:	d102      	bne.n	800c74a <_sbrk_r+0x1a>
 800c744:	682b      	ldr	r3, [r5, #0]
 800c746:	b103      	cbz	r3, 800c74a <_sbrk_r+0x1a>
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	bd38      	pop	{r3, r4, r5, pc}
 800c74c:	240005e8 	.word	0x240005e8

0800c750 <strncmp>:
 800c750:	b510      	push	{r4, lr}
 800c752:	b17a      	cbz	r2, 800c774 <strncmp+0x24>
 800c754:	4603      	mov	r3, r0
 800c756:	3901      	subs	r1, #1
 800c758:	1884      	adds	r4, r0, r2
 800c75a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c75e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c762:	4290      	cmp	r0, r2
 800c764:	d101      	bne.n	800c76a <strncmp+0x1a>
 800c766:	42a3      	cmp	r3, r4
 800c768:	d101      	bne.n	800c76e <strncmp+0x1e>
 800c76a:	1a80      	subs	r0, r0, r2
 800c76c:	bd10      	pop	{r4, pc}
 800c76e:	2800      	cmp	r0, #0
 800c770:	d1f3      	bne.n	800c75a <strncmp+0xa>
 800c772:	e7fa      	b.n	800c76a <strncmp+0x1a>
 800c774:	4610      	mov	r0, r2
 800c776:	e7f9      	b.n	800c76c <strncmp+0x1c>

0800c778 <__swbuf_r>:
 800c778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c77a:	460e      	mov	r6, r1
 800c77c:	4614      	mov	r4, r2
 800c77e:	4605      	mov	r5, r0
 800c780:	b118      	cbz	r0, 800c78a <__swbuf_r+0x12>
 800c782:	6983      	ldr	r3, [r0, #24]
 800c784:	b90b      	cbnz	r3, 800c78a <__swbuf_r+0x12>
 800c786:	f000 f9e7 	bl	800cb58 <__sinit>
 800c78a:	4b21      	ldr	r3, [pc, #132]	; (800c810 <__swbuf_r+0x98>)
 800c78c:	429c      	cmp	r4, r3
 800c78e:	d12b      	bne.n	800c7e8 <__swbuf_r+0x70>
 800c790:	686c      	ldr	r4, [r5, #4]
 800c792:	69a3      	ldr	r3, [r4, #24]
 800c794:	60a3      	str	r3, [r4, #8]
 800c796:	89a3      	ldrh	r3, [r4, #12]
 800c798:	071a      	lsls	r2, r3, #28
 800c79a:	d52f      	bpl.n	800c7fc <__swbuf_r+0x84>
 800c79c:	6923      	ldr	r3, [r4, #16]
 800c79e:	b36b      	cbz	r3, 800c7fc <__swbuf_r+0x84>
 800c7a0:	6923      	ldr	r3, [r4, #16]
 800c7a2:	6820      	ldr	r0, [r4, #0]
 800c7a4:	1ac0      	subs	r0, r0, r3
 800c7a6:	6963      	ldr	r3, [r4, #20]
 800c7a8:	b2f6      	uxtb	r6, r6
 800c7aa:	4283      	cmp	r3, r0
 800c7ac:	4637      	mov	r7, r6
 800c7ae:	dc04      	bgt.n	800c7ba <__swbuf_r+0x42>
 800c7b0:	4621      	mov	r1, r4
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	f000 f93c 	bl	800ca30 <_fflush_r>
 800c7b8:	bb30      	cbnz	r0, 800c808 <__swbuf_r+0x90>
 800c7ba:	68a3      	ldr	r3, [r4, #8]
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	60a3      	str	r3, [r4, #8]
 800c7c0:	6823      	ldr	r3, [r4, #0]
 800c7c2:	1c5a      	adds	r2, r3, #1
 800c7c4:	6022      	str	r2, [r4, #0]
 800c7c6:	701e      	strb	r6, [r3, #0]
 800c7c8:	6963      	ldr	r3, [r4, #20]
 800c7ca:	3001      	adds	r0, #1
 800c7cc:	4283      	cmp	r3, r0
 800c7ce:	d004      	beq.n	800c7da <__swbuf_r+0x62>
 800c7d0:	89a3      	ldrh	r3, [r4, #12]
 800c7d2:	07db      	lsls	r3, r3, #31
 800c7d4:	d506      	bpl.n	800c7e4 <__swbuf_r+0x6c>
 800c7d6:	2e0a      	cmp	r6, #10
 800c7d8:	d104      	bne.n	800c7e4 <__swbuf_r+0x6c>
 800c7da:	4621      	mov	r1, r4
 800c7dc:	4628      	mov	r0, r5
 800c7de:	f000 f927 	bl	800ca30 <_fflush_r>
 800c7e2:	b988      	cbnz	r0, 800c808 <__swbuf_r+0x90>
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7e8:	4b0a      	ldr	r3, [pc, #40]	; (800c814 <__swbuf_r+0x9c>)
 800c7ea:	429c      	cmp	r4, r3
 800c7ec:	d101      	bne.n	800c7f2 <__swbuf_r+0x7a>
 800c7ee:	68ac      	ldr	r4, [r5, #8]
 800c7f0:	e7cf      	b.n	800c792 <__swbuf_r+0x1a>
 800c7f2:	4b09      	ldr	r3, [pc, #36]	; (800c818 <__swbuf_r+0xa0>)
 800c7f4:	429c      	cmp	r4, r3
 800c7f6:	bf08      	it	eq
 800c7f8:	68ec      	ldreq	r4, [r5, #12]
 800c7fa:	e7ca      	b.n	800c792 <__swbuf_r+0x1a>
 800c7fc:	4621      	mov	r1, r4
 800c7fe:	4628      	mov	r0, r5
 800c800:	f000 f81a 	bl	800c838 <__swsetup_r>
 800c804:	2800      	cmp	r0, #0
 800c806:	d0cb      	beq.n	800c7a0 <__swbuf_r+0x28>
 800c808:	f04f 37ff 	mov.w	r7, #4294967295
 800c80c:	e7ea      	b.n	800c7e4 <__swbuf_r+0x6c>
 800c80e:	bf00      	nop
 800c810:	0800d560 	.word	0x0800d560
 800c814:	0800d580 	.word	0x0800d580
 800c818:	0800d540 	.word	0x0800d540

0800c81c <__ascii_wctomb>:
 800c81c:	b149      	cbz	r1, 800c832 <__ascii_wctomb+0x16>
 800c81e:	2aff      	cmp	r2, #255	; 0xff
 800c820:	bf85      	ittet	hi
 800c822:	238a      	movhi	r3, #138	; 0x8a
 800c824:	6003      	strhi	r3, [r0, #0]
 800c826:	700a      	strbls	r2, [r1, #0]
 800c828:	f04f 30ff 	movhi.w	r0, #4294967295
 800c82c:	bf98      	it	ls
 800c82e:	2001      	movls	r0, #1
 800c830:	4770      	bx	lr
 800c832:	4608      	mov	r0, r1
 800c834:	4770      	bx	lr
	...

0800c838 <__swsetup_r>:
 800c838:	4b32      	ldr	r3, [pc, #200]	; (800c904 <__swsetup_r+0xcc>)
 800c83a:	b570      	push	{r4, r5, r6, lr}
 800c83c:	681d      	ldr	r5, [r3, #0]
 800c83e:	4606      	mov	r6, r0
 800c840:	460c      	mov	r4, r1
 800c842:	b125      	cbz	r5, 800c84e <__swsetup_r+0x16>
 800c844:	69ab      	ldr	r3, [r5, #24]
 800c846:	b913      	cbnz	r3, 800c84e <__swsetup_r+0x16>
 800c848:	4628      	mov	r0, r5
 800c84a:	f000 f985 	bl	800cb58 <__sinit>
 800c84e:	4b2e      	ldr	r3, [pc, #184]	; (800c908 <__swsetup_r+0xd0>)
 800c850:	429c      	cmp	r4, r3
 800c852:	d10f      	bne.n	800c874 <__swsetup_r+0x3c>
 800c854:	686c      	ldr	r4, [r5, #4]
 800c856:	89a3      	ldrh	r3, [r4, #12]
 800c858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c85c:	0719      	lsls	r1, r3, #28
 800c85e:	d42c      	bmi.n	800c8ba <__swsetup_r+0x82>
 800c860:	06dd      	lsls	r5, r3, #27
 800c862:	d411      	bmi.n	800c888 <__swsetup_r+0x50>
 800c864:	2309      	movs	r3, #9
 800c866:	6033      	str	r3, [r6, #0]
 800c868:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c86c:	81a3      	strh	r3, [r4, #12]
 800c86e:	f04f 30ff 	mov.w	r0, #4294967295
 800c872:	e03e      	b.n	800c8f2 <__swsetup_r+0xba>
 800c874:	4b25      	ldr	r3, [pc, #148]	; (800c90c <__swsetup_r+0xd4>)
 800c876:	429c      	cmp	r4, r3
 800c878:	d101      	bne.n	800c87e <__swsetup_r+0x46>
 800c87a:	68ac      	ldr	r4, [r5, #8]
 800c87c:	e7eb      	b.n	800c856 <__swsetup_r+0x1e>
 800c87e:	4b24      	ldr	r3, [pc, #144]	; (800c910 <__swsetup_r+0xd8>)
 800c880:	429c      	cmp	r4, r3
 800c882:	bf08      	it	eq
 800c884:	68ec      	ldreq	r4, [r5, #12]
 800c886:	e7e6      	b.n	800c856 <__swsetup_r+0x1e>
 800c888:	0758      	lsls	r0, r3, #29
 800c88a:	d512      	bpl.n	800c8b2 <__swsetup_r+0x7a>
 800c88c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c88e:	b141      	cbz	r1, 800c8a2 <__swsetup_r+0x6a>
 800c890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c894:	4299      	cmp	r1, r3
 800c896:	d002      	beq.n	800c89e <__swsetup_r+0x66>
 800c898:	4630      	mov	r0, r6
 800c89a:	f7ff fba9 	bl	800bff0 <_free_r>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	6363      	str	r3, [r4, #52]	; 0x34
 800c8a2:	89a3      	ldrh	r3, [r4, #12]
 800c8a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8a8:	81a3      	strh	r3, [r4, #12]
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	6063      	str	r3, [r4, #4]
 800c8ae:	6923      	ldr	r3, [r4, #16]
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	89a3      	ldrh	r3, [r4, #12]
 800c8b4:	f043 0308 	orr.w	r3, r3, #8
 800c8b8:	81a3      	strh	r3, [r4, #12]
 800c8ba:	6923      	ldr	r3, [r4, #16]
 800c8bc:	b94b      	cbnz	r3, 800c8d2 <__swsetup_r+0x9a>
 800c8be:	89a3      	ldrh	r3, [r4, #12]
 800c8c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8c8:	d003      	beq.n	800c8d2 <__swsetup_r+0x9a>
 800c8ca:	4621      	mov	r1, r4
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	f000 fa09 	bl	800cce4 <__smakebuf_r>
 800c8d2:	89a0      	ldrh	r0, [r4, #12]
 800c8d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8d8:	f010 0301 	ands.w	r3, r0, #1
 800c8dc:	d00a      	beq.n	800c8f4 <__swsetup_r+0xbc>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	60a3      	str	r3, [r4, #8]
 800c8e2:	6963      	ldr	r3, [r4, #20]
 800c8e4:	425b      	negs	r3, r3
 800c8e6:	61a3      	str	r3, [r4, #24]
 800c8e8:	6923      	ldr	r3, [r4, #16]
 800c8ea:	b943      	cbnz	r3, 800c8fe <__swsetup_r+0xc6>
 800c8ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c8f0:	d1ba      	bne.n	800c868 <__swsetup_r+0x30>
 800c8f2:	bd70      	pop	{r4, r5, r6, pc}
 800c8f4:	0781      	lsls	r1, r0, #30
 800c8f6:	bf58      	it	pl
 800c8f8:	6963      	ldrpl	r3, [r4, #20]
 800c8fa:	60a3      	str	r3, [r4, #8]
 800c8fc:	e7f4      	b.n	800c8e8 <__swsetup_r+0xb0>
 800c8fe:	2000      	movs	r0, #0
 800c900:	e7f7      	b.n	800c8f2 <__swsetup_r+0xba>
 800c902:	bf00      	nop
 800c904:	24000024 	.word	0x24000024
 800c908:	0800d560 	.word	0x0800d560
 800c90c:	0800d580 	.word	0x0800d580
 800c910:	0800d540 	.word	0x0800d540

0800c914 <abort>:
 800c914:	b508      	push	{r3, lr}
 800c916:	2006      	movs	r0, #6
 800c918:	f000 faa2 	bl	800ce60 <raise>
 800c91c:	2001      	movs	r0, #1
 800c91e:	f7f4 ffdd 	bl	80018dc <_exit>
	...

0800c924 <__sflush_r>:
 800c924:	898a      	ldrh	r2, [r1, #12]
 800c926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c92a:	4605      	mov	r5, r0
 800c92c:	0710      	lsls	r0, r2, #28
 800c92e:	460c      	mov	r4, r1
 800c930:	d458      	bmi.n	800c9e4 <__sflush_r+0xc0>
 800c932:	684b      	ldr	r3, [r1, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	dc05      	bgt.n	800c944 <__sflush_r+0x20>
 800c938:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	dc02      	bgt.n	800c944 <__sflush_r+0x20>
 800c93e:	2000      	movs	r0, #0
 800c940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c946:	2e00      	cmp	r6, #0
 800c948:	d0f9      	beq.n	800c93e <__sflush_r+0x1a>
 800c94a:	2300      	movs	r3, #0
 800c94c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c950:	682f      	ldr	r7, [r5, #0]
 800c952:	602b      	str	r3, [r5, #0]
 800c954:	d032      	beq.n	800c9bc <__sflush_r+0x98>
 800c956:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c958:	89a3      	ldrh	r3, [r4, #12]
 800c95a:	075a      	lsls	r2, r3, #29
 800c95c:	d505      	bpl.n	800c96a <__sflush_r+0x46>
 800c95e:	6863      	ldr	r3, [r4, #4]
 800c960:	1ac0      	subs	r0, r0, r3
 800c962:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c964:	b10b      	cbz	r3, 800c96a <__sflush_r+0x46>
 800c966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c968:	1ac0      	subs	r0, r0, r3
 800c96a:	2300      	movs	r3, #0
 800c96c:	4602      	mov	r2, r0
 800c96e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c970:	6a21      	ldr	r1, [r4, #32]
 800c972:	4628      	mov	r0, r5
 800c974:	47b0      	blx	r6
 800c976:	1c43      	adds	r3, r0, #1
 800c978:	89a3      	ldrh	r3, [r4, #12]
 800c97a:	d106      	bne.n	800c98a <__sflush_r+0x66>
 800c97c:	6829      	ldr	r1, [r5, #0]
 800c97e:	291d      	cmp	r1, #29
 800c980:	d82c      	bhi.n	800c9dc <__sflush_r+0xb8>
 800c982:	4a2a      	ldr	r2, [pc, #168]	; (800ca2c <__sflush_r+0x108>)
 800c984:	40ca      	lsrs	r2, r1
 800c986:	07d6      	lsls	r6, r2, #31
 800c988:	d528      	bpl.n	800c9dc <__sflush_r+0xb8>
 800c98a:	2200      	movs	r2, #0
 800c98c:	6062      	str	r2, [r4, #4]
 800c98e:	04d9      	lsls	r1, r3, #19
 800c990:	6922      	ldr	r2, [r4, #16]
 800c992:	6022      	str	r2, [r4, #0]
 800c994:	d504      	bpl.n	800c9a0 <__sflush_r+0x7c>
 800c996:	1c42      	adds	r2, r0, #1
 800c998:	d101      	bne.n	800c99e <__sflush_r+0x7a>
 800c99a:	682b      	ldr	r3, [r5, #0]
 800c99c:	b903      	cbnz	r3, 800c9a0 <__sflush_r+0x7c>
 800c99e:	6560      	str	r0, [r4, #84]	; 0x54
 800c9a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9a2:	602f      	str	r7, [r5, #0]
 800c9a4:	2900      	cmp	r1, #0
 800c9a6:	d0ca      	beq.n	800c93e <__sflush_r+0x1a>
 800c9a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9ac:	4299      	cmp	r1, r3
 800c9ae:	d002      	beq.n	800c9b6 <__sflush_r+0x92>
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	f7ff fb1d 	bl	800bff0 <_free_r>
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	6360      	str	r0, [r4, #52]	; 0x34
 800c9ba:	e7c1      	b.n	800c940 <__sflush_r+0x1c>
 800c9bc:	6a21      	ldr	r1, [r4, #32]
 800c9be:	2301      	movs	r3, #1
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	47b0      	blx	r6
 800c9c4:	1c41      	adds	r1, r0, #1
 800c9c6:	d1c7      	bne.n	800c958 <__sflush_r+0x34>
 800c9c8:	682b      	ldr	r3, [r5, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0c4      	beq.n	800c958 <__sflush_r+0x34>
 800c9ce:	2b1d      	cmp	r3, #29
 800c9d0:	d001      	beq.n	800c9d6 <__sflush_r+0xb2>
 800c9d2:	2b16      	cmp	r3, #22
 800c9d4:	d101      	bne.n	800c9da <__sflush_r+0xb6>
 800c9d6:	602f      	str	r7, [r5, #0]
 800c9d8:	e7b1      	b.n	800c93e <__sflush_r+0x1a>
 800c9da:	89a3      	ldrh	r3, [r4, #12]
 800c9dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9e0:	81a3      	strh	r3, [r4, #12]
 800c9e2:	e7ad      	b.n	800c940 <__sflush_r+0x1c>
 800c9e4:	690f      	ldr	r7, [r1, #16]
 800c9e6:	2f00      	cmp	r7, #0
 800c9e8:	d0a9      	beq.n	800c93e <__sflush_r+0x1a>
 800c9ea:	0793      	lsls	r3, r2, #30
 800c9ec:	680e      	ldr	r6, [r1, #0]
 800c9ee:	bf08      	it	eq
 800c9f0:	694b      	ldreq	r3, [r1, #20]
 800c9f2:	600f      	str	r7, [r1, #0]
 800c9f4:	bf18      	it	ne
 800c9f6:	2300      	movne	r3, #0
 800c9f8:	eba6 0807 	sub.w	r8, r6, r7
 800c9fc:	608b      	str	r3, [r1, #8]
 800c9fe:	f1b8 0f00 	cmp.w	r8, #0
 800ca02:	dd9c      	ble.n	800c93e <__sflush_r+0x1a>
 800ca04:	6a21      	ldr	r1, [r4, #32]
 800ca06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca08:	4643      	mov	r3, r8
 800ca0a:	463a      	mov	r2, r7
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	47b0      	blx	r6
 800ca10:	2800      	cmp	r0, #0
 800ca12:	dc06      	bgt.n	800ca22 <__sflush_r+0xfe>
 800ca14:	89a3      	ldrh	r3, [r4, #12]
 800ca16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca1a:	81a3      	strh	r3, [r4, #12]
 800ca1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca20:	e78e      	b.n	800c940 <__sflush_r+0x1c>
 800ca22:	4407      	add	r7, r0
 800ca24:	eba8 0800 	sub.w	r8, r8, r0
 800ca28:	e7e9      	b.n	800c9fe <__sflush_r+0xda>
 800ca2a:	bf00      	nop
 800ca2c:	20400001 	.word	0x20400001

0800ca30 <_fflush_r>:
 800ca30:	b538      	push	{r3, r4, r5, lr}
 800ca32:	690b      	ldr	r3, [r1, #16]
 800ca34:	4605      	mov	r5, r0
 800ca36:	460c      	mov	r4, r1
 800ca38:	b913      	cbnz	r3, 800ca40 <_fflush_r+0x10>
 800ca3a:	2500      	movs	r5, #0
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	bd38      	pop	{r3, r4, r5, pc}
 800ca40:	b118      	cbz	r0, 800ca4a <_fflush_r+0x1a>
 800ca42:	6983      	ldr	r3, [r0, #24]
 800ca44:	b90b      	cbnz	r3, 800ca4a <_fflush_r+0x1a>
 800ca46:	f000 f887 	bl	800cb58 <__sinit>
 800ca4a:	4b14      	ldr	r3, [pc, #80]	; (800ca9c <_fflush_r+0x6c>)
 800ca4c:	429c      	cmp	r4, r3
 800ca4e:	d11b      	bne.n	800ca88 <_fflush_r+0x58>
 800ca50:	686c      	ldr	r4, [r5, #4]
 800ca52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d0ef      	beq.n	800ca3a <_fflush_r+0xa>
 800ca5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca5c:	07d0      	lsls	r0, r2, #31
 800ca5e:	d404      	bmi.n	800ca6a <_fflush_r+0x3a>
 800ca60:	0599      	lsls	r1, r3, #22
 800ca62:	d402      	bmi.n	800ca6a <_fflush_r+0x3a>
 800ca64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca66:	f000 f915 	bl	800cc94 <__retarget_lock_acquire_recursive>
 800ca6a:	4628      	mov	r0, r5
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	f7ff ff59 	bl	800c924 <__sflush_r>
 800ca72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca74:	07da      	lsls	r2, r3, #31
 800ca76:	4605      	mov	r5, r0
 800ca78:	d4e0      	bmi.n	800ca3c <_fflush_r+0xc>
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	059b      	lsls	r3, r3, #22
 800ca7e:	d4dd      	bmi.n	800ca3c <_fflush_r+0xc>
 800ca80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca82:	f000 f908 	bl	800cc96 <__retarget_lock_release_recursive>
 800ca86:	e7d9      	b.n	800ca3c <_fflush_r+0xc>
 800ca88:	4b05      	ldr	r3, [pc, #20]	; (800caa0 <_fflush_r+0x70>)
 800ca8a:	429c      	cmp	r4, r3
 800ca8c:	d101      	bne.n	800ca92 <_fflush_r+0x62>
 800ca8e:	68ac      	ldr	r4, [r5, #8]
 800ca90:	e7df      	b.n	800ca52 <_fflush_r+0x22>
 800ca92:	4b04      	ldr	r3, [pc, #16]	; (800caa4 <_fflush_r+0x74>)
 800ca94:	429c      	cmp	r4, r3
 800ca96:	bf08      	it	eq
 800ca98:	68ec      	ldreq	r4, [r5, #12]
 800ca9a:	e7da      	b.n	800ca52 <_fflush_r+0x22>
 800ca9c:	0800d560 	.word	0x0800d560
 800caa0:	0800d580 	.word	0x0800d580
 800caa4:	0800d540 	.word	0x0800d540

0800caa8 <std>:
 800caa8:	2300      	movs	r3, #0
 800caaa:	b510      	push	{r4, lr}
 800caac:	4604      	mov	r4, r0
 800caae:	e9c0 3300 	strd	r3, r3, [r0]
 800cab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cab6:	6083      	str	r3, [r0, #8]
 800cab8:	8181      	strh	r1, [r0, #12]
 800caba:	6643      	str	r3, [r0, #100]	; 0x64
 800cabc:	81c2      	strh	r2, [r0, #14]
 800cabe:	6183      	str	r3, [r0, #24]
 800cac0:	4619      	mov	r1, r3
 800cac2:	2208      	movs	r2, #8
 800cac4:	305c      	adds	r0, #92	; 0x5c
 800cac6:	f7fb fedf 	bl	8008888 <memset>
 800caca:	4b05      	ldr	r3, [pc, #20]	; (800cae0 <std+0x38>)
 800cacc:	6263      	str	r3, [r4, #36]	; 0x24
 800cace:	4b05      	ldr	r3, [pc, #20]	; (800cae4 <std+0x3c>)
 800cad0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cad2:	4b05      	ldr	r3, [pc, #20]	; (800cae8 <std+0x40>)
 800cad4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cad6:	4b05      	ldr	r3, [pc, #20]	; (800caec <std+0x44>)
 800cad8:	6224      	str	r4, [r4, #32]
 800cada:	6323      	str	r3, [r4, #48]	; 0x30
 800cadc:	bd10      	pop	{r4, pc}
 800cade:	bf00      	nop
 800cae0:	0800ce99 	.word	0x0800ce99
 800cae4:	0800cebb 	.word	0x0800cebb
 800cae8:	0800cef3 	.word	0x0800cef3
 800caec:	0800cf17 	.word	0x0800cf17

0800caf0 <_cleanup_r>:
 800caf0:	4901      	ldr	r1, [pc, #4]	; (800caf8 <_cleanup_r+0x8>)
 800caf2:	f000 b8af 	b.w	800cc54 <_fwalk_reent>
 800caf6:	bf00      	nop
 800caf8:	0800ca31 	.word	0x0800ca31

0800cafc <__sfmoreglue>:
 800cafc:	b570      	push	{r4, r5, r6, lr}
 800cafe:	2268      	movs	r2, #104	; 0x68
 800cb00:	1e4d      	subs	r5, r1, #1
 800cb02:	4355      	muls	r5, r2
 800cb04:	460e      	mov	r6, r1
 800cb06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb0a:	f7ff fadd 	bl	800c0c8 <_malloc_r>
 800cb0e:	4604      	mov	r4, r0
 800cb10:	b140      	cbz	r0, 800cb24 <__sfmoreglue+0x28>
 800cb12:	2100      	movs	r1, #0
 800cb14:	e9c0 1600 	strd	r1, r6, [r0]
 800cb18:	300c      	adds	r0, #12
 800cb1a:	60a0      	str	r0, [r4, #8]
 800cb1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb20:	f7fb feb2 	bl	8008888 <memset>
 800cb24:	4620      	mov	r0, r4
 800cb26:	bd70      	pop	{r4, r5, r6, pc}

0800cb28 <__sfp_lock_acquire>:
 800cb28:	4801      	ldr	r0, [pc, #4]	; (800cb30 <__sfp_lock_acquire+0x8>)
 800cb2a:	f000 b8b3 	b.w	800cc94 <__retarget_lock_acquire_recursive>
 800cb2e:	bf00      	nop
 800cb30:	240005e5 	.word	0x240005e5

0800cb34 <__sfp_lock_release>:
 800cb34:	4801      	ldr	r0, [pc, #4]	; (800cb3c <__sfp_lock_release+0x8>)
 800cb36:	f000 b8ae 	b.w	800cc96 <__retarget_lock_release_recursive>
 800cb3a:	bf00      	nop
 800cb3c:	240005e5 	.word	0x240005e5

0800cb40 <__sinit_lock_acquire>:
 800cb40:	4801      	ldr	r0, [pc, #4]	; (800cb48 <__sinit_lock_acquire+0x8>)
 800cb42:	f000 b8a7 	b.w	800cc94 <__retarget_lock_acquire_recursive>
 800cb46:	bf00      	nop
 800cb48:	240005e6 	.word	0x240005e6

0800cb4c <__sinit_lock_release>:
 800cb4c:	4801      	ldr	r0, [pc, #4]	; (800cb54 <__sinit_lock_release+0x8>)
 800cb4e:	f000 b8a2 	b.w	800cc96 <__retarget_lock_release_recursive>
 800cb52:	bf00      	nop
 800cb54:	240005e6 	.word	0x240005e6

0800cb58 <__sinit>:
 800cb58:	b510      	push	{r4, lr}
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	f7ff fff0 	bl	800cb40 <__sinit_lock_acquire>
 800cb60:	69a3      	ldr	r3, [r4, #24]
 800cb62:	b11b      	cbz	r3, 800cb6c <__sinit+0x14>
 800cb64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb68:	f7ff bff0 	b.w	800cb4c <__sinit_lock_release>
 800cb6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb70:	6523      	str	r3, [r4, #80]	; 0x50
 800cb72:	4b13      	ldr	r3, [pc, #76]	; (800cbc0 <__sinit+0x68>)
 800cb74:	4a13      	ldr	r2, [pc, #76]	; (800cbc4 <__sinit+0x6c>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb7a:	42a3      	cmp	r3, r4
 800cb7c:	bf04      	itt	eq
 800cb7e:	2301      	moveq	r3, #1
 800cb80:	61a3      	streq	r3, [r4, #24]
 800cb82:	4620      	mov	r0, r4
 800cb84:	f000 f820 	bl	800cbc8 <__sfp>
 800cb88:	6060      	str	r0, [r4, #4]
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f000 f81c 	bl	800cbc8 <__sfp>
 800cb90:	60a0      	str	r0, [r4, #8]
 800cb92:	4620      	mov	r0, r4
 800cb94:	f000 f818 	bl	800cbc8 <__sfp>
 800cb98:	2200      	movs	r2, #0
 800cb9a:	60e0      	str	r0, [r4, #12]
 800cb9c:	2104      	movs	r1, #4
 800cb9e:	6860      	ldr	r0, [r4, #4]
 800cba0:	f7ff ff82 	bl	800caa8 <std>
 800cba4:	68a0      	ldr	r0, [r4, #8]
 800cba6:	2201      	movs	r2, #1
 800cba8:	2109      	movs	r1, #9
 800cbaa:	f7ff ff7d 	bl	800caa8 <std>
 800cbae:	68e0      	ldr	r0, [r4, #12]
 800cbb0:	2202      	movs	r2, #2
 800cbb2:	2112      	movs	r1, #18
 800cbb4:	f7ff ff78 	bl	800caa8 <std>
 800cbb8:	2301      	movs	r3, #1
 800cbba:	61a3      	str	r3, [r4, #24]
 800cbbc:	e7d2      	b.n	800cb64 <__sinit+0xc>
 800cbbe:	bf00      	nop
 800cbc0:	0800d0a0 	.word	0x0800d0a0
 800cbc4:	0800caf1 	.word	0x0800caf1

0800cbc8 <__sfp>:
 800cbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbca:	4607      	mov	r7, r0
 800cbcc:	f7ff ffac 	bl	800cb28 <__sfp_lock_acquire>
 800cbd0:	4b1e      	ldr	r3, [pc, #120]	; (800cc4c <__sfp+0x84>)
 800cbd2:	681e      	ldr	r6, [r3, #0]
 800cbd4:	69b3      	ldr	r3, [r6, #24]
 800cbd6:	b913      	cbnz	r3, 800cbde <__sfp+0x16>
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f7ff ffbd 	bl	800cb58 <__sinit>
 800cbde:	3648      	adds	r6, #72	; 0x48
 800cbe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cbe4:	3b01      	subs	r3, #1
 800cbe6:	d503      	bpl.n	800cbf0 <__sfp+0x28>
 800cbe8:	6833      	ldr	r3, [r6, #0]
 800cbea:	b30b      	cbz	r3, 800cc30 <__sfp+0x68>
 800cbec:	6836      	ldr	r6, [r6, #0]
 800cbee:	e7f7      	b.n	800cbe0 <__sfp+0x18>
 800cbf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cbf4:	b9d5      	cbnz	r5, 800cc2c <__sfp+0x64>
 800cbf6:	4b16      	ldr	r3, [pc, #88]	; (800cc50 <__sfp+0x88>)
 800cbf8:	60e3      	str	r3, [r4, #12]
 800cbfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cbfe:	6665      	str	r5, [r4, #100]	; 0x64
 800cc00:	f000 f847 	bl	800cc92 <__retarget_lock_init_recursive>
 800cc04:	f7ff ff96 	bl	800cb34 <__sfp_lock_release>
 800cc08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc10:	6025      	str	r5, [r4, #0]
 800cc12:	61a5      	str	r5, [r4, #24]
 800cc14:	2208      	movs	r2, #8
 800cc16:	4629      	mov	r1, r5
 800cc18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc1c:	f7fb fe34 	bl	8008888 <memset>
 800cc20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc28:	4620      	mov	r0, r4
 800cc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc2c:	3468      	adds	r4, #104	; 0x68
 800cc2e:	e7d9      	b.n	800cbe4 <__sfp+0x1c>
 800cc30:	2104      	movs	r1, #4
 800cc32:	4638      	mov	r0, r7
 800cc34:	f7ff ff62 	bl	800cafc <__sfmoreglue>
 800cc38:	4604      	mov	r4, r0
 800cc3a:	6030      	str	r0, [r6, #0]
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d1d5      	bne.n	800cbec <__sfp+0x24>
 800cc40:	f7ff ff78 	bl	800cb34 <__sfp_lock_release>
 800cc44:	230c      	movs	r3, #12
 800cc46:	603b      	str	r3, [r7, #0]
 800cc48:	e7ee      	b.n	800cc28 <__sfp+0x60>
 800cc4a:	bf00      	nop
 800cc4c:	0800d0a0 	.word	0x0800d0a0
 800cc50:	ffff0001 	.word	0xffff0001

0800cc54 <_fwalk_reent>:
 800cc54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc58:	4606      	mov	r6, r0
 800cc5a:	4688      	mov	r8, r1
 800cc5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc60:	2700      	movs	r7, #0
 800cc62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc66:	f1b9 0901 	subs.w	r9, r9, #1
 800cc6a:	d505      	bpl.n	800cc78 <_fwalk_reent+0x24>
 800cc6c:	6824      	ldr	r4, [r4, #0]
 800cc6e:	2c00      	cmp	r4, #0
 800cc70:	d1f7      	bne.n	800cc62 <_fwalk_reent+0xe>
 800cc72:	4638      	mov	r0, r7
 800cc74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc78:	89ab      	ldrh	r3, [r5, #12]
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d907      	bls.n	800cc8e <_fwalk_reent+0x3a>
 800cc7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc82:	3301      	adds	r3, #1
 800cc84:	d003      	beq.n	800cc8e <_fwalk_reent+0x3a>
 800cc86:	4629      	mov	r1, r5
 800cc88:	4630      	mov	r0, r6
 800cc8a:	47c0      	blx	r8
 800cc8c:	4307      	orrs	r7, r0
 800cc8e:	3568      	adds	r5, #104	; 0x68
 800cc90:	e7e9      	b.n	800cc66 <_fwalk_reent+0x12>

0800cc92 <__retarget_lock_init_recursive>:
 800cc92:	4770      	bx	lr

0800cc94 <__retarget_lock_acquire_recursive>:
 800cc94:	4770      	bx	lr

0800cc96 <__retarget_lock_release_recursive>:
 800cc96:	4770      	bx	lr

0800cc98 <__swhatbuf_r>:
 800cc98:	b570      	push	{r4, r5, r6, lr}
 800cc9a:	460e      	mov	r6, r1
 800cc9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cca0:	2900      	cmp	r1, #0
 800cca2:	b096      	sub	sp, #88	; 0x58
 800cca4:	4614      	mov	r4, r2
 800cca6:	461d      	mov	r5, r3
 800cca8:	da08      	bge.n	800ccbc <__swhatbuf_r+0x24>
 800ccaa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	602a      	str	r2, [r5, #0]
 800ccb2:	061a      	lsls	r2, r3, #24
 800ccb4:	d410      	bmi.n	800ccd8 <__swhatbuf_r+0x40>
 800ccb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccba:	e00e      	b.n	800ccda <__swhatbuf_r+0x42>
 800ccbc:	466a      	mov	r2, sp
 800ccbe:	f000 f951 	bl	800cf64 <_fstat_r>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	dbf1      	blt.n	800ccaa <__swhatbuf_r+0x12>
 800ccc6:	9a01      	ldr	r2, [sp, #4]
 800ccc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cccc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ccd0:	425a      	negs	r2, r3
 800ccd2:	415a      	adcs	r2, r3
 800ccd4:	602a      	str	r2, [r5, #0]
 800ccd6:	e7ee      	b.n	800ccb6 <__swhatbuf_r+0x1e>
 800ccd8:	2340      	movs	r3, #64	; 0x40
 800ccda:	2000      	movs	r0, #0
 800ccdc:	6023      	str	r3, [r4, #0]
 800ccde:	b016      	add	sp, #88	; 0x58
 800cce0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cce4 <__smakebuf_r>:
 800cce4:	898b      	ldrh	r3, [r1, #12]
 800cce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cce8:	079d      	lsls	r5, r3, #30
 800ccea:	4606      	mov	r6, r0
 800ccec:	460c      	mov	r4, r1
 800ccee:	d507      	bpl.n	800cd00 <__smakebuf_r+0x1c>
 800ccf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	6123      	str	r3, [r4, #16]
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	6163      	str	r3, [r4, #20]
 800ccfc:	b002      	add	sp, #8
 800ccfe:	bd70      	pop	{r4, r5, r6, pc}
 800cd00:	ab01      	add	r3, sp, #4
 800cd02:	466a      	mov	r2, sp
 800cd04:	f7ff ffc8 	bl	800cc98 <__swhatbuf_r>
 800cd08:	9900      	ldr	r1, [sp, #0]
 800cd0a:	4605      	mov	r5, r0
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	f7ff f9db 	bl	800c0c8 <_malloc_r>
 800cd12:	b948      	cbnz	r0, 800cd28 <__smakebuf_r+0x44>
 800cd14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd18:	059a      	lsls	r2, r3, #22
 800cd1a:	d4ef      	bmi.n	800ccfc <__smakebuf_r+0x18>
 800cd1c:	f023 0303 	bic.w	r3, r3, #3
 800cd20:	f043 0302 	orr.w	r3, r3, #2
 800cd24:	81a3      	strh	r3, [r4, #12]
 800cd26:	e7e3      	b.n	800ccf0 <__smakebuf_r+0xc>
 800cd28:	4b0d      	ldr	r3, [pc, #52]	; (800cd60 <__smakebuf_r+0x7c>)
 800cd2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	6020      	str	r0, [r4, #0]
 800cd30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd34:	81a3      	strh	r3, [r4, #12]
 800cd36:	9b00      	ldr	r3, [sp, #0]
 800cd38:	6163      	str	r3, [r4, #20]
 800cd3a:	9b01      	ldr	r3, [sp, #4]
 800cd3c:	6120      	str	r0, [r4, #16]
 800cd3e:	b15b      	cbz	r3, 800cd58 <__smakebuf_r+0x74>
 800cd40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd44:	4630      	mov	r0, r6
 800cd46:	f000 f91f 	bl	800cf88 <_isatty_r>
 800cd4a:	b128      	cbz	r0, 800cd58 <__smakebuf_r+0x74>
 800cd4c:	89a3      	ldrh	r3, [r4, #12]
 800cd4e:	f023 0303 	bic.w	r3, r3, #3
 800cd52:	f043 0301 	orr.w	r3, r3, #1
 800cd56:	81a3      	strh	r3, [r4, #12]
 800cd58:	89a0      	ldrh	r0, [r4, #12]
 800cd5a:	4305      	orrs	r5, r0
 800cd5c:	81a5      	strh	r5, [r4, #12]
 800cd5e:	e7cd      	b.n	800ccfc <__smakebuf_r+0x18>
 800cd60:	0800caf1 	.word	0x0800caf1

0800cd64 <memmove>:
 800cd64:	4288      	cmp	r0, r1
 800cd66:	b510      	push	{r4, lr}
 800cd68:	eb01 0402 	add.w	r4, r1, r2
 800cd6c:	d902      	bls.n	800cd74 <memmove+0x10>
 800cd6e:	4284      	cmp	r4, r0
 800cd70:	4623      	mov	r3, r4
 800cd72:	d807      	bhi.n	800cd84 <memmove+0x20>
 800cd74:	1e43      	subs	r3, r0, #1
 800cd76:	42a1      	cmp	r1, r4
 800cd78:	d008      	beq.n	800cd8c <memmove+0x28>
 800cd7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd82:	e7f8      	b.n	800cd76 <memmove+0x12>
 800cd84:	4402      	add	r2, r0
 800cd86:	4601      	mov	r1, r0
 800cd88:	428a      	cmp	r2, r1
 800cd8a:	d100      	bne.n	800cd8e <memmove+0x2a>
 800cd8c:	bd10      	pop	{r4, pc}
 800cd8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd96:	e7f7      	b.n	800cd88 <memmove+0x24>

0800cd98 <__malloc_lock>:
 800cd98:	4801      	ldr	r0, [pc, #4]	; (800cda0 <__malloc_lock+0x8>)
 800cd9a:	f7ff bf7b 	b.w	800cc94 <__retarget_lock_acquire_recursive>
 800cd9e:	bf00      	nop
 800cda0:	240005e4 	.word	0x240005e4

0800cda4 <__malloc_unlock>:
 800cda4:	4801      	ldr	r0, [pc, #4]	; (800cdac <__malloc_unlock+0x8>)
 800cda6:	f7ff bf76 	b.w	800cc96 <__retarget_lock_release_recursive>
 800cdaa:	bf00      	nop
 800cdac:	240005e4 	.word	0x240005e4

0800cdb0 <_realloc_r>:
 800cdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb4:	4680      	mov	r8, r0
 800cdb6:	4614      	mov	r4, r2
 800cdb8:	460e      	mov	r6, r1
 800cdba:	b921      	cbnz	r1, 800cdc6 <_realloc_r+0x16>
 800cdbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc0:	4611      	mov	r1, r2
 800cdc2:	f7ff b981 	b.w	800c0c8 <_malloc_r>
 800cdc6:	b92a      	cbnz	r2, 800cdd4 <_realloc_r+0x24>
 800cdc8:	f7ff f912 	bl	800bff0 <_free_r>
 800cdcc:	4625      	mov	r5, r4
 800cdce:	4628      	mov	r0, r5
 800cdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd4:	f000 f8fa 	bl	800cfcc <_malloc_usable_size_r>
 800cdd8:	4284      	cmp	r4, r0
 800cdda:	4607      	mov	r7, r0
 800cddc:	d802      	bhi.n	800cde4 <_realloc_r+0x34>
 800cdde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cde2:	d812      	bhi.n	800ce0a <_realloc_r+0x5a>
 800cde4:	4621      	mov	r1, r4
 800cde6:	4640      	mov	r0, r8
 800cde8:	f7ff f96e 	bl	800c0c8 <_malloc_r>
 800cdec:	4605      	mov	r5, r0
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	d0ed      	beq.n	800cdce <_realloc_r+0x1e>
 800cdf2:	42bc      	cmp	r4, r7
 800cdf4:	4622      	mov	r2, r4
 800cdf6:	4631      	mov	r1, r6
 800cdf8:	bf28      	it	cs
 800cdfa:	463a      	movcs	r2, r7
 800cdfc:	f7fe fc16 	bl	800b62c <memcpy>
 800ce00:	4631      	mov	r1, r6
 800ce02:	4640      	mov	r0, r8
 800ce04:	f7ff f8f4 	bl	800bff0 <_free_r>
 800ce08:	e7e1      	b.n	800cdce <_realloc_r+0x1e>
 800ce0a:	4635      	mov	r5, r6
 800ce0c:	e7df      	b.n	800cdce <_realloc_r+0x1e>

0800ce0e <_raise_r>:
 800ce0e:	291f      	cmp	r1, #31
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	4604      	mov	r4, r0
 800ce14:	460d      	mov	r5, r1
 800ce16:	d904      	bls.n	800ce22 <_raise_r+0x14>
 800ce18:	2316      	movs	r3, #22
 800ce1a:	6003      	str	r3, [r0, #0]
 800ce1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce20:	bd38      	pop	{r3, r4, r5, pc}
 800ce22:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce24:	b112      	cbz	r2, 800ce2c <_raise_r+0x1e>
 800ce26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce2a:	b94b      	cbnz	r3, 800ce40 <_raise_r+0x32>
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f000 f831 	bl	800ce94 <_getpid_r>
 800ce32:	462a      	mov	r2, r5
 800ce34:	4601      	mov	r1, r0
 800ce36:	4620      	mov	r0, r4
 800ce38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce3c:	f000 b818 	b.w	800ce70 <_kill_r>
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d00a      	beq.n	800ce5a <_raise_r+0x4c>
 800ce44:	1c59      	adds	r1, r3, #1
 800ce46:	d103      	bne.n	800ce50 <_raise_r+0x42>
 800ce48:	2316      	movs	r3, #22
 800ce4a:	6003      	str	r3, [r0, #0]
 800ce4c:	2001      	movs	r0, #1
 800ce4e:	e7e7      	b.n	800ce20 <_raise_r+0x12>
 800ce50:	2400      	movs	r4, #0
 800ce52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce56:	4628      	mov	r0, r5
 800ce58:	4798      	blx	r3
 800ce5a:	2000      	movs	r0, #0
 800ce5c:	e7e0      	b.n	800ce20 <_raise_r+0x12>
	...

0800ce60 <raise>:
 800ce60:	4b02      	ldr	r3, [pc, #8]	; (800ce6c <raise+0xc>)
 800ce62:	4601      	mov	r1, r0
 800ce64:	6818      	ldr	r0, [r3, #0]
 800ce66:	f7ff bfd2 	b.w	800ce0e <_raise_r>
 800ce6a:	bf00      	nop
 800ce6c:	24000024 	.word	0x24000024

0800ce70 <_kill_r>:
 800ce70:	b538      	push	{r3, r4, r5, lr}
 800ce72:	4d07      	ldr	r5, [pc, #28]	; (800ce90 <_kill_r+0x20>)
 800ce74:	2300      	movs	r3, #0
 800ce76:	4604      	mov	r4, r0
 800ce78:	4608      	mov	r0, r1
 800ce7a:	4611      	mov	r1, r2
 800ce7c:	602b      	str	r3, [r5, #0]
 800ce7e:	f7f4 fd1d 	bl	80018bc <_kill>
 800ce82:	1c43      	adds	r3, r0, #1
 800ce84:	d102      	bne.n	800ce8c <_kill_r+0x1c>
 800ce86:	682b      	ldr	r3, [r5, #0]
 800ce88:	b103      	cbz	r3, 800ce8c <_kill_r+0x1c>
 800ce8a:	6023      	str	r3, [r4, #0]
 800ce8c:	bd38      	pop	{r3, r4, r5, pc}
 800ce8e:	bf00      	nop
 800ce90:	240005e8 	.word	0x240005e8

0800ce94 <_getpid_r>:
 800ce94:	f7f4 bd0a 	b.w	80018ac <_getpid>

0800ce98 <__sread>:
 800ce98:	b510      	push	{r4, lr}
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea0:	f000 f89c 	bl	800cfdc <_read_r>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	bfab      	itete	ge
 800cea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ceaa:	89a3      	ldrhlt	r3, [r4, #12]
 800ceac:	181b      	addge	r3, r3, r0
 800ceae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ceb2:	bfac      	ite	ge
 800ceb4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ceb6:	81a3      	strhlt	r3, [r4, #12]
 800ceb8:	bd10      	pop	{r4, pc}

0800ceba <__swrite>:
 800ceba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cebe:	461f      	mov	r7, r3
 800cec0:	898b      	ldrh	r3, [r1, #12]
 800cec2:	05db      	lsls	r3, r3, #23
 800cec4:	4605      	mov	r5, r0
 800cec6:	460c      	mov	r4, r1
 800cec8:	4616      	mov	r6, r2
 800ceca:	d505      	bpl.n	800ced8 <__swrite+0x1e>
 800cecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ced0:	2302      	movs	r3, #2
 800ced2:	2200      	movs	r2, #0
 800ced4:	f000 f868 	bl	800cfa8 <_lseek_r>
 800ced8:	89a3      	ldrh	r3, [r4, #12]
 800ceda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cee2:	81a3      	strh	r3, [r4, #12]
 800cee4:	4632      	mov	r2, r6
 800cee6:	463b      	mov	r3, r7
 800cee8:	4628      	mov	r0, r5
 800ceea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceee:	f000 b817 	b.w	800cf20 <_write_r>

0800cef2 <__sseek>:
 800cef2:	b510      	push	{r4, lr}
 800cef4:	460c      	mov	r4, r1
 800cef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cefa:	f000 f855 	bl	800cfa8 <_lseek_r>
 800cefe:	1c43      	adds	r3, r0, #1
 800cf00:	89a3      	ldrh	r3, [r4, #12]
 800cf02:	bf15      	itete	ne
 800cf04:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf0e:	81a3      	strheq	r3, [r4, #12]
 800cf10:	bf18      	it	ne
 800cf12:	81a3      	strhne	r3, [r4, #12]
 800cf14:	bd10      	pop	{r4, pc}

0800cf16 <__sclose>:
 800cf16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf1a:	f000 b813 	b.w	800cf44 <_close_r>
	...

0800cf20 <_write_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4d07      	ldr	r5, [pc, #28]	; (800cf40 <_write_r+0x20>)
 800cf24:	4604      	mov	r4, r0
 800cf26:	4608      	mov	r0, r1
 800cf28:	4611      	mov	r1, r2
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	602a      	str	r2, [r5, #0]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	f7f4 fcfb 	bl	800192a <_write>
 800cf34:	1c43      	adds	r3, r0, #1
 800cf36:	d102      	bne.n	800cf3e <_write_r+0x1e>
 800cf38:	682b      	ldr	r3, [r5, #0]
 800cf3a:	b103      	cbz	r3, 800cf3e <_write_r+0x1e>
 800cf3c:	6023      	str	r3, [r4, #0]
 800cf3e:	bd38      	pop	{r3, r4, r5, pc}
 800cf40:	240005e8 	.word	0x240005e8

0800cf44 <_close_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	4d06      	ldr	r5, [pc, #24]	; (800cf60 <_close_r+0x1c>)
 800cf48:	2300      	movs	r3, #0
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	4608      	mov	r0, r1
 800cf4e:	602b      	str	r3, [r5, #0]
 800cf50:	f7f4 fd07 	bl	8001962 <_close>
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	d102      	bne.n	800cf5e <_close_r+0x1a>
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	b103      	cbz	r3, 800cf5e <_close_r+0x1a>
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	240005e8 	.word	0x240005e8

0800cf64 <_fstat_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4d07      	ldr	r5, [pc, #28]	; (800cf84 <_fstat_r+0x20>)
 800cf68:	2300      	movs	r3, #0
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	4608      	mov	r0, r1
 800cf6e:	4611      	mov	r1, r2
 800cf70:	602b      	str	r3, [r5, #0]
 800cf72:	f7f4 fd02 	bl	800197a <_fstat>
 800cf76:	1c43      	adds	r3, r0, #1
 800cf78:	d102      	bne.n	800cf80 <_fstat_r+0x1c>
 800cf7a:	682b      	ldr	r3, [r5, #0]
 800cf7c:	b103      	cbz	r3, 800cf80 <_fstat_r+0x1c>
 800cf7e:	6023      	str	r3, [r4, #0]
 800cf80:	bd38      	pop	{r3, r4, r5, pc}
 800cf82:	bf00      	nop
 800cf84:	240005e8 	.word	0x240005e8

0800cf88 <_isatty_r>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	4d06      	ldr	r5, [pc, #24]	; (800cfa4 <_isatty_r+0x1c>)
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	4604      	mov	r4, r0
 800cf90:	4608      	mov	r0, r1
 800cf92:	602b      	str	r3, [r5, #0]
 800cf94:	f7f4 fd01 	bl	800199a <_isatty>
 800cf98:	1c43      	adds	r3, r0, #1
 800cf9a:	d102      	bne.n	800cfa2 <_isatty_r+0x1a>
 800cf9c:	682b      	ldr	r3, [r5, #0]
 800cf9e:	b103      	cbz	r3, 800cfa2 <_isatty_r+0x1a>
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	bd38      	pop	{r3, r4, r5, pc}
 800cfa4:	240005e8 	.word	0x240005e8

0800cfa8 <_lseek_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	4d07      	ldr	r5, [pc, #28]	; (800cfc8 <_lseek_r+0x20>)
 800cfac:	4604      	mov	r4, r0
 800cfae:	4608      	mov	r0, r1
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	602a      	str	r2, [r5, #0]
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	f7f4 fcfa 	bl	80019b0 <_lseek>
 800cfbc:	1c43      	adds	r3, r0, #1
 800cfbe:	d102      	bne.n	800cfc6 <_lseek_r+0x1e>
 800cfc0:	682b      	ldr	r3, [r5, #0]
 800cfc2:	b103      	cbz	r3, 800cfc6 <_lseek_r+0x1e>
 800cfc4:	6023      	str	r3, [r4, #0]
 800cfc6:	bd38      	pop	{r3, r4, r5, pc}
 800cfc8:	240005e8 	.word	0x240005e8

0800cfcc <_malloc_usable_size_r>:
 800cfcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfd0:	1f18      	subs	r0, r3, #4
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	bfbc      	itt	lt
 800cfd6:	580b      	ldrlt	r3, [r1, r0]
 800cfd8:	18c0      	addlt	r0, r0, r3
 800cfda:	4770      	bx	lr

0800cfdc <_read_r>:
 800cfdc:	b538      	push	{r3, r4, r5, lr}
 800cfde:	4d07      	ldr	r5, [pc, #28]	; (800cffc <_read_r+0x20>)
 800cfe0:	4604      	mov	r4, r0
 800cfe2:	4608      	mov	r0, r1
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	602a      	str	r2, [r5, #0]
 800cfea:	461a      	mov	r2, r3
 800cfec:	f7f4 fc80 	bl	80018f0 <_read>
 800cff0:	1c43      	adds	r3, r0, #1
 800cff2:	d102      	bne.n	800cffa <_read_r+0x1e>
 800cff4:	682b      	ldr	r3, [r5, #0]
 800cff6:	b103      	cbz	r3, 800cffa <_read_r+0x1e>
 800cff8:	6023      	str	r3, [r4, #0]
 800cffa:	bd38      	pop	{r3, r4, r5, pc}
 800cffc:	240005e8 	.word	0x240005e8

0800d000 <_init>:
 800d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d002:	bf00      	nop
 800d004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d006:	bc08      	pop	{r3}
 800d008:	469e      	mov	lr, r3
 800d00a:	4770      	bx	lr

0800d00c <_fini>:
 800d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00e:	bf00      	nop
 800d010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d012:	bc08      	pop	{r3}
 800d014:	469e      	mov	lr, r3
 800d016:	4770      	bx	lr
